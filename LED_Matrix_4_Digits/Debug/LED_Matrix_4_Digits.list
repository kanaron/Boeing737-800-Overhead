
LED_Matrix_4_Digits.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053b4  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  0800546c  0800546c  0000646c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800565c  0800565c  00007368  2**0
                  CONTENTS
  4 .ARM          00000000  0800565c  0800565c  00007368  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800565c  0800565c  00007368  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800565c  0800565c  0000665c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005660  08005660  00006660  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000368  20000000  08005664  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000838  20000368  080059cc  00007368  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ba0  080059cc  00007ba0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00007368  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010a8f  00000000  00000000  00007390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002893  00000000  00000000  00017e1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e28  00000000  00000000  0001a6b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b04  00000000  00000000  0001b4e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016b4f  00000000  00000000  0001bfe4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013f44  00000000  00000000  00032b33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086b68  00000000  00000000  00046a77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cd5df  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039d4  00000000  00000000  000cd624  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  000d0ff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000368 	.word	0x20000368
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08005454 	.word	0x08005454

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	2000036c 	.word	0x2000036c
 80000fc:	08005454 	.word	0x08005454

08000100 <strcmp>:
 8000100:	7802      	ldrb	r2, [r0, #0]
 8000102:	780b      	ldrb	r3, [r1, #0]
 8000104:	2a00      	cmp	r2, #0
 8000106:	d003      	beq.n	8000110 <strcmp+0x10>
 8000108:	3001      	adds	r0, #1
 800010a:	3101      	adds	r1, #1
 800010c:	429a      	cmp	r2, r3
 800010e:	d0f7      	beq.n	8000100 <strcmp>
 8000110:	1ad0      	subs	r0, r2, r3
 8000112:	4770      	bx	lr

08000114 <__gnu_thumb1_case_shi>:
 8000114:	b403      	push	{r0, r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0040      	lsls	r0, r0, #1
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	5e09      	ldrsh	r1, [r1, r0]
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	448e      	add	lr, r1
 8000124:	bc03      	pop	{r0, r1}
 8000126:	4770      	bx	lr

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	@ 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f806 	bl	800023c <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			@ (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__aeabi_idiv0>:
 800023c:	4770      	bx	lr
 800023e:	46c0      	nop			@ (mov r8, r8)

08000240 <Dot_init>:


#include "Dot.h"
#include "LedDriver.h"

void Dot_init(Dot *dot, uint8_t addr) {
 8000240:	b580      	push	{r7, lr}
 8000242:	b082      	sub	sp, #8
 8000244:	af00      	add	r7, sp, #0
 8000246:	6078      	str	r0, [r7, #4]
 8000248:	000a      	movs	r2, r1
 800024a:	1cfb      	adds	r3, r7, #3
 800024c:	701a      	strb	r2, [r3, #0]
    dot->address = addr;
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	1cfa      	adds	r2, r7, #3
 8000252:	7812      	ldrb	r2, [r2, #0]
 8000254:	701a      	strb	r2, [r3, #0]
    dot->state = false;
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	2200      	movs	r2, #0
 800025a:	705a      	strb	r2, [r3, #1]
}
 800025c:	46c0      	nop			@ (mov r8, r8)
 800025e:	46bd      	mov	sp, r7
 8000260:	b002      	add	sp, #8
 8000262:	bd80      	pop	{r7, pc}

08000264 <Dot_turn_on>:

void Dot_turn_on(Dot *dot) {
 8000264:	b580      	push	{r7, lr}
 8000266:	b082      	sub	sp, #8
 8000268:	af00      	add	r7, sp, #0
 800026a:	6078      	str	r0, [r7, #4]
    dot->state = true;
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	2201      	movs	r2, #1
 8000270:	705a      	strb	r2, [r3, #1]
    IS_IIC_WriteByte(Addr_GND_GND, 0xFE, 0xC5);  // Unlock FDh
 8000272:	22c5      	movs	r2, #197	@ 0xc5
 8000274:	21fe      	movs	r1, #254	@ 0xfe
 8000276:	20a0      	movs	r0, #160	@ 0xa0
 8000278:	f000 f844 	bl	8000304 <IS_IIC_WriteByte>
    	IS_IIC_WriteByte(Addr_GND_GND, 0xFD, 0x01);  // Select page 1: PWM registers
 800027c:	2201      	movs	r2, #1
 800027e:	21fd      	movs	r1, #253	@ 0xfd
 8000280:	20a0      	movs	r0, #160	@ 0xa0
 8000282:	f000 f83f 	bl	8000304 <IS_IIC_WriteByte>
    // Write the state to the LED driver
    IS_IIC_WriteByte(Addr_GND_GND, dot->address, 0xFF);  // Turn on LED
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	781b      	ldrb	r3, [r3, #0]
 800028a:	22ff      	movs	r2, #255	@ 0xff
 800028c:	0019      	movs	r1, r3
 800028e:	20a0      	movs	r0, #160	@ 0xa0
 8000290:	f000 f838 	bl	8000304 <IS_IIC_WriteByte>
}
 8000294:	46c0      	nop			@ (mov r8, r8)
 8000296:	46bd      	mov	sp, r7
 8000298:	b002      	add	sp, #8
 800029a:	bd80      	pop	{r7, pc}

0800029c <Dot_turn_off>:

void Dot_turn_off(Dot *dot) {
 800029c:	b580      	push	{r7, lr}
 800029e:	b082      	sub	sp, #8
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	6078      	str	r0, [r7, #4]
    dot->state = false;
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	2200      	movs	r2, #0
 80002a8:	705a      	strb	r2, [r3, #1]
    IS_IIC_WriteByte(Addr_GND_GND, 0xFE, 0xC5);  // Unlock FDh
 80002aa:	22c5      	movs	r2, #197	@ 0xc5
 80002ac:	21fe      	movs	r1, #254	@ 0xfe
 80002ae:	20a0      	movs	r0, #160	@ 0xa0
 80002b0:	f000 f828 	bl	8000304 <IS_IIC_WriteByte>
    	IS_IIC_WriteByte(Addr_GND_GND, 0xFD, 0x01);  // Select page 1: PWM registers
 80002b4:	2201      	movs	r2, #1
 80002b6:	21fd      	movs	r1, #253	@ 0xfd
 80002b8:	20a0      	movs	r0, #160	@ 0xa0
 80002ba:	f000 f823 	bl	8000304 <IS_IIC_WriteByte>
    // Write the state to the LED driver
    IS_IIC_WriteByte(Addr_GND_GND, dot->address, 0x00);  // Turn off LED
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	781b      	ldrb	r3, [r3, #0]
 80002c2:	2200      	movs	r2, #0
 80002c4:	0019      	movs	r1, r3
 80002c6:	20a0      	movs	r0, #160	@ 0xa0
 80002c8:	f000 f81c 	bl	8000304 <IS_IIC_WriteByte>
}
 80002cc:	46c0      	nop			@ (mov r8, r8)
 80002ce:	46bd      	mov	sp, r7
 80002d0:	b002      	add	sp, #8
 80002d2:	bd80      	pop	{r7, pc}

080002d4 <Dot_update_state>:

void Dot_update_state(Dot *dot, bool new_state) {
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b082      	sub	sp, #8
 80002d8:	af00      	add	r7, sp, #0
 80002da:	6078      	str	r0, [r7, #4]
 80002dc:	000a      	movs	r2, r1
 80002de:	1cfb      	adds	r3, r7, #3
 80002e0:	701a      	strb	r2, [r3, #0]
    if (new_state) {
 80002e2:	1cfb      	adds	r3, r7, #3
 80002e4:	781b      	ldrb	r3, [r3, #0]
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d004      	beq.n	80002f4 <Dot_update_state+0x20>
        Dot_turn_on(dot);
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	0018      	movs	r0, r3
 80002ee:	f7ff ffb9 	bl	8000264 <Dot_turn_on>
    } else {
        Dot_turn_off(dot);
    }
}
 80002f2:	e003      	b.n	80002fc <Dot_update_state+0x28>
        Dot_turn_off(dot);
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	0018      	movs	r0, r3
 80002f8:	f7ff ffd0 	bl	800029c <Dot_turn_off>
}
 80002fc:	46c0      	nop			@ (mov r8, r8)
 80002fe:	46bd      	mov	sp, r7
 8000300:	b002      	add	sp, #8
 8000302:	bd80      	pop	{r7, pc}

08000304 <IS_IIC_WriteByte>:
#include "LedDriver.h"

I2C_HandleTypeDef *_i2c;

// Function to write a byte via I2C
void IS_IIC_WriteByte(uint8_t Dev_Add, uint8_t Reg_Add, uint8_t Reg_Dat) {
 8000304:	b590      	push	{r4, r7, lr}
 8000306:	b087      	sub	sp, #28
 8000308:	af02      	add	r7, sp, #8
 800030a:	0004      	movs	r4, r0
 800030c:	0008      	movs	r0, r1
 800030e:	0011      	movs	r1, r2
 8000310:	1dfb      	adds	r3, r7, #7
 8000312:	1c22      	adds	r2, r4, #0
 8000314:	701a      	strb	r2, [r3, #0]
 8000316:	1dbb      	adds	r3, r7, #6
 8000318:	1c02      	adds	r2, r0, #0
 800031a:	701a      	strb	r2, [r3, #0]
 800031c:	1d7b      	adds	r3, r7, #5
 800031e:	1c0a      	adds	r2, r1, #0
 8000320:	701a      	strb	r2, [r3, #0]
    uint8_t data[2] = { Reg_Add, Reg_Dat };
 8000322:	240c      	movs	r4, #12
 8000324:	193b      	adds	r3, r7, r4
 8000326:	1dba      	adds	r2, r7, #6
 8000328:	7812      	ldrb	r2, [r2, #0]
 800032a:	701a      	strb	r2, [r3, #0]
 800032c:	193b      	adds	r3, r7, r4
 800032e:	1d7a      	adds	r2, r7, #5
 8000330:	7812      	ldrb	r2, [r2, #0]
 8000332:	705a      	strb	r2, [r3, #1]
    HAL_I2C_Master_Transmit(_i2c, Dev_Add, data, 2, HAL_MAX_DELAY);
 8000334:	4b07      	ldr	r3, [pc, #28]	@ (8000354 <IS_IIC_WriteByte+0x50>)
 8000336:	6818      	ldr	r0, [r3, #0]
 8000338:	1dfb      	adds	r3, r7, #7
 800033a:	781b      	ldrb	r3, [r3, #0]
 800033c:	b299      	uxth	r1, r3
 800033e:	193a      	adds	r2, r7, r4
 8000340:	2301      	movs	r3, #1
 8000342:	425b      	negs	r3, r3
 8000344:	9300      	str	r3, [sp, #0]
 8000346:	2302      	movs	r3, #2
 8000348:	f001 fb70 	bl	8001a2c <HAL_I2C_Master_Transmit>
}
 800034c:	46c0      	nop			@ (mov r8, r8)
 800034e:	46bd      	mov	sp, r7
 8000350:	b005      	add	sp, #20
 8000352:	bd90      	pop	{r4, r7, pc}
 8000354:	20000384 	.word	0x20000384

08000358 <IS31FL3733B_Init>:

// Function to initialize the IS31FL3733B driver
void IS31FL3733B_Init(I2C_HandleTypeDef *i2c, uint8_t globalCurrent) {
 8000358:	b590      	push	{r4, r7, lr}
 800035a:	b085      	sub	sp, #20
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]
 8000360:	000a      	movs	r2, r1
 8000362:	1cfb      	adds	r3, r7, #3
 8000364:	701a      	strb	r2, [r3, #0]
    uint8_t i;

    _i2c = i2c;
 8000366:	4b37      	ldr	r3, [pc, #220]	@ (8000444 <IS31FL3733B_Init+0xec>)
 8000368:	687a      	ldr	r2, [r7, #4]
 800036a:	601a      	str	r2, [r3, #0]

    HAL_Delay(10);
 800036c:	200a      	movs	r0, #10
 800036e:	f000 ffc9 	bl	8001304 <HAL_Delay>

    // Unlock register
    IS_IIC_WriteByte(Addr_GND_GND, 0xFE, 0xC5);  // Unlock FDh
 8000372:	22c5      	movs	r2, #197	@ 0xc5
 8000374:	21fe      	movs	r1, #254	@ 0xfe
 8000376:	20a0      	movs	r0, #160	@ 0xa0
 8000378:	f7ff ffc4 	bl	8000304 <IS_IIC_WriteByte>
    IS_IIC_WriteByte(Addr_GND_GND, 0xFD, 0x03);  // Select page 3: function registers
 800037c:	2203      	movs	r2, #3
 800037e:	21fd      	movs	r1, #253	@ 0xfd
 8000380:	20a0      	movs	r0, #160	@ 0xa0
 8000382:	f7ff ffbf 	bl	8000304 <IS_IIC_WriteByte>
    IS_IIC_WriteByte(Addr_GND_GND, 0x00, 0x00);  // Enable software shutdown
 8000386:	2200      	movs	r2, #0
 8000388:	2100      	movs	r1, #0
 800038a:	20a0      	movs	r0, #160	@ 0xa0
 800038c:	f7ff ffba 	bl	8000304 <IS_IIC_WriteByte>

    // Configure LED control registers
    IS_IIC_WriteByte(Addr_GND_GND, 0xFE, 0xC5);  // Unlock FDh
 8000390:	22c5      	movs	r2, #197	@ 0xc5
 8000392:	21fe      	movs	r1, #254	@ 0xfe
 8000394:	20a0      	movs	r0, #160	@ 0xa0
 8000396:	f7ff ffb5 	bl	8000304 <IS_IIC_WriteByte>
    IS_IIC_WriteByte(Addr_GND_GND, 0xFD, 0x00);  // Select page 0: control registe
 800039a:	2200      	movs	r2, #0
 800039c:	21fd      	movs	r1, #253	@ 0xfd
 800039e:	20a0      	movs	r0, #160	@ 0xa0
 80003a0:	f7ff ffb0 	bl	8000304 <IS_IIC_WriteByte>
    for (i = 0; i < 0x18; i++) {
 80003a4:	230f      	movs	r3, #15
 80003a6:	18fb      	adds	r3, r7, r3
 80003a8:	2200      	movs	r2, #0
 80003aa:	701a      	strb	r2, [r3, #0]
 80003ac:	e00d      	b.n	80003ca <IS31FL3733B_Init+0x72>
        IS_IIC_WriteByte(Addr_GND_GND, i, 0xFF);  // Turn on all LEDs
 80003ae:	240f      	movs	r4, #15
 80003b0:	193b      	adds	r3, r7, r4
 80003b2:	781b      	ldrb	r3, [r3, #0]
 80003b4:	22ff      	movs	r2, #255	@ 0xff
 80003b6:	0019      	movs	r1, r3
 80003b8:	20a0      	movs	r0, #160	@ 0xa0
 80003ba:	f7ff ffa3 	bl	8000304 <IS_IIC_WriteByte>
    for (i = 0; i < 0x18; i++) {
 80003be:	0021      	movs	r1, r4
 80003c0:	187b      	adds	r3, r7, r1
 80003c2:	781a      	ldrb	r2, [r3, #0]
 80003c4:	187b      	adds	r3, r7, r1
 80003c6:	3201      	adds	r2, #1
 80003c8:	701a      	strb	r2, [r3, #0]
 80003ca:	230f      	movs	r3, #15
 80003cc:	18fb      	adds	r3, r7, r3
 80003ce:	781b      	ldrb	r3, [r3, #0]
 80003d0:	2b17      	cmp	r3, #23
 80003d2:	d9ec      	bls.n	80003ae <IS31FL3733B_Init+0x56>
    };;

    IS_IIC_WriteByte(Addr_GND_GND, 0xFE, 0xC5);  // Unlock FDh
 80003d4:	22c5      	movs	r2, #197	@ 0xc5
 80003d6:	21fe      	movs	r1, #254	@ 0xfe
 80003d8:	20a0      	movs	r0, #160	@ 0xa0
 80003da:	f7ff ff93 	bl	8000304 <IS_IIC_WriteByte>
    IS_IIC_WriteByte(Addr_GND_GND, 0xFD, 0x03);  // Select page 3: function registers
 80003de:	2203      	movs	r2, #3
 80003e0:	21fd      	movs	r1, #253	@ 0xfd
 80003e2:	20a0      	movs	r0, #160	@ 0xa0
 80003e4:	f7ff ff8e 	bl	8000304 <IS_IIC_WriteByte>
    IS_IIC_WriteByte(Addr_GND_GND, 0x10, 0x07);
 80003e8:	2207      	movs	r2, #7
 80003ea:	2110      	movs	r1, #16
 80003ec:	20a0      	movs	r0, #160	@ 0xa0
 80003ee:	f7ff ff89 	bl	8000304 <IS_IIC_WriteByte>

    IS_IIC_WriteByte(Addr_GND_GND, 0xFE, 0xC5);  // Unlock FDh
 80003f2:	22c5      	movs	r2, #197	@ 0xc5
 80003f4:	21fe      	movs	r1, #254	@ 0xfe
 80003f6:	20a0      	movs	r0, #160	@ 0xa0
 80003f8:	f7ff ff84 	bl	8000304 <IS_IIC_WriteByte>
    IS_IIC_WriteByte(Addr_GND_GND, 0xFD, 0x03);  // Select page 3: function registers
 80003fc:	2203      	movs	r2, #3
 80003fe:	21fd      	movs	r1, #253	@ 0xfd
 8000400:	20a0      	movs	r0, #160	@ 0xa0
 8000402:	f7ff ff7f 	bl	8000304 <IS_IIC_WriteByte>
    IS_IIC_WriteByte(Addr_GND_GND, 0x0F, 0x07);
 8000406:	2207      	movs	r2, #7
 8000408:	210f      	movs	r1, #15
 800040a:	20a0      	movs	r0, #160	@ 0xa0
 800040c:	f7ff ff7a 	bl	8000304 <IS_IIC_WriteByte>

    // Release shutdown, set normal operation, and configure global current
    IS_IIC_WriteByte(Addr_GND_GND, 0xFE, 0xC5);  // Unlock FDh
 8000410:	22c5      	movs	r2, #197	@ 0xc5
 8000412:	21fe      	movs	r1, #254	@ 0xfe
 8000414:	20a0      	movs	r0, #160	@ 0xa0
 8000416:	f7ff ff75 	bl	8000304 <IS_IIC_WriteByte>
    IS_IIC_WriteByte(Addr_GND_GND, 0xFD, 0x03);  // Select page 3: function registers
 800041a:	2203      	movs	r2, #3
 800041c:	21fd      	movs	r1, #253	@ 0xfd
 800041e:	20a0      	movs	r0, #160	@ 0xa0
 8000420:	f7ff ff70 	bl	8000304 <IS_IIC_WriteByte>
    IS_IIC_WriteByte(Addr_GND_GND, 0x00, 0x11);  // Release shutdown
 8000424:	2211      	movs	r2, #17
 8000426:	2100      	movs	r1, #0
 8000428:	20a0      	movs	r0, #160	@ 0xa0
 800042a:	f7ff ff6b 	bl	8000304 <IS_IIC_WriteByte>
    IS_IIC_WriteByte(Addr_GND_GND, 0x01, globalCurrent);  // Set global current
 800042e:	1cfb      	adds	r3, r7, #3
 8000430:	781b      	ldrb	r3, [r3, #0]
 8000432:	001a      	movs	r2, r3
 8000434:	2101      	movs	r1, #1
 8000436:	20a0      	movs	r0, #160	@ 0xa0
 8000438:	f7ff ff64 	bl	8000304 <IS_IIC_WriteByte>
}
 800043c:	46c0      	nop			@ (mov r8, r8)
 800043e:	46bd      	mov	sp, r7
 8000440:	b005      	add	sp, #20
 8000442:	bd90      	pop	{r4, r7, pc}
 8000444:	20000384 	.word	0x20000384

08000448 <Matrix_init>:


#include "Matrix.h"
#include "digits.h"  // Include the digit table

void Matrix_init(Matrix *matrix, uint8_t startingAddress[7]) {
 8000448:	b580      	push	{r7, lr}
 800044a:	b086      	sub	sp, #24
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
 8000450:	6039      	str	r1, [r7, #0]
    // Initialize the 7x5 matrix of dots with addresses
    uint8_t address = 0x00;
 8000452:	2317      	movs	r3, #23
 8000454:	18fb      	adds	r3, r7, r3
 8000456:	2200      	movs	r2, #0
 8000458:	701a      	strb	r2, [r3, #0]
    for (int row = 0; row < 7; row++) {
 800045a:	2300      	movs	r3, #0
 800045c:	613b      	str	r3, [r7, #16]
 800045e:	e024      	b.n	80004aa <Matrix_init+0x62>
    	address = startingAddress[row];
 8000460:	693b      	ldr	r3, [r7, #16]
 8000462:	683a      	ldr	r2, [r7, #0]
 8000464:	18d2      	adds	r2, r2, r3
 8000466:	2317      	movs	r3, #23
 8000468:	18fb      	adds	r3, r7, r3
 800046a:	7812      	ldrb	r2, [r2, #0]
 800046c:	701a      	strb	r2, [r3, #0]
        for (int col = 0; col < 5; col++) {
 800046e:	2300      	movs	r3, #0
 8000470:	60fb      	str	r3, [r7, #12]
 8000472:	e014      	b.n	800049e <Matrix_init+0x56>
            Dot_init(&matrix->dots[row][col], address++);
 8000474:	693a      	ldr	r2, [r7, #16]
 8000476:	0013      	movs	r3, r2
 8000478:	009b      	lsls	r3, r3, #2
 800047a:	189b      	adds	r3, r3, r2
 800047c:	68fa      	ldr	r2, [r7, #12]
 800047e:	189b      	adds	r3, r3, r2
 8000480:	005b      	lsls	r3, r3, #1
 8000482:	687a      	ldr	r2, [r7, #4]
 8000484:	18d0      	adds	r0, r2, r3
 8000486:	2217      	movs	r2, #23
 8000488:	18bb      	adds	r3, r7, r2
 800048a:	781b      	ldrb	r3, [r3, #0]
 800048c:	18ba      	adds	r2, r7, r2
 800048e:	1c59      	adds	r1, r3, #1
 8000490:	7011      	strb	r1, [r2, #0]
 8000492:	0019      	movs	r1, r3
 8000494:	f7ff fed4 	bl	8000240 <Dot_init>
        for (int col = 0; col < 5; col++) {
 8000498:	68fb      	ldr	r3, [r7, #12]
 800049a:	3301      	adds	r3, #1
 800049c:	60fb      	str	r3, [r7, #12]
 800049e:	68fb      	ldr	r3, [r7, #12]
 80004a0:	2b04      	cmp	r3, #4
 80004a2:	dde7      	ble.n	8000474 <Matrix_init+0x2c>
    for (int row = 0; row < 7; row++) {
 80004a4:	693b      	ldr	r3, [r7, #16]
 80004a6:	3301      	adds	r3, #1
 80004a8:	613b      	str	r3, [r7, #16]
 80004aa:	693b      	ldr	r3, [r7, #16]
 80004ac:	2b06      	cmp	r3, #6
 80004ae:	ddd7      	ble.n	8000460 <Matrix_init+0x18>
        }
    }
}
 80004b0:	46c0      	nop			@ (mov r8, r8)
 80004b2:	46c0      	nop			@ (mov r8, r8)
 80004b4:	46bd      	mov	sp, r7
 80004b6:	b006      	add	sp, #24
 80004b8:	bd80      	pop	{r7, pc}

080004ba <Matrix_clear>:

void Matrix_clear(Matrix *matrix) {
 80004ba:	b580      	push	{r7, lr}
 80004bc:	b084      	sub	sp, #16
 80004be:	af00      	add	r7, sp, #0
 80004c0:	6078      	str	r0, [r7, #4]
    for (int row = 0; row < 7; row++) {
 80004c2:	2300      	movs	r3, #0
 80004c4:	60fb      	str	r3, [r7, #12]
 80004c6:	e017      	b.n	80004f8 <Matrix_clear+0x3e>
        for (int col = 0; col < 5; col++) {
 80004c8:	2300      	movs	r3, #0
 80004ca:	60bb      	str	r3, [r7, #8]
 80004cc:	e00e      	b.n	80004ec <Matrix_clear+0x32>
            Dot_turn_off(&matrix->dots[row][col]);
 80004ce:	68fa      	ldr	r2, [r7, #12]
 80004d0:	0013      	movs	r3, r2
 80004d2:	009b      	lsls	r3, r3, #2
 80004d4:	189b      	adds	r3, r3, r2
 80004d6:	68ba      	ldr	r2, [r7, #8]
 80004d8:	189b      	adds	r3, r3, r2
 80004da:	005b      	lsls	r3, r3, #1
 80004dc:	687a      	ldr	r2, [r7, #4]
 80004de:	18d3      	adds	r3, r2, r3
 80004e0:	0018      	movs	r0, r3
 80004e2:	f7ff fedb 	bl	800029c <Dot_turn_off>
        for (int col = 0; col < 5; col++) {
 80004e6:	68bb      	ldr	r3, [r7, #8]
 80004e8:	3301      	adds	r3, #1
 80004ea:	60bb      	str	r3, [r7, #8]
 80004ec:	68bb      	ldr	r3, [r7, #8]
 80004ee:	2b04      	cmp	r3, #4
 80004f0:	dded      	ble.n	80004ce <Matrix_clear+0x14>
    for (int row = 0; row < 7; row++) {
 80004f2:	68fb      	ldr	r3, [r7, #12]
 80004f4:	3301      	adds	r3, #1
 80004f6:	60fb      	str	r3, [r7, #12]
 80004f8:	68fb      	ldr	r3, [r7, #12]
 80004fa:	2b06      	cmp	r3, #6
 80004fc:	dde4      	ble.n	80004c8 <Matrix_clear+0xe>
        }
    }
}
 80004fe:	46c0      	nop			@ (mov r8, r8)
 8000500:	46c0      	nop			@ (mov r8, r8)
 8000502:	46bd      	mov	sp, r7
 8000504:	b004      	add	sp, #16
 8000506:	bd80      	pop	{r7, pc}

08000508 <Matrix_set_digit>:

void Matrix_set_digit(Matrix *matrix, uint8_t digit) {
 8000508:	b580      	push	{r7, lr}
 800050a:	b086      	sub	sp, #24
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
 8000510:	000a      	movs	r2, r1
 8000512:	1cfb      	adds	r3, r7, #3
 8000514:	701a      	strb	r2, [r3, #0]
    // Clear the matrix before displaying a digit
    Matrix_clear(matrix);
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	0018      	movs	r0, r3
 800051a:	f7ff ffce 	bl	80004ba <Matrix_clear>

    if (digit > 37) return; // Invalid digit index
 800051e:	1cfb      	adds	r3, r7, #3
 8000520:	781b      	ldrb	r3, [r3, #0]
 8000522:	2b25      	cmp	r3, #37	@ 0x25
 8000524:	d83d      	bhi.n	80005a2 <Matrix_set_digit+0x9a>

    for (int row = 0; row < 5; row++) {
 8000526:	2300      	movs	r3, #0
 8000528:	617b      	str	r3, [r7, #20]
 800052a:	e036      	b.n	800059a <Matrix_set_digit+0x92>
        uint8_t bitmask = digits[digit][row];
 800052c:	1cfb      	adds	r3, r7, #3
 800052e:	781a      	ldrb	r2, [r3, #0]
 8000530:	491e      	ldr	r1, [pc, #120]	@ (80005ac <Matrix_set_digit+0xa4>)
 8000532:	0013      	movs	r3, r2
 8000534:	009b      	lsls	r3, r3, #2
 8000536:	189b      	adds	r3, r3, r2
 8000538:	697a      	ldr	r2, [r7, #20]
 800053a:	189b      	adds	r3, r3, r2
 800053c:	009b      	lsls	r3, r3, #2
 800053e:	585a      	ldr	r2, [r3, r1]
 8000540:	230f      	movs	r3, #15
 8000542:	18fb      	adds	r3, r7, r3
 8000544:	701a      	strb	r2, [r3, #0]
        for (int col = 0; col < 7; col++) {
 8000546:	2300      	movs	r3, #0
 8000548:	613b      	str	r3, [r7, #16]
 800054a:	e020      	b.n	800058e <Matrix_set_digit+0x86>
            bool state = bitmask & (1 << (6 - col));
 800054c:	230f      	movs	r3, #15
 800054e:	18fb      	adds	r3, r7, r3
 8000550:	781b      	ldrb	r3, [r3, #0]
 8000552:	693a      	ldr	r2, [r7, #16]
 8000554:	2106      	movs	r1, #6
 8000556:	1a8a      	subs	r2, r1, r2
 8000558:	2101      	movs	r1, #1
 800055a:	4091      	lsls	r1, r2
 800055c:	000a      	movs	r2, r1
 800055e:	401a      	ands	r2, r3
 8000560:	200e      	movs	r0, #14
 8000562:	183b      	adds	r3, r7, r0
 8000564:	1e51      	subs	r1, r2, #1
 8000566:	418a      	sbcs	r2, r1
 8000568:	701a      	strb	r2, [r3, #0]
            Dot_update_state(&matrix->dots[col][row], state);
 800056a:	693a      	ldr	r2, [r7, #16]
 800056c:	0013      	movs	r3, r2
 800056e:	009b      	lsls	r3, r3, #2
 8000570:	189b      	adds	r3, r3, r2
 8000572:	697a      	ldr	r2, [r7, #20]
 8000574:	189b      	adds	r3, r3, r2
 8000576:	005b      	lsls	r3, r3, #1
 8000578:	687a      	ldr	r2, [r7, #4]
 800057a:	18d2      	adds	r2, r2, r3
 800057c:	183b      	adds	r3, r7, r0
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	0019      	movs	r1, r3
 8000582:	0010      	movs	r0, r2
 8000584:	f7ff fea6 	bl	80002d4 <Dot_update_state>
        for (int col = 0; col < 7; col++) {
 8000588:	693b      	ldr	r3, [r7, #16]
 800058a:	3301      	adds	r3, #1
 800058c:	613b      	str	r3, [r7, #16]
 800058e:	693b      	ldr	r3, [r7, #16]
 8000590:	2b06      	cmp	r3, #6
 8000592:	dddb      	ble.n	800054c <Matrix_set_digit+0x44>
    for (int row = 0; row < 5; row++) {
 8000594:	697b      	ldr	r3, [r7, #20]
 8000596:	3301      	adds	r3, #1
 8000598:	617b      	str	r3, [r7, #20]
 800059a:	697b      	ldr	r3, [r7, #20]
 800059c:	2b04      	cmp	r3, #4
 800059e:	ddc5      	ble.n	800052c <Matrix_set_digit+0x24>
 80005a0:	e000      	b.n	80005a4 <Matrix_set_digit+0x9c>
    if (digit > 37) return; // Invalid digit index
 80005a2:	46c0      	nop			@ (mov r8, r8)
        }
    }
}
 80005a4:	46bd      	mov	sp, r7
 80005a6:	b006      	add	sp, #24
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	46c0      	nop			@ (mov r8, r8)
 80005ac:	20000000 	.word	0x20000000

080005b0 <InitializeMatrix>:
uint16_t expectedFrameLength = 0;
uint8_t dataReady = 0;
uint8_t parsingFrameLength = 1;

void InitializeMatrix(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af00      	add	r7, sp, #0
	IS31FL3733B_Init(&hi2c1, 5);
 80005b6:	4b3f      	ldr	r3, [pc, #252]	@ (80006b4 <InitializeMatrix+0x104>)
 80005b8:	2105      	movs	r1, #5
 80005ba:	0018      	movs	r0, r3
 80005bc:	f7ff fecc 	bl	8000358 <IS31FL3733B_Init>

	uint8_t addressArray[] = {0x00, 0x10, 0x20, 0x30, 0x40, 0x50, 0x60};
 80005c0:	1d3b      	adds	r3, r7, #4
 80005c2:	4a3d      	ldr	r2, [pc, #244]	@ (80006b8 <InitializeMatrix+0x108>)
 80005c4:	6811      	ldr	r1, [r2, #0]
 80005c6:	6019      	str	r1, [r3, #0]
 80005c8:	8891      	ldrh	r1, [r2, #4]
 80005ca:	8099      	strh	r1, [r3, #4]
 80005cc:	7992      	ldrb	r2, [r2, #6]
 80005ce:	719a      	strb	r2, [r3, #6]
	Matrix_init(&matrix[0], addressArray);
 80005d0:	1d3a      	adds	r2, r7, #4
 80005d2:	4b3a      	ldr	r3, [pc, #232]	@ (80006bc <InitializeMatrix+0x10c>)
 80005d4:	0011      	movs	r1, r2
 80005d6:	0018      	movs	r0, r3
 80005d8:	f7ff ff36 	bl	8000448 <Matrix_init>

	addressArray[0] = 0x05;
 80005dc:	1d3b      	adds	r3, r7, #4
 80005de:	2205      	movs	r2, #5
 80005e0:	701a      	strb	r2, [r3, #0]
	addressArray[1] = 0x15;
 80005e2:	1d3b      	adds	r3, r7, #4
 80005e4:	2215      	movs	r2, #21
 80005e6:	705a      	strb	r2, [r3, #1]
	addressArray[2] = 0x25;
 80005e8:	1d3b      	adds	r3, r7, #4
 80005ea:	2225      	movs	r2, #37	@ 0x25
 80005ec:	709a      	strb	r2, [r3, #2]
	addressArray[3] = 0x35;
 80005ee:	1d3b      	adds	r3, r7, #4
 80005f0:	2235      	movs	r2, #53	@ 0x35
 80005f2:	70da      	strb	r2, [r3, #3]
	addressArray[4] = 0x45;
 80005f4:	1d3b      	adds	r3, r7, #4
 80005f6:	2245      	movs	r2, #69	@ 0x45
 80005f8:	711a      	strb	r2, [r3, #4]
	addressArray[5] = 0x55;
 80005fa:	1d3b      	adds	r3, r7, #4
 80005fc:	2255      	movs	r2, #85	@ 0x55
 80005fe:	715a      	strb	r2, [r3, #5]
	addressArray[6] = 0x65;
 8000600:	1d3b      	adds	r3, r7, #4
 8000602:	2265      	movs	r2, #101	@ 0x65
 8000604:	719a      	strb	r2, [r3, #6]
	Matrix_init(&matrix[1], addressArray);
 8000606:	1d3a      	adds	r2, r7, #4
 8000608:	4b2d      	ldr	r3, [pc, #180]	@ (80006c0 <InitializeMatrix+0x110>)
 800060a:	0011      	movs	r1, r2
 800060c:	0018      	movs	r0, r3
 800060e:	f7ff ff1b 	bl	8000448 <Matrix_init>

	addressArray[0] = 0x0A;
 8000612:	1d3b      	adds	r3, r7, #4
 8000614:	220a      	movs	r2, #10
 8000616:	701a      	strb	r2, [r3, #0]
	addressArray[1] = 0x1A;
 8000618:	1d3b      	adds	r3, r7, #4
 800061a:	221a      	movs	r2, #26
 800061c:	705a      	strb	r2, [r3, #1]
	addressArray[2] = 0x2A;
 800061e:	1d3b      	adds	r3, r7, #4
 8000620:	222a      	movs	r2, #42	@ 0x2a
 8000622:	709a      	strb	r2, [r3, #2]
	addressArray[3] = 0x3A;
 8000624:	1d3b      	adds	r3, r7, #4
 8000626:	223a      	movs	r2, #58	@ 0x3a
 8000628:	70da      	strb	r2, [r3, #3]
	addressArray[4] = 0x4A;
 800062a:	1d3b      	adds	r3, r7, #4
 800062c:	224a      	movs	r2, #74	@ 0x4a
 800062e:	711a      	strb	r2, [r3, #4]
	addressArray[5] = 0x5A;
 8000630:	1d3b      	adds	r3, r7, #4
 8000632:	225a      	movs	r2, #90	@ 0x5a
 8000634:	715a      	strb	r2, [r3, #5]
	addressArray[6] = 0x6A;
 8000636:	1d3b      	adds	r3, r7, #4
 8000638:	226a      	movs	r2, #106	@ 0x6a
 800063a:	719a      	strb	r2, [r3, #6]
	Matrix_init(&matrix[2], addressArray);
 800063c:	1d3a      	adds	r2, r7, #4
 800063e:	4b21      	ldr	r3, [pc, #132]	@ (80006c4 <InitializeMatrix+0x114>)
 8000640:	0011      	movs	r1, r2
 8000642:	0018      	movs	r0, r3
 8000644:	f7ff ff00 	bl	8000448 <Matrix_init>

	addressArray[0] = 0x70;
 8000648:	1d3b      	adds	r3, r7, #4
 800064a:	2270      	movs	r2, #112	@ 0x70
 800064c:	701a      	strb	r2, [r3, #0]
	addressArray[1] = 0x80;
 800064e:	1d3b      	adds	r3, r7, #4
 8000650:	2280      	movs	r2, #128	@ 0x80
 8000652:	705a      	strb	r2, [r3, #1]
	addressArray[2] = 0x90;
 8000654:	1d3b      	adds	r3, r7, #4
 8000656:	2290      	movs	r2, #144	@ 0x90
 8000658:	709a      	strb	r2, [r3, #2]
	addressArray[3] = 0xA0;
 800065a:	1d3b      	adds	r3, r7, #4
 800065c:	22a0      	movs	r2, #160	@ 0xa0
 800065e:	70da      	strb	r2, [r3, #3]
	addressArray[4] = 0xB0;
 8000660:	1d3b      	adds	r3, r7, #4
 8000662:	22b0      	movs	r2, #176	@ 0xb0
 8000664:	711a      	strb	r2, [r3, #4]
	addressArray[5] = 0xA5;
 8000666:	1d3b      	adds	r3, r7, #4
 8000668:	22a5      	movs	r2, #165	@ 0xa5
 800066a:	715a      	strb	r2, [r3, #5]
	addressArray[6] = 0xB5;
 800066c:	1d3b      	adds	r3, r7, #4
 800066e:	22b5      	movs	r2, #181	@ 0xb5
 8000670:	719a      	strb	r2, [r3, #6]
	Matrix_init(&matrix[3], addressArray);
 8000672:	1d3a      	adds	r2, r7, #4
 8000674:	4b14      	ldr	r3, [pc, #80]	@ (80006c8 <InitializeMatrix+0x118>)
 8000676:	0011      	movs	r1, r2
 8000678:	0018      	movs	r0, r3
 800067a:	f7ff fee5 	bl	8000448 <Matrix_init>

	for (int i = 0; i < 4; i++)
 800067e:	2300      	movs	r3, #0
 8000680:	60fb      	str	r3, [r7, #12]
 8000682:	e00e      	b.n	80006a2 <InitializeMatrix+0xf2>
	{
		Matrix_set_digit(&matrix[i], characters[i]);
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	2246      	movs	r2, #70	@ 0x46
 8000688:	435a      	muls	r2, r3
 800068a:	4b0c      	ldr	r3, [pc, #48]	@ (80006bc <InitializeMatrix+0x10c>)
 800068c:	18d0      	adds	r0, r2, r3
 800068e:	4a0f      	ldr	r2, [pc, #60]	@ (80006cc <InitializeMatrix+0x11c>)
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	18d3      	adds	r3, r2, r3
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	0019      	movs	r1, r3
 8000698:	f7ff ff36 	bl	8000508 <Matrix_set_digit>
	for (int i = 0; i < 4; i++)
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	3301      	adds	r3, #1
 80006a0:	60fb      	str	r3, [r7, #12]
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	2b03      	cmp	r3, #3
 80006a6:	dded      	ble.n	8000684 <InitializeMatrix+0xd4>
	}
}
 80006a8:	46c0      	nop			@ (mov r8, r8)
 80006aa:	46c0      	nop			@ (mov r8, r8)
 80006ac:	46bd      	mov	sp, r7
 80006ae:	b004      	add	sp, #16
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	46c0      	nop			@ (mov r8, r8)
 80006b4:	20000388 	.word	0x20000388
 80006b8:	0800546c 	.word	0x0800546c
 80006bc:	20000528 	.word	0x20000528
 80006c0:	2000056e 	.word	0x2000056e
 80006c4:	200005b4 	.word	0x200005b4
 80006c8:	200005fa 	.word	0x200005fa
 80006cc:	200002f8 	.word	0x200002f8

080006d0 <InitializeCommand>:

void InitializeCommand(int value)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
	IS31FL3733B_Init(&hi2c1, value);
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	b2da      	uxtb	r2, r3
 80006dc:	4b04      	ldr	r3, [pc, #16]	@ (80006f0 <InitializeCommand+0x20>)
 80006de:	0011      	movs	r1, r2
 80006e0:	0018      	movs	r0, r3
 80006e2:	f7ff fe39 	bl	8000358 <IS31FL3733B_Init>
}
 80006e6:	46c0      	nop			@ (mov r8, r8)
 80006e8:	46bd      	mov	sp, r7
 80006ea:	b002      	add	sp, #8
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	46c0      	nop			@ (mov r8, r8)
 80006f0:	20000388 	.word	0x20000388

080006f4 <HandleDataCommand>:

void HandleDataCommand(char *param)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b086      	sub	sp, #24
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
	int index;
    for (int i = 0; i < 4; i++)
 80006fc:	2300      	movs	r3, #0
 80006fe:	613b      	str	r3, [r7, #16]
 8000700:	e04b      	b.n	800079a <HandleDataCommand+0xa6>
    {
    	char currentChar = param[i];
 8000702:	693b      	ldr	r3, [r7, #16]
 8000704:	687a      	ldr	r2, [r7, #4]
 8000706:	18d2      	adds	r2, r2, r3
 8000708:	210f      	movs	r1, #15
 800070a:	187b      	adds	r3, r7, r1
 800070c:	7812      	ldrb	r2, [r2, #0]
 800070e:	701a      	strb	r2, [r3, #0]

        if (currentChar >= '0' && currentChar <= '9')
 8000710:	000a      	movs	r2, r1
 8000712:	18bb      	adds	r3, r7, r2
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	2b2f      	cmp	r3, #47	@ 0x2f
 8000718:	d908      	bls.n	800072c <HandleDataCommand+0x38>
 800071a:	18bb      	adds	r3, r7, r2
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	2b39      	cmp	r3, #57	@ 0x39
 8000720:	d804      	bhi.n	800072c <HandleDataCommand+0x38>
        {
            index = currentChar - '0';  // '0' is index 0, '9' is index 9
 8000722:	18bb      	adds	r3, r7, r2
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	3b30      	subs	r3, #48	@ 0x30
 8000728:	617b      	str	r3, [r7, #20]
 800072a:	e01f      	b.n	800076c <HandleDataCommand+0x78>
        }
        else if (currentChar == ' ')
 800072c:	230f      	movs	r3, #15
 800072e:	18fb      	adds	r3, r7, r3
 8000730:	781b      	ldrb	r3, [r3, #0]
 8000732:	2b20      	cmp	r3, #32
 8000734:	d102      	bne.n	800073c <HandleDataCommand+0x48>
        {
            index = 10;  // Space is index 10
 8000736:	230a      	movs	r3, #10
 8000738:	617b      	str	r3, [r7, #20]
 800073a:	e017      	b.n	800076c <HandleDataCommand+0x78>
        }
        else if (currentChar == '*')
 800073c:	230f      	movs	r3, #15
 800073e:	18fb      	adds	r3, r7, r3
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	2b2a      	cmp	r3, #42	@ 0x2a
 8000744:	d102      	bne.n	800074c <HandleDataCommand+0x58>
        {
            index = 11;  // '*' is index 11
 8000746:	230b      	movs	r3, #11
 8000748:	617b      	str	r3, [r7, #20]
 800074a:	e00f      	b.n	800076c <HandleDataCommand+0x78>
        }
        else if (currentChar >= 'A' && currentChar <= 'Z')
 800074c:	220f      	movs	r2, #15
 800074e:	18bb      	adds	r3, r7, r2
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	2b40      	cmp	r3, #64	@ 0x40
 8000754:	d908      	bls.n	8000768 <HandleDataCommand+0x74>
 8000756:	18bb      	adds	r3, r7, r2
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	2b5a      	cmp	r3, #90	@ 0x5a
 800075c:	d804      	bhi.n	8000768 <HandleDataCommand+0x74>
        {
            index = 12 + (currentChar - 'A');  // 'A' is index 12, 'Z' is index 37
 800075e:	18bb      	adds	r3, r7, r2
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	3b35      	subs	r3, #53	@ 0x35
 8000764:	617b      	str	r3, [r7, #20]
 8000766:	e001      	b.n	800076c <HandleDataCommand+0x78>
        }
        else
        {
            index = 11; //invalid data as *
 8000768:	230b      	movs	r3, #11
 800076a:	617b      	str	r3, [r7, #20]
        }

        characters[i] = param[i];
 800076c:	693b      	ldr	r3, [r7, #16]
 800076e:	687a      	ldr	r2, [r7, #4]
 8000770:	18d3      	adds	r3, r2, r3
 8000772:	7819      	ldrb	r1, [r3, #0]
 8000774:	4a0d      	ldr	r2, [pc, #52]	@ (80007ac <HandleDataCommand+0xb8>)
 8000776:	693b      	ldr	r3, [r7, #16]
 8000778:	18d3      	adds	r3, r2, r3
 800077a:	1c0a      	adds	r2, r1, #0
 800077c:	701a      	strb	r2, [r3, #0]
        Matrix_set_digit(&matrix[i], index);
 800077e:	693b      	ldr	r3, [r7, #16]
 8000780:	2246      	movs	r2, #70	@ 0x46
 8000782:	435a      	muls	r2, r3
 8000784:	4b0a      	ldr	r3, [pc, #40]	@ (80007b0 <HandleDataCommand+0xbc>)
 8000786:	18d3      	adds	r3, r2, r3
 8000788:	697a      	ldr	r2, [r7, #20]
 800078a:	b2d2      	uxtb	r2, r2
 800078c:	0011      	movs	r1, r2
 800078e:	0018      	movs	r0, r3
 8000790:	f7ff feba 	bl	8000508 <Matrix_set_digit>
    for (int i = 0; i < 4; i++)
 8000794:	693b      	ldr	r3, [r7, #16]
 8000796:	3301      	adds	r3, #1
 8000798:	613b      	str	r3, [r7, #16]
 800079a:	693b      	ldr	r3, [r7, #16]
 800079c:	2b03      	cmp	r3, #3
 800079e:	ddb0      	ble.n	8000702 <HandleDataCommand+0xe>
    }
}
 80007a0:	46c0      	nop			@ (mov r8, r8)
 80007a2:	46c0      	nop			@ (mov r8, r8)
 80007a4:	46bd      	mov	sp, r7
 80007a6:	b006      	add	sp, #24
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	46c0      	nop			@ (mov r8, r8)
 80007ac:	200002f8 	.word	0x200002f8
 80007b0:	20000528 	.word	0x20000528

080007b4 <ProcessData>:

void ProcessData(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b0a2      	sub	sp, #136	@ 0x88
 80007b8:	af00      	add	r7, sp, #0
    char command[64];
    char parameter[64];
    uint8_t cmdIndex = 0;
 80007ba:	2387      	movs	r3, #135	@ 0x87
 80007bc:	18fb      	adds	r3, r7, r3
 80007be:	2200      	movs	r2, #0
 80007c0:	701a      	strb	r2, [r3, #0]
    uint8_t paramIndex = 0;
 80007c2:	2386      	movs	r3, #134	@ 0x86
 80007c4:	18fb      	adds	r3, r7, r3
 80007c6:	2200      	movs	r2, #0
 80007c8:	701a      	strb	r2, [r3, #0]
    uint8_t readingParam = 0;
 80007ca:	2385      	movs	r3, #133	@ 0x85
 80007cc:	18fb      	adds	r3, r7, r3
 80007ce:	2200      	movs	r2, #0
 80007d0:	701a      	strb	r2, [r3, #0]

    while (spi_rx_buffer[readIndex] != '\n')
 80007d2:	e03d      	b.n	8000850 <ProcessData+0x9c>
    {
        if (readingParam)
 80007d4:	2385      	movs	r3, #133	@ 0x85
 80007d6:	18fb      	adds	r3, r7, r3
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d00e      	beq.n	80007fc <ProcessData+0x48>
        {
            parameter[paramIndex++] = spi_rx_buffer[readIndex];
 80007de:	4b41      	ldr	r3, [pc, #260]	@ (80008e4 <ProcessData+0x130>)
 80007e0:	881b      	ldrh	r3, [r3, #0]
 80007e2:	0019      	movs	r1, r3
 80007e4:	2286      	movs	r2, #134	@ 0x86
 80007e6:	18bb      	adds	r3, r7, r2
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	18ba      	adds	r2, r7, r2
 80007ec:	1c58      	adds	r0, r3, #1
 80007ee:	7010      	strb	r0, [r2, #0]
 80007f0:	001a      	movs	r2, r3
 80007f2:	4b3d      	ldr	r3, [pc, #244]	@ (80008e8 <ProcessData+0x134>)
 80007f4:	5c59      	ldrb	r1, [r3, r1]
 80007f6:	003b      	movs	r3, r7
 80007f8:	5499      	strb	r1, [r3, r2]
 80007fa:	e01a      	b.n	8000832 <ProcessData+0x7e>
        }
        else
        {
            if (spi_rx_buffer[readIndex] == ':')
 80007fc:	4b39      	ldr	r3, [pc, #228]	@ (80008e4 <ProcessData+0x130>)
 80007fe:	881b      	ldrh	r3, [r3, #0]
 8000800:	001a      	movs	r2, r3
 8000802:	4b39      	ldr	r3, [pc, #228]	@ (80008e8 <ProcessData+0x134>)
 8000804:	5c9b      	ldrb	r3, [r3, r2]
 8000806:	2b3a      	cmp	r3, #58	@ 0x3a
 8000808:	d104      	bne.n	8000814 <ProcessData+0x60>
            {
                readingParam = 1;
 800080a:	2385      	movs	r3, #133	@ 0x85
 800080c:	18fb      	adds	r3, r7, r3
 800080e:	2201      	movs	r2, #1
 8000810:	701a      	strb	r2, [r3, #0]
 8000812:	e00e      	b.n	8000832 <ProcessData+0x7e>
            }
            else
            {
                command[cmdIndex++] = spi_rx_buffer[readIndex];
 8000814:	4b33      	ldr	r3, [pc, #204]	@ (80008e4 <ProcessData+0x130>)
 8000816:	881b      	ldrh	r3, [r3, #0]
 8000818:	0019      	movs	r1, r3
 800081a:	2287      	movs	r2, #135	@ 0x87
 800081c:	18bb      	adds	r3, r7, r2
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	18ba      	adds	r2, r7, r2
 8000822:	1c58      	adds	r0, r3, #1
 8000824:	7010      	strb	r0, [r2, #0]
 8000826:	001a      	movs	r2, r3
 8000828:	4b2f      	ldr	r3, [pc, #188]	@ (80008e8 <ProcessData+0x134>)
 800082a:	5c59      	ldrb	r1, [r3, r1]
 800082c:	2340      	movs	r3, #64	@ 0x40
 800082e:	18fb      	adds	r3, r7, r3
 8000830:	5499      	strb	r1, [r3, r2]
            }
        }

        readIndex++;
 8000832:	4b2c      	ldr	r3, [pc, #176]	@ (80008e4 <ProcessData+0x130>)
 8000834:	881b      	ldrh	r3, [r3, #0]
 8000836:	3301      	adds	r3, #1
 8000838:	b29a      	uxth	r2, r3
 800083a:	4b2a      	ldr	r3, [pc, #168]	@ (80008e4 <ProcessData+0x130>)
 800083c:	801a      	strh	r2, [r3, #0]
        if (readIndex >= 1024)
 800083e:	4b29      	ldr	r3, [pc, #164]	@ (80008e4 <ProcessData+0x130>)
 8000840:	881a      	ldrh	r2, [r3, #0]
 8000842:	2380      	movs	r3, #128	@ 0x80
 8000844:	00db      	lsls	r3, r3, #3
 8000846:	429a      	cmp	r2, r3
 8000848:	d302      	bcc.n	8000850 <ProcessData+0x9c>
        {
            readIndex = 0;
 800084a:	4b26      	ldr	r3, [pc, #152]	@ (80008e4 <ProcessData+0x130>)
 800084c:	2200      	movs	r2, #0
 800084e:	801a      	strh	r2, [r3, #0]
    while (spi_rx_buffer[readIndex] != '\n')
 8000850:	4b24      	ldr	r3, [pc, #144]	@ (80008e4 <ProcessData+0x130>)
 8000852:	881b      	ldrh	r3, [r3, #0]
 8000854:	001a      	movs	r2, r3
 8000856:	4b24      	ldr	r3, [pc, #144]	@ (80008e8 <ProcessData+0x134>)
 8000858:	5c9b      	ldrb	r3, [r3, r2]
 800085a:	2b0a      	cmp	r3, #10
 800085c:	d1ba      	bne.n	80007d4 <ProcessData+0x20>
        }
    }

    command[cmdIndex] = '\0';
 800085e:	2387      	movs	r3, #135	@ 0x87
 8000860:	18fb      	adds	r3, r7, r3
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	2040      	movs	r0, #64	@ 0x40
 8000866:	183a      	adds	r2, r7, r0
 8000868:	2100      	movs	r1, #0
 800086a:	54d1      	strb	r1, [r2, r3]
    parameter[paramIndex] = '\0';
 800086c:	2386      	movs	r3, #134	@ 0x86
 800086e:	18fb      	adds	r3, r7, r3
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	003a      	movs	r2, r7
 8000874:	2100      	movs	r1, #0
 8000876:	54d1      	strb	r1, [r2, r3]

    if (strcmp(command, "Initialize") == 0)
 8000878:	4a1c      	ldr	r2, [pc, #112]	@ (80008ec <ProcessData+0x138>)
 800087a:	183b      	adds	r3, r7, r0
 800087c:	0011      	movs	r1, r2
 800087e:	0018      	movs	r0, r3
 8000880:	f7ff fc3e 	bl	8000100 <strcmp>
 8000884:	1e03      	subs	r3, r0, #0
 8000886:	d10d      	bne.n	80008a4 <ProcessData+0xf0>
    {
        int paramValue = atoi(parameter);
 8000888:	003b      	movs	r3, r7
 800088a:	0018      	movs	r0, r3
 800088c:	f003 fde4 	bl	8004458 <atoi>
 8000890:	0003      	movs	r3, r0
 8000892:	2280      	movs	r2, #128	@ 0x80
 8000894:	18b9      	adds	r1, r7, r2
 8000896:	600b      	str	r3, [r1, #0]
        InitializeCommand(paramValue);
 8000898:	18bb      	adds	r3, r7, r2
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	0018      	movs	r0, r3
 800089e:	f7ff ff17 	bl	80006d0 <InitializeCommand>
 80008a2:	e014      	b.n	80008ce <ProcessData+0x11a>
    }
    else if (strcmp(command, "Data") == 0)
 80008a4:	4a12      	ldr	r2, [pc, #72]	@ (80008f0 <ProcessData+0x13c>)
 80008a6:	2340      	movs	r3, #64	@ 0x40
 80008a8:	18fb      	adds	r3, r7, r3
 80008aa:	0011      	movs	r1, r2
 80008ac:	0018      	movs	r0, r3
 80008ae:	f7ff fc27 	bl	8000100 <strcmp>
 80008b2:	1e03      	subs	r3, r0, #0
 80008b4:	d104      	bne.n	80008c0 <ProcessData+0x10c>
    {
        HandleDataCommand(parameter);
 80008b6:	003b      	movs	r3, r7
 80008b8:	0018      	movs	r0, r3
 80008ba:	f7ff ff1b 	bl	80006f4 <HandleDataCommand>
 80008be:	e006      	b.n	80008ce <ProcessData+0x11a>
    }
    else
    {
        printf("Unknown command: %s with parameter: %s\n", command, parameter);
 80008c0:	003a      	movs	r2, r7
 80008c2:	2340      	movs	r3, #64	@ 0x40
 80008c4:	18f9      	adds	r1, r7, r3
 80008c6:	4b0b      	ldr	r3, [pc, #44]	@ (80008f4 <ProcessData+0x140>)
 80008c8:	0018      	movs	r0, r3
 80008ca:	f003 ff25 	bl	8004718 <iprintf>
    }

    dataReady--;
 80008ce:	4b0a      	ldr	r3, [pc, #40]	@ (80008f8 <ProcessData+0x144>)
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	3b01      	subs	r3, #1
 80008d4:	b2da      	uxtb	r2, r3
 80008d6:	4b08      	ldr	r3, [pc, #32]	@ (80008f8 <ProcessData+0x144>)
 80008d8:	701a      	strb	r2, [r3, #0]
}
 80008da:	46c0      	nop			@ (mov r8, r8)
 80008dc:	46bd      	mov	sp, r7
 80008de:	b022      	add	sp, #136	@ 0x88
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	46c0      	nop			@ (mov r8, r8)
 80008e4:	20000a44 	.word	0x20000a44
 80008e8:	20000640 	.word	0x20000640
 80008ec:	08005474 	.word	0x08005474
 80008f0:	08005480 	.word	0x08005480
 80008f4:	08005488 	.word	0x08005488
 80008f8:	20000a48 	.word	0x20000a48

080008fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000900:	f000 fc7a 	bl	80011f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000904:	f000 f820 	bl	8000948 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000908:	f000 f966 	bl	8000bd8 <MX_GPIO_Init>
  MX_I2C1_Init();
 800090c:	f000 f876 	bl	80009fc <MX_I2C1_Init>
  MX_I2C2_Init();
 8000910:	f000 f8b4 	bl	8000a7c <MX_I2C2_Init>
  MX_SPI1_Init();
 8000914:	f000 f8f2 	bl	8000afc <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000918:	f000 f92a 	bl	8000b70 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  InitializeMatrix();
 800091c:	f7ff fe48 	bl	80005b0 <InitializeMatrix>

  HAL_SPI_Receive_IT(&hspi1, &receivedByte, 1);
 8000920:	4906      	ldr	r1, [pc, #24]	@ (800093c <main+0x40>)
 8000922:	4b07      	ldr	r3, [pc, #28]	@ (8000940 <main+0x44>)
 8000924:	2201      	movs	r2, #1
 8000926:	0018      	movs	r0, r3
 8000928:	f002 fb5c 	bl	8002fe4 <HAL_SPI_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if (dataReady > 0)
 800092c:	4b05      	ldr	r3, [pc, #20]	@ (8000944 <main+0x48>)
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	2b00      	cmp	r3, #0
 8000932:	d0fb      	beq.n	800092c <main+0x30>
	  {
		  ProcessData();
 8000934:	f7ff ff3e 	bl	80007b4 <ProcessData>
	  if (dataReady > 0)
 8000938:	e7f8      	b.n	800092c <main+0x30>
 800093a:	46c0      	nop			@ (mov r8, r8)
 800093c:	20000a40 	.word	0x20000a40
 8000940:	20000430 	.word	0x20000430
 8000944:	20000a48 	.word	0x20000a48

08000948 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000948:	b590      	push	{r4, r7, lr}
 800094a:	b093      	sub	sp, #76	@ 0x4c
 800094c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800094e:	2414      	movs	r4, #20
 8000950:	193b      	adds	r3, r7, r4
 8000952:	0018      	movs	r0, r3
 8000954:	2334      	movs	r3, #52	@ 0x34
 8000956:	001a      	movs	r2, r3
 8000958:	2100      	movs	r1, #0
 800095a:	f003 ff39 	bl	80047d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800095e:	1d3b      	adds	r3, r7, #4
 8000960:	0018      	movs	r0, r3
 8000962:	2310      	movs	r3, #16
 8000964:	001a      	movs	r2, r3
 8000966:	2100      	movs	r1, #0
 8000968:	f003 ff32 	bl	80047d0 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800096c:	2380      	movs	r3, #128	@ 0x80
 800096e:	009b      	lsls	r3, r3, #2
 8000970:	0018      	movs	r0, r3
 8000972:	f001 fc53 	bl	800221c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000976:	193b      	adds	r3, r7, r4
 8000978:	2202      	movs	r2, #2
 800097a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800097c:	193b      	adds	r3, r7, r4
 800097e:	2280      	movs	r2, #128	@ 0x80
 8000980:	0052      	lsls	r2, r2, #1
 8000982:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000984:	0021      	movs	r1, r4
 8000986:	187b      	adds	r3, r7, r1
 8000988:	2200      	movs	r2, #0
 800098a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800098c:	187b      	adds	r3, r7, r1
 800098e:	2240      	movs	r2, #64	@ 0x40
 8000990:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000992:	187b      	adds	r3, r7, r1
 8000994:	2202      	movs	r2, #2
 8000996:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000998:	187b      	adds	r3, r7, r1
 800099a:	2202      	movs	r2, #2
 800099c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800099e:	187b      	adds	r3, r7, r1
 80009a0:	2200      	movs	r2, #0
 80009a2:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 80009a4:	187b      	adds	r3, r7, r1
 80009a6:	2208      	movs	r2, #8
 80009a8:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009aa:	187b      	adds	r3, r7, r1
 80009ac:	2280      	movs	r2, #128	@ 0x80
 80009ae:	0292      	lsls	r2, r2, #10
 80009b0:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80009b2:	187b      	adds	r3, r7, r1
 80009b4:	2280      	movs	r2, #128	@ 0x80
 80009b6:	0592      	lsls	r2, r2, #22
 80009b8:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009ba:	187b      	adds	r3, r7, r1
 80009bc:	0018      	movs	r0, r3
 80009be:	f001 fc79 	bl	80022b4 <HAL_RCC_OscConfig>
 80009c2:	1e03      	subs	r3, r0, #0
 80009c4:	d001      	beq.n	80009ca <SystemClock_Config+0x82>
  {
    Error_Handler();
 80009c6:	f000 f9c3 	bl	8000d50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009ca:	1d3b      	adds	r3, r7, #4
 80009cc:	2207      	movs	r2, #7
 80009ce:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009d0:	1d3b      	adds	r3, r7, #4
 80009d2:	2202      	movs	r2, #2
 80009d4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009d6:	1d3b      	adds	r3, r7, #4
 80009d8:	2200      	movs	r2, #0
 80009da:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009dc:	1d3b      	adds	r3, r7, #4
 80009de:	2200      	movs	r2, #0
 80009e0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009e2:	1d3b      	adds	r3, r7, #4
 80009e4:	2102      	movs	r1, #2
 80009e6:	0018      	movs	r0, r3
 80009e8:	f001 ff74 	bl	80028d4 <HAL_RCC_ClockConfig>
 80009ec:	1e03      	subs	r3, r0, #0
 80009ee:	d001      	beq.n	80009f4 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80009f0:	f000 f9ae 	bl	8000d50 <Error_Handler>
  }
}
 80009f4:	46c0      	nop			@ (mov r8, r8)
 80009f6:	46bd      	mov	sp, r7
 80009f8:	b013      	add	sp, #76	@ 0x4c
 80009fa:	bd90      	pop	{r4, r7, pc}

080009fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a00:	4b1b      	ldr	r3, [pc, #108]	@ (8000a70 <MX_I2C1_Init+0x74>)
 8000a02:	4a1c      	ldr	r2, [pc, #112]	@ (8000a74 <MX_I2C1_Init+0x78>)
 8000a04:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 8000a06:	4b1a      	ldr	r3, [pc, #104]	@ (8000a70 <MX_I2C1_Init+0x74>)
 8000a08:	4a1b      	ldr	r2, [pc, #108]	@ (8000a78 <MX_I2C1_Init+0x7c>)
 8000a0a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a0c:	4b18      	ldr	r3, [pc, #96]	@ (8000a70 <MX_I2C1_Init+0x74>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a12:	4b17      	ldr	r3, [pc, #92]	@ (8000a70 <MX_I2C1_Init+0x74>)
 8000a14:	2201      	movs	r2, #1
 8000a16:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a18:	4b15      	ldr	r3, [pc, #84]	@ (8000a70 <MX_I2C1_Init+0x74>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a1e:	4b14      	ldr	r3, [pc, #80]	@ (8000a70 <MX_I2C1_Init+0x74>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a24:	4b12      	ldr	r3, [pc, #72]	@ (8000a70 <MX_I2C1_Init+0x74>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a2a:	4b11      	ldr	r3, [pc, #68]	@ (8000a70 <MX_I2C1_Init+0x74>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a30:	4b0f      	ldr	r3, [pc, #60]	@ (8000a70 <MX_I2C1_Init+0x74>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a36:	4b0e      	ldr	r3, [pc, #56]	@ (8000a70 <MX_I2C1_Init+0x74>)
 8000a38:	0018      	movs	r0, r3
 8000a3a:	f000 ff51 	bl	80018e0 <HAL_I2C_Init>
 8000a3e:	1e03      	subs	r3, r0, #0
 8000a40:	d001      	beq.n	8000a46 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a42:	f000 f985 	bl	8000d50 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a46:	4b0a      	ldr	r3, [pc, #40]	@ (8000a70 <MX_I2C1_Init+0x74>)
 8000a48:	2100      	movs	r1, #0
 8000a4a:	0018      	movs	r0, r3
 8000a4c:	f001 fb4e 	bl	80020ec <HAL_I2CEx_ConfigAnalogFilter>
 8000a50:	1e03      	subs	r3, r0, #0
 8000a52:	d001      	beq.n	8000a58 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a54:	f000 f97c 	bl	8000d50 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a58:	4b05      	ldr	r3, [pc, #20]	@ (8000a70 <MX_I2C1_Init+0x74>)
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	0018      	movs	r0, r3
 8000a5e:	f001 fb91 	bl	8002184 <HAL_I2CEx_ConfigDigitalFilter>
 8000a62:	1e03      	subs	r3, r0, #0
 8000a64:	d001      	beq.n	8000a6a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a66:	f000 f973 	bl	8000d50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a6a:	46c0      	nop			@ (mov r8, r8)
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	20000388 	.word	0x20000388
 8000a74:	40005400 	.word	0x40005400
 8000a78:	10707dbc 	.word	0x10707dbc

08000a7c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000a80:	4b1b      	ldr	r3, [pc, #108]	@ (8000af0 <MX_I2C2_Init+0x74>)
 8000a82:	4a1c      	ldr	r2, [pc, #112]	@ (8000af4 <MX_I2C2_Init+0x78>)
 8000a84:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10707DBC;
 8000a86:	4b1a      	ldr	r3, [pc, #104]	@ (8000af0 <MX_I2C2_Init+0x74>)
 8000a88:	4a1b      	ldr	r2, [pc, #108]	@ (8000af8 <MX_I2C2_Init+0x7c>)
 8000a8a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000a8c:	4b18      	ldr	r3, [pc, #96]	@ (8000af0 <MX_I2C2_Init+0x74>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a92:	4b17      	ldr	r3, [pc, #92]	@ (8000af0 <MX_I2C2_Init+0x74>)
 8000a94:	2201      	movs	r2, #1
 8000a96:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a98:	4b15      	ldr	r3, [pc, #84]	@ (8000af0 <MX_I2C2_Init+0x74>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000a9e:	4b14      	ldr	r3, [pc, #80]	@ (8000af0 <MX_I2C2_Init+0x74>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000aa4:	4b12      	ldr	r3, [pc, #72]	@ (8000af0 <MX_I2C2_Init+0x74>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000aaa:	4b11      	ldr	r3, [pc, #68]	@ (8000af0 <MX_I2C2_Init+0x74>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ab0:	4b0f      	ldr	r3, [pc, #60]	@ (8000af0 <MX_I2C2_Init+0x74>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000ab6:	4b0e      	ldr	r3, [pc, #56]	@ (8000af0 <MX_I2C2_Init+0x74>)
 8000ab8:	0018      	movs	r0, r3
 8000aba:	f000 ff11 	bl	80018e0 <HAL_I2C_Init>
 8000abe:	1e03      	subs	r3, r0, #0
 8000ac0:	d001      	beq.n	8000ac6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000ac2:	f000 f945 	bl	8000d50 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ac6:	4b0a      	ldr	r3, [pc, #40]	@ (8000af0 <MX_I2C2_Init+0x74>)
 8000ac8:	2100      	movs	r1, #0
 8000aca:	0018      	movs	r0, r3
 8000acc:	f001 fb0e 	bl	80020ec <HAL_I2CEx_ConfigAnalogFilter>
 8000ad0:	1e03      	subs	r3, r0, #0
 8000ad2:	d001      	beq.n	8000ad8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000ad4:	f000 f93c 	bl	8000d50 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000ad8:	4b05      	ldr	r3, [pc, #20]	@ (8000af0 <MX_I2C2_Init+0x74>)
 8000ada:	2100      	movs	r1, #0
 8000adc:	0018      	movs	r0, r3
 8000ade:	f001 fb51 	bl	8002184 <HAL_I2CEx_ConfigDigitalFilter>
 8000ae2:	1e03      	subs	r3, r0, #0
 8000ae4:	d001      	beq.n	8000aea <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000ae6:	f000 f933 	bl	8000d50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000aea:	46c0      	nop			@ (mov r8, r8)
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	200003dc 	.word	0x200003dc
 8000af4:	40005800 	.word	0x40005800
 8000af8:	10707dbc 	.word	0x10707dbc

08000afc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000b00:	4b19      	ldr	r3, [pc, #100]	@ (8000b68 <MX_SPI1_Init+0x6c>)
 8000b02:	4a1a      	ldr	r2, [pc, #104]	@ (8000b6c <MX_SPI1_Init+0x70>)
 8000b04:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8000b06:	4b18      	ldr	r3, [pc, #96]	@ (8000b68 <MX_SPI1_Init+0x6c>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b0c:	4b16      	ldr	r3, [pc, #88]	@ (8000b68 <MX_SPI1_Init+0x6c>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b12:	4b15      	ldr	r3, [pc, #84]	@ (8000b68 <MX_SPI1_Init+0x6c>)
 8000b14:	22e0      	movs	r2, #224	@ 0xe0
 8000b16:	00d2      	lsls	r2, r2, #3
 8000b18:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b1a:	4b13      	ldr	r3, [pc, #76]	@ (8000b68 <MX_SPI1_Init+0x6c>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b20:	4b11      	ldr	r3, [pc, #68]	@ (8000b68 <MX_SPI1_Init+0x6c>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8000b26:	4b10      	ldr	r3, [pc, #64]	@ (8000b68 <MX_SPI1_Init+0x6c>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b2c:	4b0e      	ldr	r3, [pc, #56]	@ (8000b68 <MX_SPI1_Init+0x6c>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b32:	4b0d      	ldr	r3, [pc, #52]	@ (8000b68 <MX_SPI1_Init+0x6c>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b38:	4b0b      	ldr	r3, [pc, #44]	@ (8000b68 <MX_SPI1_Init+0x6c>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000b3e:	4b0a      	ldr	r3, [pc, #40]	@ (8000b68 <MX_SPI1_Init+0x6c>)
 8000b40:	2207      	movs	r2, #7
 8000b42:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b44:	4b08      	ldr	r3, [pc, #32]	@ (8000b68 <MX_SPI1_Init+0x6c>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000b4a:	4b07      	ldr	r3, [pc, #28]	@ (8000b68 <MX_SPI1_Init+0x6c>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b50:	4b05      	ldr	r3, [pc, #20]	@ (8000b68 <MX_SPI1_Init+0x6c>)
 8000b52:	0018      	movs	r0, r3
 8000b54:	f002 f98e 	bl	8002e74 <HAL_SPI_Init>
 8000b58:	1e03      	subs	r3, r0, #0
 8000b5a:	d001      	beq.n	8000b60 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 8000b5c:	f000 f8f8 	bl	8000d50 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b60:	46c0      	nop			@ (mov r8, r8)
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	46c0      	nop			@ (mov r8, r8)
 8000b68:	20000430 	.word	0x20000430
 8000b6c:	40013000 	.word	0x40013000

08000b70 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b74:	4b16      	ldr	r3, [pc, #88]	@ (8000bd0 <MX_USART2_UART_Init+0x60>)
 8000b76:	4a17      	ldr	r2, [pc, #92]	@ (8000bd4 <MX_USART2_UART_Init+0x64>)
 8000b78:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b7a:	4b15      	ldr	r3, [pc, #84]	@ (8000bd0 <MX_USART2_UART_Init+0x60>)
 8000b7c:	22e1      	movs	r2, #225	@ 0xe1
 8000b7e:	0252      	lsls	r2, r2, #9
 8000b80:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b82:	4b13      	ldr	r3, [pc, #76]	@ (8000bd0 <MX_USART2_UART_Init+0x60>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b88:	4b11      	ldr	r3, [pc, #68]	@ (8000bd0 <MX_USART2_UART_Init+0x60>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b8e:	4b10      	ldr	r3, [pc, #64]	@ (8000bd0 <MX_USART2_UART_Init+0x60>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b94:	4b0e      	ldr	r3, [pc, #56]	@ (8000bd0 <MX_USART2_UART_Init+0x60>)
 8000b96:	220c      	movs	r2, #12
 8000b98:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b9a:	4b0d      	ldr	r3, [pc, #52]	@ (8000bd0 <MX_USART2_UART_Init+0x60>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ba0:	4b0b      	ldr	r3, [pc, #44]	@ (8000bd0 <MX_USART2_UART_Init+0x60>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ba6:	4b0a      	ldr	r3, [pc, #40]	@ (8000bd0 <MX_USART2_UART_Init+0x60>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bac:	4b08      	ldr	r3, [pc, #32]	@ (8000bd0 <MX_USART2_UART_Init+0x60>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bb2:	4b07      	ldr	r3, [pc, #28]	@ (8000bd0 <MX_USART2_UART_Init+0x60>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bb8:	4b05      	ldr	r3, [pc, #20]	@ (8000bd0 <MX_USART2_UART_Init+0x60>)
 8000bba:	0018      	movs	r0, r3
 8000bbc:	f003 f858 	bl	8003c70 <HAL_UART_Init>
 8000bc0:	1e03      	subs	r3, r0, #0
 8000bc2:	d001      	beq.n	8000bc8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000bc4:	f000 f8c4 	bl	8000d50 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bc8:	46c0      	nop			@ (mov r8, r8)
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	46c0      	nop			@ (mov r8, r8)
 8000bd0:	20000494 	.word	0x20000494
 8000bd4:	40004400 	.word	0x40004400

08000bd8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bd8:	b590      	push	{r4, r7, lr}
 8000bda:	b089      	sub	sp, #36	@ 0x24
 8000bdc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bde:	240c      	movs	r4, #12
 8000be0:	193b      	adds	r3, r7, r4
 8000be2:	0018      	movs	r0, r3
 8000be4:	2314      	movs	r3, #20
 8000be6:	001a      	movs	r2, r3
 8000be8:	2100      	movs	r1, #0
 8000bea:	f003 fdf1 	bl	80047d0 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bee:	4b22      	ldr	r3, [pc, #136]	@ (8000c78 <MX_GPIO_Init+0xa0>)
 8000bf0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000bf2:	4b21      	ldr	r3, [pc, #132]	@ (8000c78 <MX_GPIO_Init+0xa0>)
 8000bf4:	2102      	movs	r1, #2
 8000bf6:	430a      	orrs	r2, r1
 8000bf8:	635a      	str	r2, [r3, #52]	@ 0x34
 8000bfa:	4b1f      	ldr	r3, [pc, #124]	@ (8000c78 <MX_GPIO_Init+0xa0>)
 8000bfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000bfe:	2202      	movs	r2, #2
 8000c00:	4013      	ands	r3, r2
 8000c02:	60bb      	str	r3, [r7, #8]
 8000c04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c06:	4b1c      	ldr	r3, [pc, #112]	@ (8000c78 <MX_GPIO_Init+0xa0>)
 8000c08:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000c0a:	4b1b      	ldr	r3, [pc, #108]	@ (8000c78 <MX_GPIO_Init+0xa0>)
 8000c0c:	2101      	movs	r1, #1
 8000c0e:	430a      	orrs	r2, r1
 8000c10:	635a      	str	r2, [r3, #52]	@ 0x34
 8000c12:	4b19      	ldr	r3, [pc, #100]	@ (8000c78 <MX_GPIO_Init+0xa0>)
 8000c14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c16:	2201      	movs	r2, #1
 8000c18:	4013      	ands	r3, r2
 8000c1a:	607b      	str	r3, [r7, #4]
 8000c1c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DebugPin_GPIO_Port, DebugPin_Pin, GPIO_PIN_RESET);
 8000c1e:	4b17      	ldr	r3, [pc, #92]	@ (8000c7c <MX_GPIO_Init+0xa4>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	2108      	movs	r1, #8
 8000c24:	0018      	movs	r0, r3
 8000c26:	f000 fe3d 	bl	80018a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : INTB_Pin */
  GPIO_InitStruct.Pin = INTB_Pin;
 8000c2a:	193b      	adds	r3, r7, r4
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c30:	193b      	adds	r3, r7, r4
 8000c32:	2200      	movs	r2, #0
 8000c34:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c36:	193b      	adds	r3, r7, r4
 8000c38:	2200      	movs	r2, #0
 8000c3a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(INTB_GPIO_Port, &GPIO_InitStruct);
 8000c3c:	193a      	adds	r2, r7, r4
 8000c3e:	23a0      	movs	r3, #160	@ 0xa0
 8000c40:	05db      	lsls	r3, r3, #23
 8000c42:	0011      	movs	r1, r2
 8000c44:	0018      	movs	r0, r3
 8000c46:	f000 fcc9 	bl	80015dc <HAL_GPIO_Init>

  /*Configure GPIO pin : DebugPin_Pin */
  GPIO_InitStruct.Pin = DebugPin_Pin;
 8000c4a:	0021      	movs	r1, r4
 8000c4c:	187b      	adds	r3, r7, r1
 8000c4e:	2208      	movs	r2, #8
 8000c50:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c52:	187b      	adds	r3, r7, r1
 8000c54:	2201      	movs	r2, #1
 8000c56:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c58:	187b      	adds	r3, r7, r1
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5e:	187b      	adds	r3, r7, r1
 8000c60:	2200      	movs	r2, #0
 8000c62:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(DebugPin_GPIO_Port, &GPIO_InitStruct);
 8000c64:	187b      	adds	r3, r7, r1
 8000c66:	4a05      	ldr	r2, [pc, #20]	@ (8000c7c <MX_GPIO_Init+0xa4>)
 8000c68:	0019      	movs	r1, r3
 8000c6a:	0010      	movs	r0, r2
 8000c6c:	f000 fcb6 	bl	80015dc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c70:	46c0      	nop			@ (mov r8, r8)
 8000c72:	46bd      	mov	sp, r7
 8000c74:	b009      	add	sp, #36	@ 0x24
 8000c76:	bd90      	pop	{r4, r7, pc}
 8000c78:	40021000 	.word	0x40021000
 8000c7c:	50000400 	.word	0x50000400

08000c80 <HAL_SPI_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
	if (hspi->Instance == SPI1)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a29      	ldr	r2, [pc, #164]	@ (8000d34 <HAL_SPI_RxCpltCallback+0xb4>)
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	d14c      	bne.n	8000d2c <HAL_SPI_RxCpltCallback+0xac>
	    {
	        spi_rx_buffer[rxIndex++] = receivedByte;
 8000c92:	4b29      	ldr	r3, [pc, #164]	@ (8000d38 <HAL_SPI_RxCpltCallback+0xb8>)
 8000c94:	881b      	ldrh	r3, [r3, #0]
 8000c96:	1c5a      	adds	r2, r3, #1
 8000c98:	b291      	uxth	r1, r2
 8000c9a:	4a27      	ldr	r2, [pc, #156]	@ (8000d38 <HAL_SPI_RxCpltCallback+0xb8>)
 8000c9c:	8011      	strh	r1, [r2, #0]
 8000c9e:	001a      	movs	r2, r3
 8000ca0:	4b26      	ldr	r3, [pc, #152]	@ (8000d3c <HAL_SPI_RxCpltCallback+0xbc>)
 8000ca2:	7819      	ldrb	r1, [r3, #0]
 8000ca4:	4b26      	ldr	r3, [pc, #152]	@ (8000d40 <HAL_SPI_RxCpltCallback+0xc0>)
 8000ca6:	5499      	strb	r1, [r3, r2]

	        if (rxIndex >= 1024)
 8000ca8:	4b23      	ldr	r3, [pc, #140]	@ (8000d38 <HAL_SPI_RxCpltCallback+0xb8>)
 8000caa:	881a      	ldrh	r2, [r3, #0]
 8000cac:	2380      	movs	r3, #128	@ 0x80
 8000cae:	00db      	lsls	r3, r3, #3
 8000cb0:	429a      	cmp	r2, r3
 8000cb2:	d302      	bcc.n	8000cba <HAL_SPI_RxCpltCallback+0x3a>
	        {
	            rxIndex = 0;  // Reset index or handle overflow
 8000cb4:	4b20      	ldr	r3, [pc, #128]	@ (8000d38 <HAL_SPI_RxCpltCallback+0xb8>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	801a      	strh	r2, [r3, #0]
	        }

	        if (parsingFrameLength)  // If we're parsing the frame length
 8000cba:	4b22      	ldr	r3, [pc, #136]	@ (8000d44 <HAL_SPI_RxCpltCallback+0xc4>)
 8000cbc:	781b      	ldrb	r3, [r3, #0]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d018      	beq.n	8000cf4 <HAL_SPI_RxCpltCallback+0x74>
	        {
	            if (receivedByte == '\n')
 8000cc2:	4b1e      	ldr	r3, [pc, #120]	@ (8000d3c <HAL_SPI_RxCpltCallback+0xbc>)
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	2b0a      	cmp	r3, #10
 8000cc8:	d12a      	bne.n	8000d20 <HAL_SPI_RxCpltCallback+0xa0>
	            {
	                spi_rx_buffer[rxIndex] = '\0';  // Null-terminate to process as string
 8000cca:	4b1b      	ldr	r3, [pc, #108]	@ (8000d38 <HAL_SPI_RxCpltCallback+0xb8>)
 8000ccc:	881b      	ldrh	r3, [r3, #0]
 8000cce:	001a      	movs	r2, r3
 8000cd0:	4b1b      	ldr	r3, [pc, #108]	@ (8000d40 <HAL_SPI_RxCpltCallback+0xc0>)
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	5499      	strb	r1, [r3, r2]
	                expectedFrameLength = atoi((char *)spi_rx_buffer);  // Get the frame length
 8000cd6:	4b1a      	ldr	r3, [pc, #104]	@ (8000d40 <HAL_SPI_RxCpltCallback+0xc0>)
 8000cd8:	0018      	movs	r0, r3
 8000cda:	f003 fbbd 	bl	8004458 <atoi>
 8000cde:	0003      	movs	r3, r0
 8000ce0:	b29a      	uxth	r2, r3
 8000ce2:	4b19      	ldr	r3, [pc, #100]	@ (8000d48 <HAL_SPI_RxCpltCallback+0xc8>)
 8000ce4:	801a      	strh	r2, [r3, #0]
	                rxIndex = 0;  // Reset index for actual frame data reception
 8000ce6:	4b14      	ldr	r3, [pc, #80]	@ (8000d38 <HAL_SPI_RxCpltCallback+0xb8>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	801a      	strh	r2, [r3, #0]

	                parsingFrameLength = 0;
 8000cec:	4b15      	ldr	r3, [pc, #84]	@ (8000d44 <HAL_SPI_RxCpltCallback+0xc4>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	701a      	strb	r2, [r3, #0]
 8000cf2:	e015      	b.n	8000d20 <HAL_SPI_RxCpltCallback+0xa0>
	            }
	        }
	        else  // If we're receiving actual frame data
	        {
	            if (rxIndex == expectedFrameLength || receivedByte == '\n')
 8000cf4:	4b10      	ldr	r3, [pc, #64]	@ (8000d38 <HAL_SPI_RxCpltCallback+0xb8>)
 8000cf6:	881a      	ldrh	r2, [r3, #0]
 8000cf8:	4b13      	ldr	r3, [pc, #76]	@ (8000d48 <HAL_SPI_RxCpltCallback+0xc8>)
 8000cfa:	881b      	ldrh	r3, [r3, #0]
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	d003      	beq.n	8000d08 <HAL_SPI_RxCpltCallback+0x88>
 8000d00:	4b0e      	ldr	r3, [pc, #56]	@ (8000d3c <HAL_SPI_RxCpltCallback+0xbc>)
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	2b0a      	cmp	r3, #10
 8000d06:	d10b      	bne.n	8000d20 <HAL_SPI_RxCpltCallback+0xa0>
	            {
	                dataReady++;
 8000d08:	4b10      	ldr	r3, [pc, #64]	@ (8000d4c <HAL_SPI_RxCpltCallback+0xcc>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	b2da      	uxtb	r2, r3
 8000d10:	4b0e      	ldr	r3, [pc, #56]	@ (8000d4c <HAL_SPI_RxCpltCallback+0xcc>)
 8000d12:	701a      	strb	r2, [r3, #0]
	                parsingFrameLength = 1;
 8000d14:	4b0b      	ldr	r3, [pc, #44]	@ (8000d44 <HAL_SPI_RxCpltCallback+0xc4>)
 8000d16:	2201      	movs	r2, #1
 8000d18:	701a      	strb	r2, [r3, #0]
	                rxIndex = 0;
 8000d1a:	4b07      	ldr	r3, [pc, #28]	@ (8000d38 <HAL_SPI_RxCpltCallback+0xb8>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	801a      	strh	r2, [r3, #0]
	            }
	        }

	        // Restart receiving the next byte
	        HAL_SPI_Receive_IT(hspi, &receivedByte, 1);
 8000d20:	4906      	ldr	r1, [pc, #24]	@ (8000d3c <HAL_SPI_RxCpltCallback+0xbc>)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	2201      	movs	r2, #1
 8000d26:	0018      	movs	r0, r3
 8000d28:	f002 f95c 	bl	8002fe4 <HAL_SPI_Receive_IT>
	    }
}
 8000d2c:	46c0      	nop			@ (mov r8, r8)
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	b002      	add	sp, #8
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	40013000 	.word	0x40013000
 8000d38:	20000a42 	.word	0x20000a42
 8000d3c:	20000a40 	.word	0x20000a40
 8000d40:	20000640 	.word	0x20000640
 8000d44:	200002fc 	.word	0x200002fc
 8000d48:	20000a46 	.word	0x20000a46
 8000d4c:	20000a48 	.word	0x20000a48

08000d50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d54:	b672      	cpsid	i
}
 8000d56:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d58:	46c0      	nop			@ (mov r8, r8)
 8000d5a:	e7fd      	b.n	8000d58 <Error_Handler+0x8>

08000d5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d62:	4b0f      	ldr	r3, [pc, #60]	@ (8000da0 <HAL_MspInit+0x44>)
 8000d64:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000d66:	4b0e      	ldr	r3, [pc, #56]	@ (8000da0 <HAL_MspInit+0x44>)
 8000d68:	2101      	movs	r1, #1
 8000d6a:	430a      	orrs	r2, r1
 8000d6c:	641a      	str	r2, [r3, #64]	@ 0x40
 8000d6e:	4b0c      	ldr	r3, [pc, #48]	@ (8000da0 <HAL_MspInit+0x44>)
 8000d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d72:	2201      	movs	r2, #1
 8000d74:	4013      	ands	r3, r2
 8000d76:	607b      	str	r3, [r7, #4]
 8000d78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d7a:	4b09      	ldr	r3, [pc, #36]	@ (8000da0 <HAL_MspInit+0x44>)
 8000d7c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000d7e:	4b08      	ldr	r3, [pc, #32]	@ (8000da0 <HAL_MspInit+0x44>)
 8000d80:	2180      	movs	r1, #128	@ 0x80
 8000d82:	0549      	lsls	r1, r1, #21
 8000d84:	430a      	orrs	r2, r1
 8000d86:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000d88:	4b05      	ldr	r3, [pc, #20]	@ (8000da0 <HAL_MspInit+0x44>)
 8000d8a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000d8c:	2380      	movs	r3, #128	@ 0x80
 8000d8e:	055b      	lsls	r3, r3, #21
 8000d90:	4013      	ands	r3, r2
 8000d92:	603b      	str	r3, [r7, #0]
 8000d94:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d96:	46c0      	nop			@ (mov r8, r8)
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	b002      	add	sp, #8
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	46c0      	nop			@ (mov r8, r8)
 8000da0:	40021000 	.word	0x40021000

08000da4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000da4:	b590      	push	{r4, r7, lr}
 8000da6:	b093      	sub	sp, #76	@ 0x4c
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dac:	2334      	movs	r3, #52	@ 0x34
 8000dae:	18fb      	adds	r3, r7, r3
 8000db0:	0018      	movs	r0, r3
 8000db2:	2314      	movs	r3, #20
 8000db4:	001a      	movs	r2, r3
 8000db6:	2100      	movs	r1, #0
 8000db8:	f003 fd0a 	bl	80047d0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dbc:	241c      	movs	r4, #28
 8000dbe:	193b      	adds	r3, r7, r4
 8000dc0:	0018      	movs	r0, r3
 8000dc2:	2318      	movs	r3, #24
 8000dc4:	001a      	movs	r2, r3
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	f003 fd02 	bl	80047d0 <memset>
  if(hi2c->Instance==I2C1)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a3e      	ldr	r2, [pc, #248]	@ (8000ecc <HAL_I2C_MspInit+0x128>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d13f      	bne.n	8000e56 <HAL_I2C_MspInit+0xb2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000dd6:	193b      	adds	r3, r7, r4
 8000dd8:	2220      	movs	r2, #32
 8000dda:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000ddc:	193b      	adds	r3, r7, r4
 8000dde:	2200      	movs	r2, #0
 8000de0:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000de2:	193b      	adds	r3, r7, r4
 8000de4:	0018      	movs	r0, r3
 8000de6:	f001 ff1f 	bl	8002c28 <HAL_RCCEx_PeriphCLKConfig>
 8000dea:	1e03      	subs	r3, r0, #0
 8000dec:	d001      	beq.n	8000df2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000dee:	f7ff ffaf 	bl	8000d50 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000df2:	4b37      	ldr	r3, [pc, #220]	@ (8000ed0 <HAL_I2C_MspInit+0x12c>)
 8000df4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000df6:	4b36      	ldr	r3, [pc, #216]	@ (8000ed0 <HAL_I2C_MspInit+0x12c>)
 8000df8:	2102      	movs	r1, #2
 8000dfa:	430a      	orrs	r2, r1
 8000dfc:	635a      	str	r2, [r3, #52]	@ 0x34
 8000dfe:	4b34      	ldr	r3, [pc, #208]	@ (8000ed0 <HAL_I2C_MspInit+0x12c>)
 8000e00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e02:	2202      	movs	r2, #2
 8000e04:	4013      	ands	r3, r2
 8000e06:	61bb      	str	r3, [r7, #24]
 8000e08:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e0a:	2134      	movs	r1, #52	@ 0x34
 8000e0c:	187b      	adds	r3, r7, r1
 8000e0e:	22c0      	movs	r2, #192	@ 0xc0
 8000e10:	0092      	lsls	r2, r2, #2
 8000e12:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e14:	187b      	adds	r3, r7, r1
 8000e16:	2212      	movs	r2, #18
 8000e18:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1a:	187b      	adds	r3, r7, r1
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e20:	187b      	adds	r3, r7, r1
 8000e22:	2200      	movs	r2, #0
 8000e24:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8000e26:	187b      	adds	r3, r7, r1
 8000e28:	2206      	movs	r2, #6
 8000e2a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e2c:	187b      	adds	r3, r7, r1
 8000e2e:	4a29      	ldr	r2, [pc, #164]	@ (8000ed4 <HAL_I2C_MspInit+0x130>)
 8000e30:	0019      	movs	r1, r3
 8000e32:	0010      	movs	r0, r2
 8000e34:	f000 fbd2 	bl	80015dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e38:	4b25      	ldr	r3, [pc, #148]	@ (8000ed0 <HAL_I2C_MspInit+0x12c>)
 8000e3a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000e3c:	4b24      	ldr	r3, [pc, #144]	@ (8000ed0 <HAL_I2C_MspInit+0x12c>)
 8000e3e:	2180      	movs	r1, #128	@ 0x80
 8000e40:	0389      	lsls	r1, r1, #14
 8000e42:	430a      	orrs	r2, r1
 8000e44:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000e46:	4b22      	ldr	r3, [pc, #136]	@ (8000ed0 <HAL_I2C_MspInit+0x12c>)
 8000e48:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000e4a:	2380      	movs	r3, #128	@ 0x80
 8000e4c:	039b      	lsls	r3, r3, #14
 8000e4e:	4013      	ands	r3, r2
 8000e50:	617b      	str	r3, [r7, #20]
 8000e52:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000e54:	e036      	b.n	8000ec4 <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C2)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4a1f      	ldr	r2, [pc, #124]	@ (8000ed8 <HAL_I2C_MspInit+0x134>)
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	d131      	bne.n	8000ec4 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e60:	4b1b      	ldr	r3, [pc, #108]	@ (8000ed0 <HAL_I2C_MspInit+0x12c>)
 8000e62:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000e64:	4b1a      	ldr	r3, [pc, #104]	@ (8000ed0 <HAL_I2C_MspInit+0x12c>)
 8000e66:	2101      	movs	r1, #1
 8000e68:	430a      	orrs	r2, r1
 8000e6a:	635a      	str	r2, [r3, #52]	@ 0x34
 8000e6c:	4b18      	ldr	r3, [pc, #96]	@ (8000ed0 <HAL_I2C_MspInit+0x12c>)
 8000e6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e70:	2201      	movs	r2, #1
 8000e72:	4013      	ands	r3, r2
 8000e74:	613b      	str	r3, [r7, #16]
 8000e76:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000e78:	2134      	movs	r1, #52	@ 0x34
 8000e7a:	187b      	adds	r3, r7, r1
 8000e7c:	22c0      	movs	r2, #192	@ 0xc0
 8000e7e:	0152      	lsls	r2, r2, #5
 8000e80:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e82:	187b      	adds	r3, r7, r1
 8000e84:	2212      	movs	r2, #18
 8000e86:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e88:	187b      	adds	r3, r7, r1
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8e:	187b      	adds	r3, r7, r1
 8000e90:	2200      	movs	r2, #0
 8000e92:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8000e94:	187b      	adds	r3, r7, r1
 8000e96:	2206      	movs	r2, #6
 8000e98:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e9a:	187a      	adds	r2, r7, r1
 8000e9c:	23a0      	movs	r3, #160	@ 0xa0
 8000e9e:	05db      	lsls	r3, r3, #23
 8000ea0:	0011      	movs	r1, r2
 8000ea2:	0018      	movs	r0, r3
 8000ea4:	f000 fb9a 	bl	80015dc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000ea8:	4b09      	ldr	r3, [pc, #36]	@ (8000ed0 <HAL_I2C_MspInit+0x12c>)
 8000eaa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000eac:	4b08      	ldr	r3, [pc, #32]	@ (8000ed0 <HAL_I2C_MspInit+0x12c>)
 8000eae:	2180      	movs	r1, #128	@ 0x80
 8000eb0:	03c9      	lsls	r1, r1, #15
 8000eb2:	430a      	orrs	r2, r1
 8000eb4:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000eb6:	4b06      	ldr	r3, [pc, #24]	@ (8000ed0 <HAL_I2C_MspInit+0x12c>)
 8000eb8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000eba:	2380      	movs	r3, #128	@ 0x80
 8000ebc:	03db      	lsls	r3, r3, #15
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	60fb      	str	r3, [r7, #12]
 8000ec2:	68fb      	ldr	r3, [r7, #12]
}
 8000ec4:	46c0      	nop			@ (mov r8, r8)
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	b013      	add	sp, #76	@ 0x4c
 8000eca:	bd90      	pop	{r4, r7, pc}
 8000ecc:	40005400 	.word	0x40005400
 8000ed0:	40021000 	.word	0x40021000
 8000ed4:	50000400 	.word	0x50000400
 8000ed8:	40005800 	.word	0x40005800

08000edc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000edc:	b590      	push	{r4, r7, lr}
 8000ede:	b08b      	sub	sp, #44	@ 0x2c
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee4:	2414      	movs	r4, #20
 8000ee6:	193b      	adds	r3, r7, r4
 8000ee8:	0018      	movs	r0, r3
 8000eea:	2314      	movs	r3, #20
 8000eec:	001a      	movs	r2, r3
 8000eee:	2100      	movs	r1, #0
 8000ef0:	f003 fc6e 	bl	80047d0 <memset>
  if(hspi->Instance==SPI1)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a1f      	ldr	r2, [pc, #124]	@ (8000f78 <HAL_SPI_MspInit+0x9c>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d138      	bne.n	8000f70 <HAL_SPI_MspInit+0x94>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000efe:	4b1f      	ldr	r3, [pc, #124]	@ (8000f7c <HAL_SPI_MspInit+0xa0>)
 8000f00:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f02:	4b1e      	ldr	r3, [pc, #120]	@ (8000f7c <HAL_SPI_MspInit+0xa0>)
 8000f04:	2180      	movs	r1, #128	@ 0x80
 8000f06:	0149      	lsls	r1, r1, #5
 8000f08:	430a      	orrs	r2, r1
 8000f0a:	641a      	str	r2, [r3, #64]	@ 0x40
 8000f0c:	4b1b      	ldr	r3, [pc, #108]	@ (8000f7c <HAL_SPI_MspInit+0xa0>)
 8000f0e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f10:	2380      	movs	r3, #128	@ 0x80
 8000f12:	015b      	lsls	r3, r3, #5
 8000f14:	4013      	ands	r3, r2
 8000f16:	613b      	str	r3, [r7, #16]
 8000f18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f1a:	4b18      	ldr	r3, [pc, #96]	@ (8000f7c <HAL_SPI_MspInit+0xa0>)
 8000f1c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000f1e:	4b17      	ldr	r3, [pc, #92]	@ (8000f7c <HAL_SPI_MspInit+0xa0>)
 8000f20:	2101      	movs	r1, #1
 8000f22:	430a      	orrs	r2, r1
 8000f24:	635a      	str	r2, [r3, #52]	@ 0x34
 8000f26:	4b15      	ldr	r3, [pc, #84]	@ (8000f7c <HAL_SPI_MspInit+0xa0>)
 8000f28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	60fb      	str	r3, [r7, #12]
 8000f30:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> SPI1_SCK
    PA4     ------> SPI1_NSS
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7;
 8000f32:	0021      	movs	r1, r4
 8000f34:	187b      	adds	r3, r7, r1
 8000f36:	22d2      	movs	r2, #210	@ 0xd2
 8000f38:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3a:	187b      	adds	r3, r7, r1
 8000f3c:	2202      	movs	r2, #2
 8000f3e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f40:	187b      	adds	r3, r7, r1
 8000f42:	2200      	movs	r2, #0
 8000f44:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f46:	187b      	adds	r3, r7, r1
 8000f48:	2200      	movs	r2, #0
 8000f4a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000f4c:	187b      	adds	r3, r7, r1
 8000f4e:	2200      	movs	r2, #0
 8000f50:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f52:	187a      	adds	r2, r7, r1
 8000f54:	23a0      	movs	r3, #160	@ 0xa0
 8000f56:	05db      	lsls	r3, r3, #23
 8000f58:	0011      	movs	r1, r2
 8000f5a:	0018      	movs	r0, r3
 8000f5c:	f000 fb3e 	bl	80015dc <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000f60:	2200      	movs	r2, #0
 8000f62:	2100      	movs	r1, #0
 8000f64:	2019      	movs	r0, #25
 8000f66:	f000 fa9d 	bl	80014a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000f6a:	2019      	movs	r0, #25
 8000f6c:	f000 faaf 	bl	80014ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000f70:	46c0      	nop			@ (mov r8, r8)
 8000f72:	46bd      	mov	sp, r7
 8000f74:	b00b      	add	sp, #44	@ 0x2c
 8000f76:	bd90      	pop	{r4, r7, pc}
 8000f78:	40013000 	.word	0x40013000
 8000f7c:	40021000 	.word	0x40021000

08000f80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f80:	b590      	push	{r4, r7, lr}
 8000f82:	b08b      	sub	sp, #44	@ 0x2c
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f88:	2414      	movs	r4, #20
 8000f8a:	193b      	adds	r3, r7, r4
 8000f8c:	0018      	movs	r0, r3
 8000f8e:	2314      	movs	r3, #20
 8000f90:	001a      	movs	r2, r3
 8000f92:	2100      	movs	r1, #0
 8000f94:	f003 fc1c 	bl	80047d0 <memset>
  if(huart->Instance==USART2)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a1b      	ldr	r2, [pc, #108]	@ (800100c <HAL_UART_MspInit+0x8c>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d130      	bne.n	8001004 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fa2:	4b1b      	ldr	r3, [pc, #108]	@ (8001010 <HAL_UART_MspInit+0x90>)
 8000fa4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000fa6:	4b1a      	ldr	r3, [pc, #104]	@ (8001010 <HAL_UART_MspInit+0x90>)
 8000fa8:	2180      	movs	r1, #128	@ 0x80
 8000faa:	0289      	lsls	r1, r1, #10
 8000fac:	430a      	orrs	r2, r1
 8000fae:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000fb0:	4b17      	ldr	r3, [pc, #92]	@ (8001010 <HAL_UART_MspInit+0x90>)
 8000fb2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000fb4:	2380      	movs	r3, #128	@ 0x80
 8000fb6:	029b      	lsls	r3, r3, #10
 8000fb8:	4013      	ands	r3, r2
 8000fba:	613b      	str	r3, [r7, #16]
 8000fbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fbe:	4b14      	ldr	r3, [pc, #80]	@ (8001010 <HAL_UART_MspInit+0x90>)
 8000fc0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000fc2:	4b13      	ldr	r3, [pc, #76]	@ (8001010 <HAL_UART_MspInit+0x90>)
 8000fc4:	2101      	movs	r1, #1
 8000fc6:	430a      	orrs	r2, r1
 8000fc8:	635a      	str	r2, [r3, #52]	@ 0x34
 8000fca:	4b11      	ldr	r3, [pc, #68]	@ (8001010 <HAL_UART_MspInit+0x90>)
 8000fcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000fce:	2201      	movs	r2, #1
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	60fb      	str	r3, [r7, #12]
 8000fd4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000fd6:	0021      	movs	r1, r4
 8000fd8:	187b      	adds	r3, r7, r1
 8000fda:	220c      	movs	r2, #12
 8000fdc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fde:	187b      	adds	r3, r7, r1
 8000fe0:	2202      	movs	r2, #2
 8000fe2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe4:	187b      	adds	r3, r7, r1
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fea:	187b      	adds	r3, r7, r1
 8000fec:	2200      	movs	r2, #0
 8000fee:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000ff0:	187b      	adds	r3, r7, r1
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff6:	187a      	adds	r2, r7, r1
 8000ff8:	23a0      	movs	r3, #160	@ 0xa0
 8000ffa:	05db      	lsls	r3, r3, #23
 8000ffc:	0011      	movs	r1, r2
 8000ffe:	0018      	movs	r0, r3
 8001000:	f000 faec 	bl	80015dc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001004:	46c0      	nop			@ (mov r8, r8)
 8001006:	46bd      	mov	sp, r7
 8001008:	b00b      	add	sp, #44	@ 0x2c
 800100a:	bd90      	pop	{r4, r7, pc}
 800100c:	40004400 	.word	0x40004400
 8001010:	40021000 	.word	0x40021000

08001014 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001018:	46c0      	nop			@ (mov r8, r8)
 800101a:	e7fd      	b.n	8001018 <NMI_Handler+0x4>

0800101c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001020:	46c0      	nop			@ (mov r8, r8)
 8001022:	e7fd      	b.n	8001020 <HardFault_Handler+0x4>

08001024 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001028:	46c0      	nop			@ (mov r8, r8)
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}

0800102e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800102e:	b580      	push	{r7, lr}
 8001030:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001032:	46c0      	nop			@ (mov r8, r8)
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}

08001038 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800103c:	f000 f946 	bl	80012cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001040:	46c0      	nop			@ (mov r8, r8)
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
	...

08001048 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800104c:	4b03      	ldr	r3, [pc, #12]	@ (800105c <SPI1_IRQHandler+0x14>)
 800104e:	0018      	movs	r0, r3
 8001050:	f002 f952 	bl	80032f8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001054:	46c0      	nop			@ (mov r8, r8)
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	46c0      	nop			@ (mov r8, r8)
 800105c:	20000430 	.word	0x20000430

08001060 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b086      	sub	sp, #24
 8001064:	af00      	add	r7, sp, #0
 8001066:	60f8      	str	r0, [r7, #12]
 8001068:	60b9      	str	r1, [r7, #8]
 800106a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800106c:	2300      	movs	r3, #0
 800106e:	617b      	str	r3, [r7, #20]
 8001070:	e00a      	b.n	8001088 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001072:	e000      	b.n	8001076 <_read+0x16>
 8001074:	bf00      	nop
 8001076:	0001      	movs	r1, r0
 8001078:	68bb      	ldr	r3, [r7, #8]
 800107a:	1c5a      	adds	r2, r3, #1
 800107c:	60ba      	str	r2, [r7, #8]
 800107e:	b2ca      	uxtb	r2, r1
 8001080:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	3301      	adds	r3, #1
 8001086:	617b      	str	r3, [r7, #20]
 8001088:	697a      	ldr	r2, [r7, #20]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	429a      	cmp	r2, r3
 800108e:	dbf0      	blt.n	8001072 <_read+0x12>
  }

  return len;
 8001090:	687b      	ldr	r3, [r7, #4]
}
 8001092:	0018      	movs	r0, r3
 8001094:	46bd      	mov	sp, r7
 8001096:	b006      	add	sp, #24
 8001098:	bd80      	pop	{r7, pc}

0800109a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800109a:	b580      	push	{r7, lr}
 800109c:	b086      	sub	sp, #24
 800109e:	af00      	add	r7, sp, #0
 80010a0:	60f8      	str	r0, [r7, #12]
 80010a2:	60b9      	str	r1, [r7, #8]
 80010a4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010a6:	2300      	movs	r3, #0
 80010a8:	617b      	str	r3, [r7, #20]
 80010aa:	e009      	b.n	80010c0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	1c5a      	adds	r2, r3, #1
 80010b0:	60ba      	str	r2, [r7, #8]
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	0018      	movs	r0, r3
 80010b6:	e000      	b.n	80010ba <_write+0x20>
 80010b8:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	3301      	adds	r3, #1
 80010be:	617b      	str	r3, [r7, #20]
 80010c0:	697a      	ldr	r2, [r7, #20]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	429a      	cmp	r2, r3
 80010c6:	dbf1      	blt.n	80010ac <_write+0x12>
  }
  return len;
 80010c8:	687b      	ldr	r3, [r7, #4]
}
 80010ca:	0018      	movs	r0, r3
 80010cc:	46bd      	mov	sp, r7
 80010ce:	b006      	add	sp, #24
 80010d0:	bd80      	pop	{r7, pc}

080010d2 <_close>:

int _close(int file)
{
 80010d2:	b580      	push	{r7, lr}
 80010d4:	b082      	sub	sp, #8
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80010da:	2301      	movs	r3, #1
 80010dc:	425b      	negs	r3, r3
}
 80010de:	0018      	movs	r0, r3
 80010e0:	46bd      	mov	sp, r7
 80010e2:	b002      	add	sp, #8
 80010e4:	bd80      	pop	{r7, pc}

080010e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010e6:	b580      	push	{r7, lr}
 80010e8:	b082      	sub	sp, #8
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	6078      	str	r0, [r7, #4]
 80010ee:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	2280      	movs	r2, #128	@ 0x80
 80010f4:	0192      	lsls	r2, r2, #6
 80010f6:	605a      	str	r2, [r3, #4]
  return 0;
 80010f8:	2300      	movs	r3, #0
}
 80010fa:	0018      	movs	r0, r3
 80010fc:	46bd      	mov	sp, r7
 80010fe:	b002      	add	sp, #8
 8001100:	bd80      	pop	{r7, pc}

08001102 <_isatty>:

int _isatty(int file)
{
 8001102:	b580      	push	{r7, lr}
 8001104:	b082      	sub	sp, #8
 8001106:	af00      	add	r7, sp, #0
 8001108:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800110a:	2301      	movs	r3, #1
}
 800110c:	0018      	movs	r0, r3
 800110e:	46bd      	mov	sp, r7
 8001110:	b002      	add	sp, #8
 8001112:	bd80      	pop	{r7, pc}

08001114 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0
 800111a:	60f8      	str	r0, [r7, #12]
 800111c:	60b9      	str	r1, [r7, #8]
 800111e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001120:	2300      	movs	r3, #0
}
 8001122:	0018      	movs	r0, r3
 8001124:	46bd      	mov	sp, r7
 8001126:	b004      	add	sp, #16
 8001128:	bd80      	pop	{r7, pc}
	...

0800112c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b086      	sub	sp, #24
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001134:	4a14      	ldr	r2, [pc, #80]	@ (8001188 <_sbrk+0x5c>)
 8001136:	4b15      	ldr	r3, [pc, #84]	@ (800118c <_sbrk+0x60>)
 8001138:	1ad3      	subs	r3, r2, r3
 800113a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001140:	4b13      	ldr	r3, [pc, #76]	@ (8001190 <_sbrk+0x64>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d102      	bne.n	800114e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001148:	4b11      	ldr	r3, [pc, #68]	@ (8001190 <_sbrk+0x64>)
 800114a:	4a12      	ldr	r2, [pc, #72]	@ (8001194 <_sbrk+0x68>)
 800114c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800114e:	4b10      	ldr	r3, [pc, #64]	@ (8001190 <_sbrk+0x64>)
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	18d3      	adds	r3, r2, r3
 8001156:	693a      	ldr	r2, [r7, #16]
 8001158:	429a      	cmp	r2, r3
 800115a:	d207      	bcs.n	800116c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800115c:	f003 fb8e 	bl	800487c <__errno>
 8001160:	0003      	movs	r3, r0
 8001162:	220c      	movs	r2, #12
 8001164:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001166:	2301      	movs	r3, #1
 8001168:	425b      	negs	r3, r3
 800116a:	e009      	b.n	8001180 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800116c:	4b08      	ldr	r3, [pc, #32]	@ (8001190 <_sbrk+0x64>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001172:	4b07      	ldr	r3, [pc, #28]	@ (8001190 <_sbrk+0x64>)
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	18d2      	adds	r2, r2, r3
 800117a:	4b05      	ldr	r3, [pc, #20]	@ (8001190 <_sbrk+0x64>)
 800117c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800117e:	68fb      	ldr	r3, [r7, #12]
}
 8001180:	0018      	movs	r0, r3
 8001182:	46bd      	mov	sp, r7
 8001184:	b006      	add	sp, #24
 8001186:	bd80      	pop	{r7, pc}
 8001188:	20002000 	.word	0x20002000
 800118c:	00000400 	.word	0x00000400
 8001190:	20000a4c 	.word	0x20000a4c
 8001194:	20000ba0 	.word	0x20000ba0

08001198 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800119c:	46c0      	nop			@ (mov r8, r8)
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
	...

080011a4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80011a4:	480d      	ldr	r0, [pc, #52]	@ (80011dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80011a6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80011a8:	f7ff fff6 	bl	8001198 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011ac:	480c      	ldr	r0, [pc, #48]	@ (80011e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80011ae:	490d      	ldr	r1, [pc, #52]	@ (80011e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80011b0:	4a0d      	ldr	r2, [pc, #52]	@ (80011e8 <LoopForever+0xe>)
  movs r3, #0
 80011b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011b4:	e002      	b.n	80011bc <LoopCopyDataInit>

080011b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011ba:	3304      	adds	r3, #4

080011bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011c0:	d3f9      	bcc.n	80011b6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011c2:	4a0a      	ldr	r2, [pc, #40]	@ (80011ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80011c4:	4c0a      	ldr	r4, [pc, #40]	@ (80011f0 <LoopForever+0x16>)
  movs r3, #0
 80011c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011c8:	e001      	b.n	80011ce <LoopFillZerobss>

080011ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011cc:	3204      	adds	r2, #4

080011ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011d0:	d3fb      	bcc.n	80011ca <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80011d2:	f003 fb59 	bl	8004888 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80011d6:	f7ff fb91 	bl	80008fc <main>

080011da <LoopForever>:

LoopForever:
  b LoopForever
 80011da:	e7fe      	b.n	80011da <LoopForever>
  ldr   r0, =_estack
 80011dc:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80011e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011e4:	20000368 	.word	0x20000368
  ldr r2, =_sidata
 80011e8:	08005664 	.word	0x08005664
  ldr r2, =_sbss
 80011ec:	20000368 	.word	0x20000368
  ldr r4, =_ebss
 80011f0:	20000ba0 	.word	0x20000ba0

080011f4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011f4:	e7fe      	b.n	80011f4 <ADC1_IRQHandler>
	...

080011f8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011fe:	1dfb      	adds	r3, r7, #7
 8001200:	2200      	movs	r2, #0
 8001202:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001204:	4b0b      	ldr	r3, [pc, #44]	@ (8001234 <HAL_Init+0x3c>)
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	4b0a      	ldr	r3, [pc, #40]	@ (8001234 <HAL_Init+0x3c>)
 800120a:	2180      	movs	r1, #128	@ 0x80
 800120c:	0049      	lsls	r1, r1, #1
 800120e:	430a      	orrs	r2, r1
 8001210:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001212:	2003      	movs	r0, #3
 8001214:	f000 f810 	bl	8001238 <HAL_InitTick>
 8001218:	1e03      	subs	r3, r0, #0
 800121a:	d003      	beq.n	8001224 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800121c:	1dfb      	adds	r3, r7, #7
 800121e:	2201      	movs	r2, #1
 8001220:	701a      	strb	r2, [r3, #0]
 8001222:	e001      	b.n	8001228 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001224:	f7ff fd9a 	bl	8000d5c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001228:	1dfb      	adds	r3, r7, #7
 800122a:	781b      	ldrb	r3, [r3, #0]
}
 800122c:	0018      	movs	r0, r3
 800122e:	46bd      	mov	sp, r7
 8001230:	b002      	add	sp, #8
 8001232:	bd80      	pop	{r7, pc}
 8001234:	40022000 	.word	0x40022000

08001238 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001238:	b590      	push	{r4, r7, lr}
 800123a:	b085      	sub	sp, #20
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001240:	230f      	movs	r3, #15
 8001242:	18fb      	adds	r3, r7, r3
 8001244:	2200      	movs	r2, #0
 8001246:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001248:	4b1d      	ldr	r3, [pc, #116]	@ (80012c0 <HAL_InitTick+0x88>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d02b      	beq.n	80012a8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001250:	4b1c      	ldr	r3, [pc, #112]	@ (80012c4 <HAL_InitTick+0x8c>)
 8001252:	681c      	ldr	r4, [r3, #0]
 8001254:	4b1a      	ldr	r3, [pc, #104]	@ (80012c0 <HAL_InitTick+0x88>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	0019      	movs	r1, r3
 800125a:	23fa      	movs	r3, #250	@ 0xfa
 800125c:	0098      	lsls	r0, r3, #2
 800125e:	f7fe ff63 	bl	8000128 <__udivsi3>
 8001262:	0003      	movs	r3, r0
 8001264:	0019      	movs	r1, r3
 8001266:	0020      	movs	r0, r4
 8001268:	f7fe ff5e 	bl	8000128 <__udivsi3>
 800126c:	0003      	movs	r3, r0
 800126e:	0018      	movs	r0, r3
 8001270:	f000 f93d 	bl	80014ee <HAL_SYSTICK_Config>
 8001274:	1e03      	subs	r3, r0, #0
 8001276:	d112      	bne.n	800129e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2b03      	cmp	r3, #3
 800127c:	d80a      	bhi.n	8001294 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800127e:	6879      	ldr	r1, [r7, #4]
 8001280:	2301      	movs	r3, #1
 8001282:	425b      	negs	r3, r3
 8001284:	2200      	movs	r2, #0
 8001286:	0018      	movs	r0, r3
 8001288:	f000 f90c 	bl	80014a4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800128c:	4b0e      	ldr	r3, [pc, #56]	@ (80012c8 <HAL_InitTick+0x90>)
 800128e:	687a      	ldr	r2, [r7, #4]
 8001290:	601a      	str	r2, [r3, #0]
 8001292:	e00d      	b.n	80012b0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001294:	230f      	movs	r3, #15
 8001296:	18fb      	adds	r3, r7, r3
 8001298:	2201      	movs	r2, #1
 800129a:	701a      	strb	r2, [r3, #0]
 800129c:	e008      	b.n	80012b0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800129e:	230f      	movs	r3, #15
 80012a0:	18fb      	adds	r3, r7, r3
 80012a2:	2201      	movs	r2, #1
 80012a4:	701a      	strb	r2, [r3, #0]
 80012a6:	e003      	b.n	80012b0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80012a8:	230f      	movs	r3, #15
 80012aa:	18fb      	adds	r3, r7, r3
 80012ac:	2201      	movs	r2, #1
 80012ae:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80012b0:	230f      	movs	r3, #15
 80012b2:	18fb      	adds	r3, r7, r3
 80012b4:	781b      	ldrb	r3, [r3, #0]
}
 80012b6:	0018      	movs	r0, r3
 80012b8:	46bd      	mov	sp, r7
 80012ba:	b005      	add	sp, #20
 80012bc:	bd90      	pop	{r4, r7, pc}
 80012be:	46c0      	nop			@ (mov r8, r8)
 80012c0:	20000308 	.word	0x20000308
 80012c4:	20000300 	.word	0x20000300
 80012c8:	20000304 	.word	0x20000304

080012cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80012d0:	4b05      	ldr	r3, [pc, #20]	@ (80012e8 <HAL_IncTick+0x1c>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	001a      	movs	r2, r3
 80012d6:	4b05      	ldr	r3, [pc, #20]	@ (80012ec <HAL_IncTick+0x20>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	18d2      	adds	r2, r2, r3
 80012dc:	4b03      	ldr	r3, [pc, #12]	@ (80012ec <HAL_IncTick+0x20>)
 80012de:	601a      	str	r2, [r3, #0]
}
 80012e0:	46c0      	nop			@ (mov r8, r8)
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	46c0      	nop			@ (mov r8, r8)
 80012e8:	20000308 	.word	0x20000308
 80012ec:	20000a50 	.word	0x20000a50

080012f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  return uwTick;
 80012f4:	4b02      	ldr	r3, [pc, #8]	@ (8001300 <HAL_GetTick+0x10>)
 80012f6:	681b      	ldr	r3, [r3, #0]
}
 80012f8:	0018      	movs	r0, r3
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	46c0      	nop			@ (mov r8, r8)
 8001300:	20000a50 	.word	0x20000a50

08001304 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800130c:	f7ff fff0 	bl	80012f0 <HAL_GetTick>
 8001310:	0003      	movs	r3, r0
 8001312:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	3301      	adds	r3, #1
 800131c:	d005      	beq.n	800132a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800131e:	4b0a      	ldr	r3, [pc, #40]	@ (8001348 <HAL_Delay+0x44>)
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	001a      	movs	r2, r3
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	189b      	adds	r3, r3, r2
 8001328:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800132a:	46c0      	nop			@ (mov r8, r8)
 800132c:	f7ff ffe0 	bl	80012f0 <HAL_GetTick>
 8001330:	0002      	movs	r2, r0
 8001332:	68bb      	ldr	r3, [r7, #8]
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	68fa      	ldr	r2, [r7, #12]
 8001338:	429a      	cmp	r2, r3
 800133a:	d8f7      	bhi.n	800132c <HAL_Delay+0x28>
  {
  }
}
 800133c:	46c0      	nop			@ (mov r8, r8)
 800133e:	46c0      	nop			@ (mov r8, r8)
 8001340:	46bd      	mov	sp, r7
 8001342:	b004      	add	sp, #16
 8001344:	bd80      	pop	{r7, pc}
 8001346:	46c0      	nop			@ (mov r8, r8)
 8001348:	20000308 	.word	0x20000308

0800134c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	0002      	movs	r2, r0
 8001354:	1dfb      	adds	r3, r7, #7
 8001356:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001358:	1dfb      	adds	r3, r7, #7
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	2b7f      	cmp	r3, #127	@ 0x7f
 800135e:	d809      	bhi.n	8001374 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001360:	1dfb      	adds	r3, r7, #7
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	001a      	movs	r2, r3
 8001366:	231f      	movs	r3, #31
 8001368:	401a      	ands	r2, r3
 800136a:	4b04      	ldr	r3, [pc, #16]	@ (800137c <__NVIC_EnableIRQ+0x30>)
 800136c:	2101      	movs	r1, #1
 800136e:	4091      	lsls	r1, r2
 8001370:	000a      	movs	r2, r1
 8001372:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001374:	46c0      	nop			@ (mov r8, r8)
 8001376:	46bd      	mov	sp, r7
 8001378:	b002      	add	sp, #8
 800137a:	bd80      	pop	{r7, pc}
 800137c:	e000e100 	.word	0xe000e100

08001380 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001380:	b590      	push	{r4, r7, lr}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	0002      	movs	r2, r0
 8001388:	6039      	str	r1, [r7, #0]
 800138a:	1dfb      	adds	r3, r7, #7
 800138c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800138e:	1dfb      	adds	r3, r7, #7
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	2b7f      	cmp	r3, #127	@ 0x7f
 8001394:	d828      	bhi.n	80013e8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001396:	4a2f      	ldr	r2, [pc, #188]	@ (8001454 <__NVIC_SetPriority+0xd4>)
 8001398:	1dfb      	adds	r3, r7, #7
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	b25b      	sxtb	r3, r3
 800139e:	089b      	lsrs	r3, r3, #2
 80013a0:	33c0      	adds	r3, #192	@ 0xc0
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	589b      	ldr	r3, [r3, r2]
 80013a6:	1dfa      	adds	r2, r7, #7
 80013a8:	7812      	ldrb	r2, [r2, #0]
 80013aa:	0011      	movs	r1, r2
 80013ac:	2203      	movs	r2, #3
 80013ae:	400a      	ands	r2, r1
 80013b0:	00d2      	lsls	r2, r2, #3
 80013b2:	21ff      	movs	r1, #255	@ 0xff
 80013b4:	4091      	lsls	r1, r2
 80013b6:	000a      	movs	r2, r1
 80013b8:	43d2      	mvns	r2, r2
 80013ba:	401a      	ands	r2, r3
 80013bc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	019b      	lsls	r3, r3, #6
 80013c2:	22ff      	movs	r2, #255	@ 0xff
 80013c4:	401a      	ands	r2, r3
 80013c6:	1dfb      	adds	r3, r7, #7
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	0018      	movs	r0, r3
 80013cc:	2303      	movs	r3, #3
 80013ce:	4003      	ands	r3, r0
 80013d0:	00db      	lsls	r3, r3, #3
 80013d2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013d4:	481f      	ldr	r0, [pc, #124]	@ (8001454 <__NVIC_SetPriority+0xd4>)
 80013d6:	1dfb      	adds	r3, r7, #7
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	b25b      	sxtb	r3, r3
 80013dc:	089b      	lsrs	r3, r3, #2
 80013de:	430a      	orrs	r2, r1
 80013e0:	33c0      	adds	r3, #192	@ 0xc0
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80013e6:	e031      	b.n	800144c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013e8:	4a1b      	ldr	r2, [pc, #108]	@ (8001458 <__NVIC_SetPriority+0xd8>)
 80013ea:	1dfb      	adds	r3, r7, #7
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	0019      	movs	r1, r3
 80013f0:	230f      	movs	r3, #15
 80013f2:	400b      	ands	r3, r1
 80013f4:	3b08      	subs	r3, #8
 80013f6:	089b      	lsrs	r3, r3, #2
 80013f8:	3306      	adds	r3, #6
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	18d3      	adds	r3, r2, r3
 80013fe:	3304      	adds	r3, #4
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	1dfa      	adds	r2, r7, #7
 8001404:	7812      	ldrb	r2, [r2, #0]
 8001406:	0011      	movs	r1, r2
 8001408:	2203      	movs	r2, #3
 800140a:	400a      	ands	r2, r1
 800140c:	00d2      	lsls	r2, r2, #3
 800140e:	21ff      	movs	r1, #255	@ 0xff
 8001410:	4091      	lsls	r1, r2
 8001412:	000a      	movs	r2, r1
 8001414:	43d2      	mvns	r2, r2
 8001416:	401a      	ands	r2, r3
 8001418:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	019b      	lsls	r3, r3, #6
 800141e:	22ff      	movs	r2, #255	@ 0xff
 8001420:	401a      	ands	r2, r3
 8001422:	1dfb      	adds	r3, r7, #7
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	0018      	movs	r0, r3
 8001428:	2303      	movs	r3, #3
 800142a:	4003      	ands	r3, r0
 800142c:	00db      	lsls	r3, r3, #3
 800142e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001430:	4809      	ldr	r0, [pc, #36]	@ (8001458 <__NVIC_SetPriority+0xd8>)
 8001432:	1dfb      	adds	r3, r7, #7
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	001c      	movs	r4, r3
 8001438:	230f      	movs	r3, #15
 800143a:	4023      	ands	r3, r4
 800143c:	3b08      	subs	r3, #8
 800143e:	089b      	lsrs	r3, r3, #2
 8001440:	430a      	orrs	r2, r1
 8001442:	3306      	adds	r3, #6
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	18c3      	adds	r3, r0, r3
 8001448:	3304      	adds	r3, #4
 800144a:	601a      	str	r2, [r3, #0]
}
 800144c:	46c0      	nop			@ (mov r8, r8)
 800144e:	46bd      	mov	sp, r7
 8001450:	b003      	add	sp, #12
 8001452:	bd90      	pop	{r4, r7, pc}
 8001454:	e000e100 	.word	0xe000e100
 8001458:	e000ed00 	.word	0xe000ed00

0800145c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	1e5a      	subs	r2, r3, #1
 8001468:	2380      	movs	r3, #128	@ 0x80
 800146a:	045b      	lsls	r3, r3, #17
 800146c:	429a      	cmp	r2, r3
 800146e:	d301      	bcc.n	8001474 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001470:	2301      	movs	r3, #1
 8001472:	e010      	b.n	8001496 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001474:	4b0a      	ldr	r3, [pc, #40]	@ (80014a0 <SysTick_Config+0x44>)
 8001476:	687a      	ldr	r2, [r7, #4]
 8001478:	3a01      	subs	r2, #1
 800147a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800147c:	2301      	movs	r3, #1
 800147e:	425b      	negs	r3, r3
 8001480:	2103      	movs	r1, #3
 8001482:	0018      	movs	r0, r3
 8001484:	f7ff ff7c 	bl	8001380 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001488:	4b05      	ldr	r3, [pc, #20]	@ (80014a0 <SysTick_Config+0x44>)
 800148a:	2200      	movs	r2, #0
 800148c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800148e:	4b04      	ldr	r3, [pc, #16]	@ (80014a0 <SysTick_Config+0x44>)
 8001490:	2207      	movs	r2, #7
 8001492:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001494:	2300      	movs	r3, #0
}
 8001496:	0018      	movs	r0, r3
 8001498:	46bd      	mov	sp, r7
 800149a:	b002      	add	sp, #8
 800149c:	bd80      	pop	{r7, pc}
 800149e:	46c0      	nop			@ (mov r8, r8)
 80014a0:	e000e010 	.word	0xe000e010

080014a4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b084      	sub	sp, #16
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	60b9      	str	r1, [r7, #8]
 80014ac:	607a      	str	r2, [r7, #4]
 80014ae:	210f      	movs	r1, #15
 80014b0:	187b      	adds	r3, r7, r1
 80014b2:	1c02      	adds	r2, r0, #0
 80014b4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80014b6:	68ba      	ldr	r2, [r7, #8]
 80014b8:	187b      	adds	r3, r7, r1
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	b25b      	sxtb	r3, r3
 80014be:	0011      	movs	r1, r2
 80014c0:	0018      	movs	r0, r3
 80014c2:	f7ff ff5d 	bl	8001380 <__NVIC_SetPriority>
}
 80014c6:	46c0      	nop			@ (mov r8, r8)
 80014c8:	46bd      	mov	sp, r7
 80014ca:	b004      	add	sp, #16
 80014cc:	bd80      	pop	{r7, pc}

080014ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014ce:	b580      	push	{r7, lr}
 80014d0:	b082      	sub	sp, #8
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	0002      	movs	r2, r0
 80014d6:	1dfb      	adds	r3, r7, #7
 80014d8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014da:	1dfb      	adds	r3, r7, #7
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	b25b      	sxtb	r3, r3
 80014e0:	0018      	movs	r0, r3
 80014e2:	f7ff ff33 	bl	800134c <__NVIC_EnableIRQ>
}
 80014e6:	46c0      	nop			@ (mov r8, r8)
 80014e8:	46bd      	mov	sp, r7
 80014ea:	b002      	add	sp, #8
 80014ec:	bd80      	pop	{r7, pc}

080014ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014ee:	b580      	push	{r7, lr}
 80014f0:	b082      	sub	sp, #8
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	0018      	movs	r0, r3
 80014fa:	f7ff ffaf 	bl	800145c <SysTick_Config>
 80014fe:	0003      	movs	r3, r0
}
 8001500:	0018      	movs	r0, r3
 8001502:	46bd      	mov	sp, r7
 8001504:	b002      	add	sp, #8
 8001506:	bd80      	pop	{r7, pc}

08001508 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001510:	210f      	movs	r1, #15
 8001512:	187b      	adds	r3, r7, r1
 8001514:	2200      	movs	r2, #0
 8001516:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2225      	movs	r2, #37	@ 0x25
 800151c:	5c9b      	ldrb	r3, [r3, r2]
 800151e:	b2db      	uxtb	r3, r3
 8001520:	2b02      	cmp	r3, #2
 8001522:	d006      	beq.n	8001532 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2204      	movs	r2, #4
 8001528:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800152a:	187b      	adds	r3, r7, r1
 800152c:	2201      	movs	r2, #1
 800152e:	701a      	strb	r2, [r3, #0]
 8001530:	e049      	b.n	80015c6 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	210e      	movs	r1, #14
 800153e:	438a      	bics	r2, r1
 8001540:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	2101      	movs	r1, #1
 800154e:	438a      	bics	r2, r1
 8001550:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800155c:	491d      	ldr	r1, [pc, #116]	@ (80015d4 <HAL_DMA_Abort_IT+0xcc>)
 800155e:	400a      	ands	r2, r1
 8001560:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8001562:	4b1d      	ldr	r3, [pc, #116]	@ (80015d8 <HAL_DMA_Abort_IT+0xd0>)
 8001564:	6859      	ldr	r1, [r3, #4]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800156a:	221c      	movs	r2, #28
 800156c:	4013      	ands	r3, r2
 800156e:	2201      	movs	r2, #1
 8001570:	409a      	lsls	r2, r3
 8001572:	4b19      	ldr	r3, [pc, #100]	@ (80015d8 <HAL_DMA_Abort_IT+0xd0>)
 8001574:	430a      	orrs	r2, r1
 8001576:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800157c:	687a      	ldr	r2, [r7, #4]
 800157e:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001580:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001586:	2b00      	cmp	r3, #0
 8001588:	d00c      	beq.n	80015a4 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001594:	490f      	ldr	r1, [pc, #60]	@ (80015d4 <HAL_DMA_Abort_IT+0xcc>)
 8001596:	400a      	ands	r2, r1
 8001598:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800159e:	687a      	ldr	r2, [r7, #4]
 80015a0:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80015a2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2225      	movs	r2, #37	@ 0x25
 80015a8:	2101      	movs	r1, #1
 80015aa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2224      	movs	r2, #36	@ 0x24
 80015b0:	2100      	movs	r1, #0
 80015b2:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d004      	beq.n	80015c6 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015c0:	687a      	ldr	r2, [r7, #4]
 80015c2:	0010      	movs	r0, r2
 80015c4:	4798      	blx	r3
    }
  }
  return status;
 80015c6:	230f      	movs	r3, #15
 80015c8:	18fb      	adds	r3, r7, r3
 80015ca:	781b      	ldrb	r3, [r3, #0]
}
 80015cc:	0018      	movs	r0, r3
 80015ce:	46bd      	mov	sp, r7
 80015d0:	b004      	add	sp, #16
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	fffffeff 	.word	0xfffffeff
 80015d8:	40020000 	.word	0x40020000

080015dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b086      	sub	sp, #24
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015e6:	2300      	movs	r3, #0
 80015e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015ea:	e147      	b.n	800187c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	2101      	movs	r1, #1
 80015f2:	697a      	ldr	r2, [r7, #20]
 80015f4:	4091      	lsls	r1, r2
 80015f6:	000a      	movs	r2, r1
 80015f8:	4013      	ands	r3, r2
 80015fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d100      	bne.n	8001604 <HAL_GPIO_Init+0x28>
 8001602:	e138      	b.n	8001876 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	2203      	movs	r2, #3
 800160a:	4013      	ands	r3, r2
 800160c:	2b01      	cmp	r3, #1
 800160e:	d005      	beq.n	800161c <HAL_GPIO_Init+0x40>
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	2203      	movs	r2, #3
 8001616:	4013      	ands	r3, r2
 8001618:	2b02      	cmp	r3, #2
 800161a:	d130      	bne.n	800167e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	2203      	movs	r2, #3
 8001628:	409a      	lsls	r2, r3
 800162a:	0013      	movs	r3, r2
 800162c:	43da      	mvns	r2, r3
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	4013      	ands	r3, r2
 8001632:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	68da      	ldr	r2, [r3, #12]
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	005b      	lsls	r3, r3, #1
 800163c:	409a      	lsls	r2, r3
 800163e:	0013      	movs	r3, r2
 8001640:	693a      	ldr	r2, [r7, #16]
 8001642:	4313      	orrs	r3, r2
 8001644:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	693a      	ldr	r2, [r7, #16]
 800164a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001652:	2201      	movs	r2, #1
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	409a      	lsls	r2, r3
 8001658:	0013      	movs	r3, r2
 800165a:	43da      	mvns	r2, r3
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	4013      	ands	r3, r2
 8001660:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	091b      	lsrs	r3, r3, #4
 8001668:	2201      	movs	r2, #1
 800166a:	401a      	ands	r2, r3
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	409a      	lsls	r2, r3
 8001670:	0013      	movs	r3, r2
 8001672:	693a      	ldr	r2, [r7, #16]
 8001674:	4313      	orrs	r3, r2
 8001676:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	693a      	ldr	r2, [r7, #16]
 800167c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	2203      	movs	r2, #3
 8001684:	4013      	ands	r3, r2
 8001686:	2b03      	cmp	r3, #3
 8001688:	d017      	beq.n	80016ba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	68db      	ldr	r3, [r3, #12]
 800168e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	005b      	lsls	r3, r3, #1
 8001694:	2203      	movs	r2, #3
 8001696:	409a      	lsls	r2, r3
 8001698:	0013      	movs	r3, r2
 800169a:	43da      	mvns	r2, r3
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	4013      	ands	r3, r2
 80016a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	689a      	ldr	r2, [r3, #8]
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	005b      	lsls	r3, r3, #1
 80016aa:	409a      	lsls	r2, r3
 80016ac:	0013      	movs	r3, r2
 80016ae:	693a      	ldr	r2, [r7, #16]
 80016b0:	4313      	orrs	r3, r2
 80016b2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	693a      	ldr	r2, [r7, #16]
 80016b8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	2203      	movs	r2, #3
 80016c0:	4013      	ands	r3, r2
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	d123      	bne.n	800170e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	08da      	lsrs	r2, r3, #3
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	3208      	adds	r2, #8
 80016ce:	0092      	lsls	r2, r2, #2
 80016d0:	58d3      	ldr	r3, [r2, r3]
 80016d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	2207      	movs	r2, #7
 80016d8:	4013      	ands	r3, r2
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	220f      	movs	r2, #15
 80016de:	409a      	lsls	r2, r3
 80016e0:	0013      	movs	r3, r2
 80016e2:	43da      	mvns	r2, r3
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	4013      	ands	r3, r2
 80016e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	691a      	ldr	r2, [r3, #16]
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	2107      	movs	r1, #7
 80016f2:	400b      	ands	r3, r1
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	409a      	lsls	r2, r3
 80016f8:	0013      	movs	r3, r2
 80016fa:	693a      	ldr	r2, [r7, #16]
 80016fc:	4313      	orrs	r3, r2
 80016fe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	08da      	lsrs	r2, r3, #3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	3208      	adds	r2, #8
 8001708:	0092      	lsls	r2, r2, #2
 800170a:	6939      	ldr	r1, [r7, #16]
 800170c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	005b      	lsls	r3, r3, #1
 8001718:	2203      	movs	r2, #3
 800171a:	409a      	lsls	r2, r3
 800171c:	0013      	movs	r3, r2
 800171e:	43da      	mvns	r2, r3
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	4013      	ands	r3, r2
 8001724:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	2203      	movs	r2, #3
 800172c:	401a      	ands	r2, r3
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	005b      	lsls	r3, r3, #1
 8001732:	409a      	lsls	r2, r3
 8001734:	0013      	movs	r3, r2
 8001736:	693a      	ldr	r2, [r7, #16]
 8001738:	4313      	orrs	r3, r2
 800173a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	693a      	ldr	r2, [r7, #16]
 8001740:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	685a      	ldr	r2, [r3, #4]
 8001746:	23c0      	movs	r3, #192	@ 0xc0
 8001748:	029b      	lsls	r3, r3, #10
 800174a:	4013      	ands	r3, r2
 800174c:	d100      	bne.n	8001750 <HAL_GPIO_Init+0x174>
 800174e:	e092      	b.n	8001876 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001750:	4a50      	ldr	r2, [pc, #320]	@ (8001894 <HAL_GPIO_Init+0x2b8>)
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	089b      	lsrs	r3, r3, #2
 8001756:	3318      	adds	r3, #24
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	589b      	ldr	r3, [r3, r2]
 800175c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	2203      	movs	r2, #3
 8001762:	4013      	ands	r3, r2
 8001764:	00db      	lsls	r3, r3, #3
 8001766:	220f      	movs	r2, #15
 8001768:	409a      	lsls	r2, r3
 800176a:	0013      	movs	r3, r2
 800176c:	43da      	mvns	r2, r3
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	4013      	ands	r3, r2
 8001772:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001774:	687a      	ldr	r2, [r7, #4]
 8001776:	23a0      	movs	r3, #160	@ 0xa0
 8001778:	05db      	lsls	r3, r3, #23
 800177a:	429a      	cmp	r2, r3
 800177c:	d013      	beq.n	80017a6 <HAL_GPIO_Init+0x1ca>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4a45      	ldr	r2, [pc, #276]	@ (8001898 <HAL_GPIO_Init+0x2bc>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d00d      	beq.n	80017a2 <HAL_GPIO_Init+0x1c6>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4a44      	ldr	r2, [pc, #272]	@ (800189c <HAL_GPIO_Init+0x2c0>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d007      	beq.n	800179e <HAL_GPIO_Init+0x1c2>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4a43      	ldr	r2, [pc, #268]	@ (80018a0 <HAL_GPIO_Init+0x2c4>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d101      	bne.n	800179a <HAL_GPIO_Init+0x1be>
 8001796:	2303      	movs	r3, #3
 8001798:	e006      	b.n	80017a8 <HAL_GPIO_Init+0x1cc>
 800179a:	2305      	movs	r3, #5
 800179c:	e004      	b.n	80017a8 <HAL_GPIO_Init+0x1cc>
 800179e:	2302      	movs	r3, #2
 80017a0:	e002      	b.n	80017a8 <HAL_GPIO_Init+0x1cc>
 80017a2:	2301      	movs	r3, #1
 80017a4:	e000      	b.n	80017a8 <HAL_GPIO_Init+0x1cc>
 80017a6:	2300      	movs	r3, #0
 80017a8:	697a      	ldr	r2, [r7, #20]
 80017aa:	2103      	movs	r1, #3
 80017ac:	400a      	ands	r2, r1
 80017ae:	00d2      	lsls	r2, r2, #3
 80017b0:	4093      	lsls	r3, r2
 80017b2:	693a      	ldr	r2, [r7, #16]
 80017b4:	4313      	orrs	r3, r2
 80017b6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80017b8:	4936      	ldr	r1, [pc, #216]	@ (8001894 <HAL_GPIO_Init+0x2b8>)
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	089b      	lsrs	r3, r3, #2
 80017be:	3318      	adds	r3, #24
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	693a      	ldr	r2, [r7, #16]
 80017c4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80017c6:	4b33      	ldr	r3, [pc, #204]	@ (8001894 <HAL_GPIO_Init+0x2b8>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	43da      	mvns	r2, r3
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	4013      	ands	r3, r2
 80017d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	685a      	ldr	r2, [r3, #4]
 80017da:	2380      	movs	r3, #128	@ 0x80
 80017dc:	035b      	lsls	r3, r3, #13
 80017de:	4013      	ands	r3, r2
 80017e0:	d003      	beq.n	80017ea <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80017e2:	693a      	ldr	r2, [r7, #16]
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	4313      	orrs	r3, r2
 80017e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80017ea:	4b2a      	ldr	r3, [pc, #168]	@ (8001894 <HAL_GPIO_Init+0x2b8>)
 80017ec:	693a      	ldr	r2, [r7, #16]
 80017ee:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80017f0:	4b28      	ldr	r3, [pc, #160]	@ (8001894 <HAL_GPIO_Init+0x2b8>)
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	43da      	mvns	r2, r3
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	4013      	ands	r3, r2
 80017fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	685a      	ldr	r2, [r3, #4]
 8001804:	2380      	movs	r3, #128	@ 0x80
 8001806:	039b      	lsls	r3, r3, #14
 8001808:	4013      	ands	r3, r2
 800180a:	d003      	beq.n	8001814 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 800180c:	693a      	ldr	r2, [r7, #16]
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	4313      	orrs	r3, r2
 8001812:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001814:	4b1f      	ldr	r3, [pc, #124]	@ (8001894 <HAL_GPIO_Init+0x2b8>)
 8001816:	693a      	ldr	r2, [r7, #16]
 8001818:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800181a:	4a1e      	ldr	r2, [pc, #120]	@ (8001894 <HAL_GPIO_Init+0x2b8>)
 800181c:	2384      	movs	r3, #132	@ 0x84
 800181e:	58d3      	ldr	r3, [r2, r3]
 8001820:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	43da      	mvns	r2, r3
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	4013      	ands	r3, r2
 800182a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	685a      	ldr	r2, [r3, #4]
 8001830:	2380      	movs	r3, #128	@ 0x80
 8001832:	029b      	lsls	r3, r3, #10
 8001834:	4013      	ands	r3, r2
 8001836:	d003      	beq.n	8001840 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001838:	693a      	ldr	r2, [r7, #16]
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	4313      	orrs	r3, r2
 800183e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001840:	4914      	ldr	r1, [pc, #80]	@ (8001894 <HAL_GPIO_Init+0x2b8>)
 8001842:	2284      	movs	r2, #132	@ 0x84
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001848:	4a12      	ldr	r2, [pc, #72]	@ (8001894 <HAL_GPIO_Init+0x2b8>)
 800184a:	2380      	movs	r3, #128	@ 0x80
 800184c:	58d3      	ldr	r3, [r2, r3]
 800184e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	43da      	mvns	r2, r3
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	4013      	ands	r3, r2
 8001858:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	685a      	ldr	r2, [r3, #4]
 800185e:	2380      	movs	r3, #128	@ 0x80
 8001860:	025b      	lsls	r3, r3, #9
 8001862:	4013      	ands	r3, r2
 8001864:	d003      	beq.n	800186e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001866:	693a      	ldr	r2, [r7, #16]
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	4313      	orrs	r3, r2
 800186c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800186e:	4909      	ldr	r1, [pc, #36]	@ (8001894 <HAL_GPIO_Init+0x2b8>)
 8001870:	2280      	movs	r2, #128	@ 0x80
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	3301      	adds	r3, #1
 800187a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	40da      	lsrs	r2, r3
 8001884:	1e13      	subs	r3, r2, #0
 8001886:	d000      	beq.n	800188a <HAL_GPIO_Init+0x2ae>
 8001888:	e6b0      	b.n	80015ec <HAL_GPIO_Init+0x10>
  }
}
 800188a:	46c0      	nop			@ (mov r8, r8)
 800188c:	46c0      	nop			@ (mov r8, r8)
 800188e:	46bd      	mov	sp, r7
 8001890:	b006      	add	sp, #24
 8001892:	bd80      	pop	{r7, pc}
 8001894:	40021800 	.word	0x40021800
 8001898:	50000400 	.word	0x50000400
 800189c:	50000800 	.word	0x50000800
 80018a0:	50000c00 	.word	0x50000c00

080018a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	0008      	movs	r0, r1
 80018ae:	0011      	movs	r1, r2
 80018b0:	1cbb      	adds	r3, r7, #2
 80018b2:	1c02      	adds	r2, r0, #0
 80018b4:	801a      	strh	r2, [r3, #0]
 80018b6:	1c7b      	adds	r3, r7, #1
 80018b8:	1c0a      	adds	r2, r1, #0
 80018ba:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018bc:	1c7b      	adds	r3, r7, #1
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d004      	beq.n	80018ce <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80018c4:	1cbb      	adds	r3, r7, #2
 80018c6:	881a      	ldrh	r2, [r3, #0]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80018cc:	e003      	b.n	80018d6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80018ce:	1cbb      	adds	r3, r7, #2
 80018d0:	881a      	ldrh	r2, [r3, #0]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80018d6:	46c0      	nop			@ (mov r8, r8)
 80018d8:	46bd      	mov	sp, r7
 80018da:	b002      	add	sp, #8
 80018dc:	bd80      	pop	{r7, pc}
	...

080018e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d101      	bne.n	80018f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e08f      	b.n	8001a12 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2241      	movs	r2, #65	@ 0x41
 80018f6:	5c9b      	ldrb	r3, [r3, r2]
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d107      	bne.n	800190e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2240      	movs	r2, #64	@ 0x40
 8001902:	2100      	movs	r1, #0
 8001904:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	0018      	movs	r0, r3
 800190a:	f7ff fa4b 	bl	8000da4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2241      	movs	r2, #65	@ 0x41
 8001912:	2124      	movs	r1, #36	@ 0x24
 8001914:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	2101      	movs	r1, #1
 8001922:	438a      	bics	r2, r1
 8001924:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	685a      	ldr	r2, [r3, #4]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	493b      	ldr	r1, [pc, #236]	@ (8001a1c <HAL_I2C_Init+0x13c>)
 8001930:	400a      	ands	r2, r1
 8001932:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	689a      	ldr	r2, [r3, #8]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4938      	ldr	r1, [pc, #224]	@ (8001a20 <HAL_I2C_Init+0x140>)
 8001940:	400a      	ands	r2, r1
 8001942:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	2b01      	cmp	r3, #1
 800194a:	d108      	bne.n	800195e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	689a      	ldr	r2, [r3, #8]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	2180      	movs	r1, #128	@ 0x80
 8001956:	0209      	lsls	r1, r1, #8
 8001958:	430a      	orrs	r2, r1
 800195a:	609a      	str	r2, [r3, #8]
 800195c:	e007      	b.n	800196e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	689a      	ldr	r2, [r3, #8]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	2184      	movs	r1, #132	@ 0x84
 8001968:	0209      	lsls	r1, r1, #8
 800196a:	430a      	orrs	r2, r1
 800196c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	68db      	ldr	r3, [r3, #12]
 8001972:	2b02      	cmp	r3, #2
 8001974:	d109      	bne.n	800198a <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	685a      	ldr	r2, [r3, #4]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	2180      	movs	r1, #128	@ 0x80
 8001982:	0109      	lsls	r1, r1, #4
 8001984:	430a      	orrs	r2, r1
 8001986:	605a      	str	r2, [r3, #4]
 8001988:	e007      	b.n	800199a <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	685a      	ldr	r2, [r3, #4]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4923      	ldr	r1, [pc, #140]	@ (8001a24 <HAL_I2C_Init+0x144>)
 8001996:	400a      	ands	r2, r1
 8001998:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	685a      	ldr	r2, [r3, #4]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4920      	ldr	r1, [pc, #128]	@ (8001a28 <HAL_I2C_Init+0x148>)
 80019a6:	430a      	orrs	r2, r1
 80019a8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	68da      	ldr	r2, [r3, #12]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	491a      	ldr	r1, [pc, #104]	@ (8001a20 <HAL_I2C_Init+0x140>)
 80019b6:	400a      	ands	r2, r1
 80019b8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	691a      	ldr	r2, [r3, #16]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	695b      	ldr	r3, [r3, #20]
 80019c2:	431a      	orrs	r2, r3
 80019c4:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	699b      	ldr	r3, [r3, #24]
 80019ca:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	430a      	orrs	r2, r1
 80019d2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	69d9      	ldr	r1, [r3, #28]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6a1a      	ldr	r2, [r3, #32]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	430a      	orrs	r2, r1
 80019e2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	2101      	movs	r1, #1
 80019f0:	430a      	orrs	r2, r1
 80019f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2200      	movs	r2, #0
 80019f8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2241      	movs	r2, #65	@ 0x41
 80019fe:	2120      	movs	r1, #32
 8001a00:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2200      	movs	r2, #0
 8001a06:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2242      	movs	r2, #66	@ 0x42
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001a10:	2300      	movs	r3, #0
}
 8001a12:	0018      	movs	r0, r3
 8001a14:	46bd      	mov	sp, r7
 8001a16:	b002      	add	sp, #8
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	46c0      	nop			@ (mov r8, r8)
 8001a1c:	f0ffffff 	.word	0xf0ffffff
 8001a20:	ffff7fff 	.word	0xffff7fff
 8001a24:	fffff7ff 	.word	0xfffff7ff
 8001a28:	02008000 	.word	0x02008000

08001a2c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001a2c:	b590      	push	{r4, r7, lr}
 8001a2e:	b089      	sub	sp, #36	@ 0x24
 8001a30:	af02      	add	r7, sp, #8
 8001a32:	60f8      	str	r0, [r7, #12]
 8001a34:	0008      	movs	r0, r1
 8001a36:	607a      	str	r2, [r7, #4]
 8001a38:	0019      	movs	r1, r3
 8001a3a:	230a      	movs	r3, #10
 8001a3c:	18fb      	adds	r3, r7, r3
 8001a3e:	1c02      	adds	r2, r0, #0
 8001a40:	801a      	strh	r2, [r3, #0]
 8001a42:	2308      	movs	r3, #8
 8001a44:	18fb      	adds	r3, r7, r3
 8001a46:	1c0a      	adds	r2, r1, #0
 8001a48:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	2241      	movs	r2, #65	@ 0x41
 8001a4e:	5c9b      	ldrb	r3, [r3, r2]
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	2b20      	cmp	r3, #32
 8001a54:	d000      	beq.n	8001a58 <HAL_I2C_Master_Transmit+0x2c>
 8001a56:	e10a      	b.n	8001c6e <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	2240      	movs	r2, #64	@ 0x40
 8001a5c:	5c9b      	ldrb	r3, [r3, r2]
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d101      	bne.n	8001a66 <HAL_I2C_Master_Transmit+0x3a>
 8001a62:	2302      	movs	r3, #2
 8001a64:	e104      	b.n	8001c70 <HAL_I2C_Master_Transmit+0x244>
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	2240      	movs	r2, #64	@ 0x40
 8001a6a:	2101      	movs	r1, #1
 8001a6c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001a6e:	f7ff fc3f 	bl	80012f0 <HAL_GetTick>
 8001a72:	0003      	movs	r3, r0
 8001a74:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001a76:	2380      	movs	r3, #128	@ 0x80
 8001a78:	0219      	lsls	r1, r3, #8
 8001a7a:	68f8      	ldr	r0, [r7, #12]
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	9300      	str	r3, [sp, #0]
 8001a80:	2319      	movs	r3, #25
 8001a82:	2201      	movs	r2, #1
 8001a84:	f000 f91e 	bl	8001cc4 <I2C_WaitOnFlagUntilTimeout>
 8001a88:	1e03      	subs	r3, r0, #0
 8001a8a:	d001      	beq.n	8001a90 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e0ef      	b.n	8001c70 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	2241      	movs	r2, #65	@ 0x41
 8001a94:	2121      	movs	r1, #33	@ 0x21
 8001a96:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	2242      	movs	r2, #66	@ 0x42
 8001a9c:	2110      	movs	r1, #16
 8001a9e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	687a      	ldr	r2, [r7, #4]
 8001aaa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	2208      	movs	r2, #8
 8001ab0:	18ba      	adds	r2, r7, r2
 8001ab2:	8812      	ldrh	r2, [r2, #0]
 8001ab4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ac0:	b29b      	uxth	r3, r3
 8001ac2:	2bff      	cmp	r3, #255	@ 0xff
 8001ac4:	d906      	bls.n	8001ad4 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	22ff      	movs	r2, #255	@ 0xff
 8001aca:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8001acc:	2380      	movs	r3, #128	@ 0x80
 8001ace:	045b      	lsls	r3, r3, #17
 8001ad0:	617b      	str	r3, [r7, #20]
 8001ad2:	e007      	b.n	8001ae4 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ad8:	b29a      	uxth	r2, r3
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001ade:	2380      	movs	r3, #128	@ 0x80
 8001ae0:	049b      	lsls	r3, r3, #18
 8001ae2:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d027      	beq.n	8001b3c <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001af0:	781a      	ldrb	r2, [r3, #0]
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001afc:	1c5a      	adds	r2, r3, #1
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b06:	b29b      	uxth	r3, r3
 8001b08:	3b01      	subs	r3, #1
 8001b0a:	b29a      	uxth	r2, r3
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b14:	3b01      	subs	r3, #1
 8001b16:	b29a      	uxth	r2, r3
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	3301      	adds	r3, #1
 8001b24:	b2da      	uxtb	r2, r3
 8001b26:	697c      	ldr	r4, [r7, #20]
 8001b28:	230a      	movs	r3, #10
 8001b2a:	18fb      	adds	r3, r7, r3
 8001b2c:	8819      	ldrh	r1, [r3, #0]
 8001b2e:	68f8      	ldr	r0, [r7, #12]
 8001b30:	4b51      	ldr	r3, [pc, #324]	@ (8001c78 <HAL_I2C_Master_Transmit+0x24c>)
 8001b32:	9300      	str	r3, [sp, #0]
 8001b34:	0023      	movs	r3, r4
 8001b36:	f000 fa9f 	bl	8002078 <I2C_TransferConfig>
 8001b3a:	e06f      	b.n	8001c1c <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b40:	b2da      	uxtb	r2, r3
 8001b42:	697c      	ldr	r4, [r7, #20]
 8001b44:	230a      	movs	r3, #10
 8001b46:	18fb      	adds	r3, r7, r3
 8001b48:	8819      	ldrh	r1, [r3, #0]
 8001b4a:	68f8      	ldr	r0, [r7, #12]
 8001b4c:	4b4a      	ldr	r3, [pc, #296]	@ (8001c78 <HAL_I2C_Master_Transmit+0x24c>)
 8001b4e:	9300      	str	r3, [sp, #0]
 8001b50:	0023      	movs	r3, r4
 8001b52:	f000 fa91 	bl	8002078 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001b56:	e061      	b.n	8001c1c <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b58:	693a      	ldr	r2, [r7, #16]
 8001b5a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	0018      	movs	r0, r3
 8001b60:	f000 f908 	bl	8001d74 <I2C_WaitOnTXISFlagUntilTimeout>
 8001b64:	1e03      	subs	r3, r0, #0
 8001b66:	d001      	beq.n	8001b6c <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e081      	b.n	8001c70 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b70:	781a      	ldrb	r2, [r3, #0]
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b7c:	1c5a      	adds	r2, r3, #1
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b86:	b29b      	uxth	r3, r3
 8001b88:	3b01      	subs	r3, #1
 8001b8a:	b29a      	uxth	r2, r3
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b94:	3b01      	subs	r3, #1
 8001b96:	b29a      	uxth	r2, r3
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ba0:	b29b      	uxth	r3, r3
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d03a      	beq.n	8001c1c <HAL_I2C_Master_Transmit+0x1f0>
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d136      	bne.n	8001c1c <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001bae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001bb0:	68f8      	ldr	r0, [r7, #12]
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	9300      	str	r3, [sp, #0]
 8001bb6:	0013      	movs	r3, r2
 8001bb8:	2200      	movs	r2, #0
 8001bba:	2180      	movs	r1, #128	@ 0x80
 8001bbc:	f000 f882 	bl	8001cc4 <I2C_WaitOnFlagUntilTimeout>
 8001bc0:	1e03      	subs	r3, r0, #0
 8001bc2:	d001      	beq.n	8001bc8 <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e053      	b.n	8001c70 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bcc:	b29b      	uxth	r3, r3
 8001bce:	2bff      	cmp	r3, #255	@ 0xff
 8001bd0:	d911      	bls.n	8001bf6 <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	22ff      	movs	r2, #255	@ 0xff
 8001bd6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bdc:	b2da      	uxtb	r2, r3
 8001bde:	2380      	movs	r3, #128	@ 0x80
 8001be0:	045c      	lsls	r4, r3, #17
 8001be2:	230a      	movs	r3, #10
 8001be4:	18fb      	adds	r3, r7, r3
 8001be6:	8819      	ldrh	r1, [r3, #0]
 8001be8:	68f8      	ldr	r0, [r7, #12]
 8001bea:	2300      	movs	r3, #0
 8001bec:	9300      	str	r3, [sp, #0]
 8001bee:	0023      	movs	r3, r4
 8001bf0:	f000 fa42 	bl	8002078 <I2C_TransferConfig>
 8001bf4:	e012      	b.n	8001c1c <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bfa:	b29a      	uxth	r2, r3
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c04:	b2da      	uxtb	r2, r3
 8001c06:	2380      	movs	r3, #128	@ 0x80
 8001c08:	049c      	lsls	r4, r3, #18
 8001c0a:	230a      	movs	r3, #10
 8001c0c:	18fb      	adds	r3, r7, r3
 8001c0e:	8819      	ldrh	r1, [r3, #0]
 8001c10:	68f8      	ldr	r0, [r7, #12]
 8001c12:	2300      	movs	r3, #0
 8001c14:	9300      	str	r3, [sp, #0]
 8001c16:	0023      	movs	r3, r4
 8001c18:	f000 fa2e 	bl	8002078 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c20:	b29b      	uxth	r3, r3
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d198      	bne.n	8001b58 <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c26:	693a      	ldr	r2, [r7, #16]
 8001c28:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	0018      	movs	r0, r3
 8001c2e:	f000 f8e7 	bl	8001e00 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001c32:	1e03      	subs	r3, r0, #0
 8001c34:	d001      	beq.n	8001c3a <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e01a      	b.n	8001c70 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	2220      	movs	r2, #32
 8001c40:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	685a      	ldr	r2, [r3, #4]
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	490b      	ldr	r1, [pc, #44]	@ (8001c7c <HAL_I2C_Master_Transmit+0x250>)
 8001c4e:	400a      	ands	r2, r1
 8001c50:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	2241      	movs	r2, #65	@ 0x41
 8001c56:	2120      	movs	r1, #32
 8001c58:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	2242      	movs	r2, #66	@ 0x42
 8001c5e:	2100      	movs	r1, #0
 8001c60:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	2240      	movs	r2, #64	@ 0x40
 8001c66:	2100      	movs	r1, #0
 8001c68:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	e000      	b.n	8001c70 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 8001c6e:	2302      	movs	r3, #2
  }
}
 8001c70:	0018      	movs	r0, r3
 8001c72:	46bd      	mov	sp, r7
 8001c74:	b007      	add	sp, #28
 8001c76:	bd90      	pop	{r4, r7, pc}
 8001c78:	80002000 	.word	0x80002000
 8001c7c:	fe00e800 	.word	0xfe00e800

08001c80 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	699b      	ldr	r3, [r3, #24]
 8001c8e:	2202      	movs	r2, #2
 8001c90:	4013      	ands	r3, r2
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d103      	bne.n	8001c9e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	699b      	ldr	r3, [r3, #24]
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d007      	beq.n	8001cbc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	699a      	ldr	r2, [r3, #24]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	2101      	movs	r1, #1
 8001cb8:	430a      	orrs	r2, r1
 8001cba:	619a      	str	r2, [r3, #24]
  }
}
 8001cbc:	46c0      	nop			@ (mov r8, r8)
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	b002      	add	sp, #8
 8001cc2:	bd80      	pop	{r7, pc}

08001cc4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b084      	sub	sp, #16
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	60f8      	str	r0, [r7, #12]
 8001ccc:	60b9      	str	r1, [r7, #8]
 8001cce:	603b      	str	r3, [r7, #0]
 8001cd0:	1dfb      	adds	r3, r7, #7
 8001cd2:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001cd4:	e03a      	b.n	8001d4c <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001cd6:	69ba      	ldr	r2, [r7, #24]
 8001cd8:	6839      	ldr	r1, [r7, #0]
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	0018      	movs	r0, r3
 8001cde:	f000 f8d3 	bl	8001e88 <I2C_IsErrorOccurred>
 8001ce2:	1e03      	subs	r3, r0, #0
 8001ce4:	d001      	beq.n	8001cea <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e040      	b.n	8001d6c <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	3301      	adds	r3, #1
 8001cee:	d02d      	beq.n	8001d4c <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cf0:	f7ff fafe 	bl	80012f0 <HAL_GetTick>
 8001cf4:	0002      	movs	r2, r0
 8001cf6:	69bb      	ldr	r3, [r7, #24]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	683a      	ldr	r2, [r7, #0]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d302      	bcc.n	8001d06 <I2C_WaitOnFlagUntilTimeout+0x42>
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d122      	bne.n	8001d4c <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	699b      	ldr	r3, [r3, #24]
 8001d0c:	68ba      	ldr	r2, [r7, #8]
 8001d0e:	4013      	ands	r3, r2
 8001d10:	68ba      	ldr	r2, [r7, #8]
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	425a      	negs	r2, r3
 8001d16:	4153      	adcs	r3, r2
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	001a      	movs	r2, r3
 8001d1c:	1dfb      	adds	r3, r7, #7
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d113      	bne.n	8001d4c <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d28:	2220      	movs	r2, #32
 8001d2a:	431a      	orrs	r2, r3
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	2241      	movs	r2, #65	@ 0x41
 8001d34:	2120      	movs	r1, #32
 8001d36:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	2242      	movs	r2, #66	@ 0x42
 8001d3c:	2100      	movs	r1, #0
 8001d3e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	2240      	movs	r2, #64	@ 0x40
 8001d44:	2100      	movs	r1, #0
 8001d46:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e00f      	b.n	8001d6c <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	699b      	ldr	r3, [r3, #24]
 8001d52:	68ba      	ldr	r2, [r7, #8]
 8001d54:	4013      	ands	r3, r2
 8001d56:	68ba      	ldr	r2, [r7, #8]
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	425a      	negs	r2, r3
 8001d5c:	4153      	adcs	r3, r2
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	001a      	movs	r2, r3
 8001d62:	1dfb      	adds	r3, r7, #7
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d0b5      	beq.n	8001cd6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001d6a:	2300      	movs	r3, #0
}
 8001d6c:	0018      	movs	r0, r3
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	b004      	add	sp, #16
 8001d72:	bd80      	pop	{r7, pc}

08001d74 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	60f8      	str	r0, [r7, #12]
 8001d7c:	60b9      	str	r1, [r7, #8]
 8001d7e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001d80:	e032      	b.n	8001de8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	68b9      	ldr	r1, [r7, #8]
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	0018      	movs	r0, r3
 8001d8a:	f000 f87d 	bl	8001e88 <I2C_IsErrorOccurred>
 8001d8e:	1e03      	subs	r3, r0, #0
 8001d90:	d001      	beq.n	8001d96 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e030      	b.n	8001df8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	3301      	adds	r3, #1
 8001d9a:	d025      	beq.n	8001de8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d9c:	f7ff faa8 	bl	80012f0 <HAL_GetTick>
 8001da0:	0002      	movs	r2, r0
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	68ba      	ldr	r2, [r7, #8]
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d302      	bcc.n	8001db2 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d11a      	bne.n	8001de8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	699b      	ldr	r3, [r3, #24]
 8001db8:	2202      	movs	r2, #2
 8001dba:	4013      	ands	r3, r2
 8001dbc:	2b02      	cmp	r3, #2
 8001dbe:	d013      	beq.n	8001de8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dc4:	2220      	movs	r2, #32
 8001dc6:	431a      	orrs	r2, r3
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	2241      	movs	r2, #65	@ 0x41
 8001dd0:	2120      	movs	r1, #32
 8001dd2:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	2242      	movs	r2, #66	@ 0x42
 8001dd8:	2100      	movs	r1, #0
 8001dda:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	2240      	movs	r2, #64	@ 0x40
 8001de0:	2100      	movs	r1, #0
 8001de2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	e007      	b.n	8001df8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	699b      	ldr	r3, [r3, #24]
 8001dee:	2202      	movs	r2, #2
 8001df0:	4013      	ands	r3, r2
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d1c5      	bne.n	8001d82 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001df6:	2300      	movs	r3, #0
}
 8001df8:	0018      	movs	r0, r3
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	b004      	add	sp, #16
 8001dfe:	bd80      	pop	{r7, pc}

08001e00 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b084      	sub	sp, #16
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	60f8      	str	r0, [r7, #12]
 8001e08:	60b9      	str	r1, [r7, #8]
 8001e0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e0c:	e02f      	b.n	8001e6e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	68b9      	ldr	r1, [r7, #8]
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	0018      	movs	r0, r3
 8001e16:	f000 f837 	bl	8001e88 <I2C_IsErrorOccurred>
 8001e1a:	1e03      	subs	r3, r0, #0
 8001e1c:	d001      	beq.n	8001e22 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e02d      	b.n	8001e7e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e22:	f7ff fa65 	bl	80012f0 <HAL_GetTick>
 8001e26:	0002      	movs	r2, r0
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	68ba      	ldr	r2, [r7, #8]
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	d302      	bcc.n	8001e38 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d11a      	bne.n	8001e6e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	699b      	ldr	r3, [r3, #24]
 8001e3e:	2220      	movs	r2, #32
 8001e40:	4013      	ands	r3, r2
 8001e42:	2b20      	cmp	r3, #32
 8001e44:	d013      	beq.n	8001e6e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e4a:	2220      	movs	r2, #32
 8001e4c:	431a      	orrs	r2, r3
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	2241      	movs	r2, #65	@ 0x41
 8001e56:	2120      	movs	r1, #32
 8001e58:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	2242      	movs	r2, #66	@ 0x42
 8001e5e:	2100      	movs	r1, #0
 8001e60:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	2240      	movs	r2, #64	@ 0x40
 8001e66:	2100      	movs	r1, #0
 8001e68:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e007      	b.n	8001e7e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	699b      	ldr	r3, [r3, #24]
 8001e74:	2220      	movs	r2, #32
 8001e76:	4013      	ands	r3, r2
 8001e78:	2b20      	cmp	r3, #32
 8001e7a:	d1c8      	bne.n	8001e0e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001e7c:	2300      	movs	r3, #0
}
 8001e7e:	0018      	movs	r0, r3
 8001e80:	46bd      	mov	sp, r7
 8001e82:	b004      	add	sp, #16
 8001e84:	bd80      	pop	{r7, pc}
	...

08001e88 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b08a      	sub	sp, #40	@ 0x28
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	60f8      	str	r0, [r7, #12]
 8001e90:	60b9      	str	r1, [r7, #8]
 8001e92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e94:	2327      	movs	r3, #39	@ 0x27
 8001e96:	18fb      	adds	r3, r7, r3
 8001e98:	2200      	movs	r2, #0
 8001e9a:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	699b      	ldr	r3, [r3, #24]
 8001ea2:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001eac:	69bb      	ldr	r3, [r7, #24]
 8001eae:	2210      	movs	r2, #16
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	d100      	bne.n	8001eb6 <I2C_IsErrorOccurred+0x2e>
 8001eb4:	e079      	b.n	8001faa <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	2210      	movs	r2, #16
 8001ebc:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001ebe:	e057      	b.n	8001f70 <I2C_IsErrorOccurred+0xe8>
 8001ec0:	2227      	movs	r2, #39	@ 0x27
 8001ec2:	18bb      	adds	r3, r7, r2
 8001ec4:	18ba      	adds	r2, r7, r2
 8001ec6:	7812      	ldrb	r2, [r2, #0]
 8001ec8:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	3301      	adds	r3, #1
 8001ece:	d04f      	beq.n	8001f70 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001ed0:	f7ff fa0e 	bl	80012f0 <HAL_GetTick>
 8001ed4:	0002      	movs	r2, r0
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	68ba      	ldr	r2, [r7, #8]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d302      	bcc.n	8001ee6 <I2C_IsErrorOccurred+0x5e>
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d144      	bne.n	8001f70 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	685a      	ldr	r2, [r3, #4]
 8001eec:	2380      	movs	r3, #128	@ 0x80
 8001eee:	01db      	lsls	r3, r3, #7
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001ef4:	2013      	movs	r0, #19
 8001ef6:	183b      	adds	r3, r7, r0
 8001ef8:	68fa      	ldr	r2, [r7, #12]
 8001efa:	2142      	movs	r1, #66	@ 0x42
 8001efc:	5c52      	ldrb	r2, [r2, r1]
 8001efe:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	699a      	ldr	r2, [r3, #24]
 8001f06:	2380      	movs	r3, #128	@ 0x80
 8001f08:	021b      	lsls	r3, r3, #8
 8001f0a:	401a      	ands	r2, r3
 8001f0c:	2380      	movs	r3, #128	@ 0x80
 8001f0e:	021b      	lsls	r3, r3, #8
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d126      	bne.n	8001f62 <I2C_IsErrorOccurred+0xda>
 8001f14:	697a      	ldr	r2, [r7, #20]
 8001f16:	2380      	movs	r3, #128	@ 0x80
 8001f18:	01db      	lsls	r3, r3, #7
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d021      	beq.n	8001f62 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8001f1e:	183b      	adds	r3, r7, r0
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	2b20      	cmp	r3, #32
 8001f24:	d01d      	beq.n	8001f62 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	685a      	ldr	r2, [r3, #4]
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	2180      	movs	r1, #128	@ 0x80
 8001f32:	01c9      	lsls	r1, r1, #7
 8001f34:	430a      	orrs	r2, r1
 8001f36:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001f38:	f7ff f9da 	bl	80012f0 <HAL_GetTick>
 8001f3c:	0003      	movs	r3, r0
 8001f3e:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f40:	e00f      	b.n	8001f62 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001f42:	f7ff f9d5 	bl	80012f0 <HAL_GetTick>
 8001f46:	0002      	movs	r2, r0
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	2b19      	cmp	r3, #25
 8001f4e:	d908      	bls.n	8001f62 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001f50:	6a3b      	ldr	r3, [r7, #32]
 8001f52:	2220      	movs	r2, #32
 8001f54:	4313      	orrs	r3, r2
 8001f56:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001f58:	2327      	movs	r3, #39	@ 0x27
 8001f5a:	18fb      	adds	r3, r7, r3
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	701a      	strb	r2, [r3, #0]

              break;
 8001f60:	e006      	b.n	8001f70 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	699b      	ldr	r3, [r3, #24]
 8001f68:	2220      	movs	r2, #32
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	2b20      	cmp	r3, #32
 8001f6e:	d1e8      	bne.n	8001f42 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	699b      	ldr	r3, [r3, #24]
 8001f76:	2220      	movs	r2, #32
 8001f78:	4013      	ands	r3, r2
 8001f7a:	2b20      	cmp	r3, #32
 8001f7c:	d004      	beq.n	8001f88 <I2C_IsErrorOccurred+0x100>
 8001f7e:	2327      	movs	r3, #39	@ 0x27
 8001f80:	18fb      	adds	r3, r7, r3
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d09b      	beq.n	8001ec0 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001f88:	2327      	movs	r3, #39	@ 0x27
 8001f8a:	18fb      	adds	r3, r7, r3
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d103      	bne.n	8001f9a <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	2220      	movs	r2, #32
 8001f98:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001f9a:	6a3b      	ldr	r3, [r7, #32]
 8001f9c:	2204      	movs	r2, #4
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001fa2:	2327      	movs	r3, #39	@ 0x27
 8001fa4:	18fb      	adds	r3, r7, r3
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	699b      	ldr	r3, [r3, #24]
 8001fb0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001fb2:	69ba      	ldr	r2, [r7, #24]
 8001fb4:	2380      	movs	r3, #128	@ 0x80
 8001fb6:	005b      	lsls	r3, r3, #1
 8001fb8:	4013      	ands	r3, r2
 8001fba:	d00c      	beq.n	8001fd6 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001fbc:	6a3b      	ldr	r3, [r7, #32]
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	2280      	movs	r2, #128	@ 0x80
 8001fca:	0052      	lsls	r2, r2, #1
 8001fcc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001fce:	2327      	movs	r3, #39	@ 0x27
 8001fd0:	18fb      	adds	r3, r7, r3
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001fd6:	69ba      	ldr	r2, [r7, #24]
 8001fd8:	2380      	movs	r3, #128	@ 0x80
 8001fda:	00db      	lsls	r3, r3, #3
 8001fdc:	4013      	ands	r3, r2
 8001fde:	d00c      	beq.n	8001ffa <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001fe0:	6a3b      	ldr	r3, [r7, #32]
 8001fe2:	2208      	movs	r2, #8
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	2280      	movs	r2, #128	@ 0x80
 8001fee:	00d2      	lsls	r2, r2, #3
 8001ff0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001ff2:	2327      	movs	r3, #39	@ 0x27
 8001ff4:	18fb      	adds	r3, r7, r3
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001ffa:	69ba      	ldr	r2, [r7, #24]
 8001ffc:	2380      	movs	r3, #128	@ 0x80
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	4013      	ands	r3, r2
 8002002:	d00c      	beq.n	800201e <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002004:	6a3b      	ldr	r3, [r7, #32]
 8002006:	2202      	movs	r2, #2
 8002008:	4313      	orrs	r3, r2
 800200a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	2280      	movs	r2, #128	@ 0x80
 8002012:	0092      	lsls	r2, r2, #2
 8002014:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002016:	2327      	movs	r3, #39	@ 0x27
 8002018:	18fb      	adds	r3, r7, r3
 800201a:	2201      	movs	r2, #1
 800201c:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 800201e:	2327      	movs	r3, #39	@ 0x27
 8002020:	18fb      	adds	r3, r7, r3
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d01d      	beq.n	8002064 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	0018      	movs	r0, r3
 800202c:	f7ff fe28 	bl	8001c80 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	685a      	ldr	r2, [r3, #4]
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	490e      	ldr	r1, [pc, #56]	@ (8002074 <I2C_IsErrorOccurred+0x1ec>)
 800203c:	400a      	ands	r2, r1
 800203e:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002044:	6a3b      	ldr	r3, [r7, #32]
 8002046:	431a      	orrs	r2, r3
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	2241      	movs	r2, #65	@ 0x41
 8002050:	2120      	movs	r1, #32
 8002052:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	2242      	movs	r2, #66	@ 0x42
 8002058:	2100      	movs	r1, #0
 800205a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	2240      	movs	r2, #64	@ 0x40
 8002060:	2100      	movs	r1, #0
 8002062:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8002064:	2327      	movs	r3, #39	@ 0x27
 8002066:	18fb      	adds	r3, r7, r3
 8002068:	781b      	ldrb	r3, [r3, #0]
}
 800206a:	0018      	movs	r0, r3
 800206c:	46bd      	mov	sp, r7
 800206e:	b00a      	add	sp, #40	@ 0x28
 8002070:	bd80      	pop	{r7, pc}
 8002072:	46c0      	nop			@ (mov r8, r8)
 8002074:	fe00e800 	.word	0xfe00e800

08002078 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002078:	b590      	push	{r4, r7, lr}
 800207a:	b087      	sub	sp, #28
 800207c:	af00      	add	r7, sp, #0
 800207e:	60f8      	str	r0, [r7, #12]
 8002080:	0008      	movs	r0, r1
 8002082:	0011      	movs	r1, r2
 8002084:	607b      	str	r3, [r7, #4]
 8002086:	240a      	movs	r4, #10
 8002088:	193b      	adds	r3, r7, r4
 800208a:	1c02      	adds	r2, r0, #0
 800208c:	801a      	strh	r2, [r3, #0]
 800208e:	2009      	movs	r0, #9
 8002090:	183b      	adds	r3, r7, r0
 8002092:	1c0a      	adds	r2, r1, #0
 8002094:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002096:	193b      	adds	r3, r7, r4
 8002098:	881b      	ldrh	r3, [r3, #0]
 800209a:	059b      	lsls	r3, r3, #22
 800209c:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800209e:	183b      	adds	r3, r7, r0
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	0419      	lsls	r1, r3, #16
 80020a4:	23ff      	movs	r3, #255	@ 0xff
 80020a6:	041b      	lsls	r3, r3, #16
 80020a8:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80020aa:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80020b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020b2:	4313      	orrs	r3, r2
 80020b4:	005b      	lsls	r3, r3, #1
 80020b6:	085b      	lsrs	r3, r3, #1
 80020b8:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80020c2:	0d51      	lsrs	r1, r2, #21
 80020c4:	2280      	movs	r2, #128	@ 0x80
 80020c6:	00d2      	lsls	r2, r2, #3
 80020c8:	400a      	ands	r2, r1
 80020ca:	4907      	ldr	r1, [pc, #28]	@ (80020e8 <I2C_TransferConfig+0x70>)
 80020cc:	430a      	orrs	r2, r1
 80020ce:	43d2      	mvns	r2, r2
 80020d0:	401a      	ands	r2, r3
 80020d2:	0011      	movs	r1, r2
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	697a      	ldr	r2, [r7, #20]
 80020da:	430a      	orrs	r2, r1
 80020dc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80020de:	46c0      	nop			@ (mov r8, r8)
 80020e0:	46bd      	mov	sp, r7
 80020e2:	b007      	add	sp, #28
 80020e4:	bd90      	pop	{r4, r7, pc}
 80020e6:	46c0      	nop			@ (mov r8, r8)
 80020e8:	03ff63ff 	.word	0x03ff63ff

080020ec <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2241      	movs	r2, #65	@ 0x41
 80020fa:	5c9b      	ldrb	r3, [r3, r2]
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	2b20      	cmp	r3, #32
 8002100:	d138      	bne.n	8002174 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2240      	movs	r2, #64	@ 0x40
 8002106:	5c9b      	ldrb	r3, [r3, r2]
 8002108:	2b01      	cmp	r3, #1
 800210a:	d101      	bne.n	8002110 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800210c:	2302      	movs	r3, #2
 800210e:	e032      	b.n	8002176 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2240      	movs	r2, #64	@ 0x40
 8002114:	2101      	movs	r1, #1
 8002116:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2241      	movs	r2, #65	@ 0x41
 800211c:	2124      	movs	r1, #36	@ 0x24
 800211e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	2101      	movs	r1, #1
 800212c:	438a      	bics	r2, r1
 800212e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4911      	ldr	r1, [pc, #68]	@ (8002180 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800213c:	400a      	ands	r2, r1
 800213e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	6819      	ldr	r1, [r3, #0]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	683a      	ldr	r2, [r7, #0]
 800214c:	430a      	orrs	r2, r1
 800214e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	2101      	movs	r1, #1
 800215c:	430a      	orrs	r2, r1
 800215e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2241      	movs	r2, #65	@ 0x41
 8002164:	2120      	movs	r1, #32
 8002166:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2240      	movs	r2, #64	@ 0x40
 800216c:	2100      	movs	r1, #0
 800216e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002170:	2300      	movs	r3, #0
 8002172:	e000      	b.n	8002176 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002174:	2302      	movs	r3, #2
  }
}
 8002176:	0018      	movs	r0, r3
 8002178:	46bd      	mov	sp, r7
 800217a:	b002      	add	sp, #8
 800217c:	bd80      	pop	{r7, pc}
 800217e:	46c0      	nop			@ (mov r8, r8)
 8002180:	ffffefff 	.word	0xffffefff

08002184 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2241      	movs	r2, #65	@ 0x41
 8002192:	5c9b      	ldrb	r3, [r3, r2]
 8002194:	b2db      	uxtb	r3, r3
 8002196:	2b20      	cmp	r3, #32
 8002198:	d139      	bne.n	800220e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2240      	movs	r2, #64	@ 0x40
 800219e:	5c9b      	ldrb	r3, [r3, r2]
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d101      	bne.n	80021a8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80021a4:	2302      	movs	r3, #2
 80021a6:	e033      	b.n	8002210 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2240      	movs	r2, #64	@ 0x40
 80021ac:	2101      	movs	r1, #1
 80021ae:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2241      	movs	r2, #65	@ 0x41
 80021b4:	2124      	movs	r1, #36	@ 0x24
 80021b6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	2101      	movs	r1, #1
 80021c4:	438a      	bics	r2, r1
 80021c6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	4a11      	ldr	r2, [pc, #68]	@ (8002218 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80021d4:	4013      	ands	r3, r2
 80021d6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	021b      	lsls	r3, r3, #8
 80021dc:	68fa      	ldr	r2, [r7, #12]
 80021de:	4313      	orrs	r3, r2
 80021e0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	68fa      	ldr	r2, [r7, #12]
 80021e8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	2101      	movs	r1, #1
 80021f6:	430a      	orrs	r2, r1
 80021f8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2241      	movs	r2, #65	@ 0x41
 80021fe:	2120      	movs	r1, #32
 8002200:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2240      	movs	r2, #64	@ 0x40
 8002206:	2100      	movs	r1, #0
 8002208:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800220a:	2300      	movs	r3, #0
 800220c:	e000      	b.n	8002210 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800220e:	2302      	movs	r3, #2
  }
}
 8002210:	0018      	movs	r0, r3
 8002212:	46bd      	mov	sp, r7
 8002214:	b004      	add	sp, #16
 8002216:	bd80      	pop	{r7, pc}
 8002218:	fffff0ff 	.word	0xfffff0ff

0800221c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b084      	sub	sp, #16
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002224:	4b19      	ldr	r3, [pc, #100]	@ (800228c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a19      	ldr	r2, [pc, #100]	@ (8002290 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800222a:	4013      	ands	r3, r2
 800222c:	0019      	movs	r1, r3
 800222e:	4b17      	ldr	r3, [pc, #92]	@ (800228c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002230:	687a      	ldr	r2, [r7, #4]
 8002232:	430a      	orrs	r2, r1
 8002234:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	2380      	movs	r3, #128	@ 0x80
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	429a      	cmp	r2, r3
 800223e:	d11f      	bne.n	8002280 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002240:	4b14      	ldr	r3, [pc, #80]	@ (8002294 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	0013      	movs	r3, r2
 8002246:	005b      	lsls	r3, r3, #1
 8002248:	189b      	adds	r3, r3, r2
 800224a:	005b      	lsls	r3, r3, #1
 800224c:	4912      	ldr	r1, [pc, #72]	@ (8002298 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800224e:	0018      	movs	r0, r3
 8002250:	f7fd ff6a 	bl	8000128 <__udivsi3>
 8002254:	0003      	movs	r3, r0
 8002256:	3301      	adds	r3, #1
 8002258:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800225a:	e008      	b.n	800226e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d003      	beq.n	800226a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	3b01      	subs	r3, #1
 8002266:	60fb      	str	r3, [r7, #12]
 8002268:	e001      	b.n	800226e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800226a:	2303      	movs	r3, #3
 800226c:	e009      	b.n	8002282 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800226e:	4b07      	ldr	r3, [pc, #28]	@ (800228c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002270:	695a      	ldr	r2, [r3, #20]
 8002272:	2380      	movs	r3, #128	@ 0x80
 8002274:	00db      	lsls	r3, r3, #3
 8002276:	401a      	ands	r2, r3
 8002278:	2380      	movs	r3, #128	@ 0x80
 800227a:	00db      	lsls	r3, r3, #3
 800227c:	429a      	cmp	r2, r3
 800227e:	d0ed      	beq.n	800225c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002280:	2300      	movs	r3, #0
}
 8002282:	0018      	movs	r0, r3
 8002284:	46bd      	mov	sp, r7
 8002286:	b004      	add	sp, #16
 8002288:	bd80      	pop	{r7, pc}
 800228a:	46c0      	nop			@ (mov r8, r8)
 800228c:	40007000 	.word	0x40007000
 8002290:	fffff9ff 	.word	0xfffff9ff
 8002294:	20000300 	.word	0x20000300
 8002298:	000f4240 	.word	0x000f4240

0800229c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80022a0:	4b03      	ldr	r3, [pc, #12]	@ (80022b0 <LL_RCC_GetAPB1Prescaler+0x14>)
 80022a2:	689a      	ldr	r2, [r3, #8]
 80022a4:	23e0      	movs	r3, #224	@ 0xe0
 80022a6:	01db      	lsls	r3, r3, #7
 80022a8:	4013      	ands	r3, r2
}
 80022aa:	0018      	movs	r0, r3
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	40021000 	.word	0x40021000

080022b4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b088      	sub	sp, #32
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d101      	bne.n	80022c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e2f3      	b.n	80028ae <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	2201      	movs	r2, #1
 80022cc:	4013      	ands	r3, r2
 80022ce:	d100      	bne.n	80022d2 <HAL_RCC_OscConfig+0x1e>
 80022d0:	e07c      	b.n	80023cc <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022d2:	4bc3      	ldr	r3, [pc, #780]	@ (80025e0 <HAL_RCC_OscConfig+0x32c>)
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	2238      	movs	r2, #56	@ 0x38
 80022d8:	4013      	ands	r3, r2
 80022da:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022dc:	4bc0      	ldr	r3, [pc, #768]	@ (80025e0 <HAL_RCC_OscConfig+0x32c>)
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	2203      	movs	r2, #3
 80022e2:	4013      	ands	r3, r2
 80022e4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80022e6:	69bb      	ldr	r3, [r7, #24]
 80022e8:	2b10      	cmp	r3, #16
 80022ea:	d102      	bne.n	80022f2 <HAL_RCC_OscConfig+0x3e>
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	2b03      	cmp	r3, #3
 80022f0:	d002      	beq.n	80022f8 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80022f2:	69bb      	ldr	r3, [r7, #24]
 80022f4:	2b08      	cmp	r3, #8
 80022f6:	d10b      	bne.n	8002310 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022f8:	4bb9      	ldr	r3, [pc, #740]	@ (80025e0 <HAL_RCC_OscConfig+0x32c>)
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	2380      	movs	r3, #128	@ 0x80
 80022fe:	029b      	lsls	r3, r3, #10
 8002300:	4013      	ands	r3, r2
 8002302:	d062      	beq.n	80023ca <HAL_RCC_OscConfig+0x116>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d15e      	bne.n	80023ca <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	e2ce      	b.n	80028ae <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	685a      	ldr	r2, [r3, #4]
 8002314:	2380      	movs	r3, #128	@ 0x80
 8002316:	025b      	lsls	r3, r3, #9
 8002318:	429a      	cmp	r2, r3
 800231a:	d107      	bne.n	800232c <HAL_RCC_OscConfig+0x78>
 800231c:	4bb0      	ldr	r3, [pc, #704]	@ (80025e0 <HAL_RCC_OscConfig+0x32c>)
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	4baf      	ldr	r3, [pc, #700]	@ (80025e0 <HAL_RCC_OscConfig+0x32c>)
 8002322:	2180      	movs	r1, #128	@ 0x80
 8002324:	0249      	lsls	r1, r1, #9
 8002326:	430a      	orrs	r2, r1
 8002328:	601a      	str	r2, [r3, #0]
 800232a:	e020      	b.n	800236e <HAL_RCC_OscConfig+0xba>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	685a      	ldr	r2, [r3, #4]
 8002330:	23a0      	movs	r3, #160	@ 0xa0
 8002332:	02db      	lsls	r3, r3, #11
 8002334:	429a      	cmp	r2, r3
 8002336:	d10e      	bne.n	8002356 <HAL_RCC_OscConfig+0xa2>
 8002338:	4ba9      	ldr	r3, [pc, #676]	@ (80025e0 <HAL_RCC_OscConfig+0x32c>)
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	4ba8      	ldr	r3, [pc, #672]	@ (80025e0 <HAL_RCC_OscConfig+0x32c>)
 800233e:	2180      	movs	r1, #128	@ 0x80
 8002340:	02c9      	lsls	r1, r1, #11
 8002342:	430a      	orrs	r2, r1
 8002344:	601a      	str	r2, [r3, #0]
 8002346:	4ba6      	ldr	r3, [pc, #664]	@ (80025e0 <HAL_RCC_OscConfig+0x32c>)
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	4ba5      	ldr	r3, [pc, #660]	@ (80025e0 <HAL_RCC_OscConfig+0x32c>)
 800234c:	2180      	movs	r1, #128	@ 0x80
 800234e:	0249      	lsls	r1, r1, #9
 8002350:	430a      	orrs	r2, r1
 8002352:	601a      	str	r2, [r3, #0]
 8002354:	e00b      	b.n	800236e <HAL_RCC_OscConfig+0xba>
 8002356:	4ba2      	ldr	r3, [pc, #648]	@ (80025e0 <HAL_RCC_OscConfig+0x32c>)
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	4ba1      	ldr	r3, [pc, #644]	@ (80025e0 <HAL_RCC_OscConfig+0x32c>)
 800235c:	49a1      	ldr	r1, [pc, #644]	@ (80025e4 <HAL_RCC_OscConfig+0x330>)
 800235e:	400a      	ands	r2, r1
 8002360:	601a      	str	r2, [r3, #0]
 8002362:	4b9f      	ldr	r3, [pc, #636]	@ (80025e0 <HAL_RCC_OscConfig+0x32c>)
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	4b9e      	ldr	r3, [pc, #632]	@ (80025e0 <HAL_RCC_OscConfig+0x32c>)
 8002368:	499f      	ldr	r1, [pc, #636]	@ (80025e8 <HAL_RCC_OscConfig+0x334>)
 800236a:	400a      	ands	r2, r1
 800236c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d014      	beq.n	80023a0 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002376:	f7fe ffbb 	bl	80012f0 <HAL_GetTick>
 800237a:	0003      	movs	r3, r0
 800237c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800237e:	e008      	b.n	8002392 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002380:	f7fe ffb6 	bl	80012f0 <HAL_GetTick>
 8002384:	0002      	movs	r2, r0
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	2b64      	cmp	r3, #100	@ 0x64
 800238c:	d901      	bls.n	8002392 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	e28d      	b.n	80028ae <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002392:	4b93      	ldr	r3, [pc, #588]	@ (80025e0 <HAL_RCC_OscConfig+0x32c>)
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	2380      	movs	r3, #128	@ 0x80
 8002398:	029b      	lsls	r3, r3, #10
 800239a:	4013      	ands	r3, r2
 800239c:	d0f0      	beq.n	8002380 <HAL_RCC_OscConfig+0xcc>
 800239e:	e015      	b.n	80023cc <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023a0:	f7fe ffa6 	bl	80012f0 <HAL_GetTick>
 80023a4:	0003      	movs	r3, r0
 80023a6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80023a8:	e008      	b.n	80023bc <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023aa:	f7fe ffa1 	bl	80012f0 <HAL_GetTick>
 80023ae:	0002      	movs	r2, r0
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	1ad3      	subs	r3, r2, r3
 80023b4:	2b64      	cmp	r3, #100	@ 0x64
 80023b6:	d901      	bls.n	80023bc <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80023b8:	2303      	movs	r3, #3
 80023ba:	e278      	b.n	80028ae <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80023bc:	4b88      	ldr	r3, [pc, #544]	@ (80025e0 <HAL_RCC_OscConfig+0x32c>)
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	2380      	movs	r3, #128	@ 0x80
 80023c2:	029b      	lsls	r3, r3, #10
 80023c4:	4013      	ands	r3, r2
 80023c6:	d1f0      	bne.n	80023aa <HAL_RCC_OscConfig+0xf6>
 80023c8:	e000      	b.n	80023cc <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023ca:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	2202      	movs	r2, #2
 80023d2:	4013      	ands	r3, r2
 80023d4:	d100      	bne.n	80023d8 <HAL_RCC_OscConfig+0x124>
 80023d6:	e099      	b.n	800250c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023d8:	4b81      	ldr	r3, [pc, #516]	@ (80025e0 <HAL_RCC_OscConfig+0x32c>)
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	2238      	movs	r2, #56	@ 0x38
 80023de:	4013      	ands	r3, r2
 80023e0:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023e2:	4b7f      	ldr	r3, [pc, #508]	@ (80025e0 <HAL_RCC_OscConfig+0x32c>)
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	2203      	movs	r2, #3
 80023e8:	4013      	ands	r3, r2
 80023ea:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80023ec:	69bb      	ldr	r3, [r7, #24]
 80023ee:	2b10      	cmp	r3, #16
 80023f0:	d102      	bne.n	80023f8 <HAL_RCC_OscConfig+0x144>
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	2b02      	cmp	r3, #2
 80023f6:	d002      	beq.n	80023fe <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80023f8:	69bb      	ldr	r3, [r7, #24]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d135      	bne.n	800246a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023fe:	4b78      	ldr	r3, [pc, #480]	@ (80025e0 <HAL_RCC_OscConfig+0x32c>)
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	2380      	movs	r3, #128	@ 0x80
 8002404:	00db      	lsls	r3, r3, #3
 8002406:	4013      	ands	r3, r2
 8002408:	d005      	beq.n	8002416 <HAL_RCC_OscConfig+0x162>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	68db      	ldr	r3, [r3, #12]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d101      	bne.n	8002416 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e24b      	b.n	80028ae <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002416:	4b72      	ldr	r3, [pc, #456]	@ (80025e0 <HAL_RCC_OscConfig+0x32c>)
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	4a74      	ldr	r2, [pc, #464]	@ (80025ec <HAL_RCC_OscConfig+0x338>)
 800241c:	4013      	ands	r3, r2
 800241e:	0019      	movs	r1, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	695b      	ldr	r3, [r3, #20]
 8002424:	021a      	lsls	r2, r3, #8
 8002426:	4b6e      	ldr	r3, [pc, #440]	@ (80025e0 <HAL_RCC_OscConfig+0x32c>)
 8002428:	430a      	orrs	r2, r1
 800242a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800242c:	69bb      	ldr	r3, [r7, #24]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d112      	bne.n	8002458 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002432:	4b6b      	ldr	r3, [pc, #428]	@ (80025e0 <HAL_RCC_OscConfig+0x32c>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a6e      	ldr	r2, [pc, #440]	@ (80025f0 <HAL_RCC_OscConfig+0x33c>)
 8002438:	4013      	ands	r3, r2
 800243a:	0019      	movs	r1, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	691a      	ldr	r2, [r3, #16]
 8002440:	4b67      	ldr	r3, [pc, #412]	@ (80025e0 <HAL_RCC_OscConfig+0x32c>)
 8002442:	430a      	orrs	r2, r1
 8002444:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002446:	4b66      	ldr	r3, [pc, #408]	@ (80025e0 <HAL_RCC_OscConfig+0x32c>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	0adb      	lsrs	r3, r3, #11
 800244c:	2207      	movs	r2, #7
 800244e:	4013      	ands	r3, r2
 8002450:	4a68      	ldr	r2, [pc, #416]	@ (80025f4 <HAL_RCC_OscConfig+0x340>)
 8002452:	40da      	lsrs	r2, r3
 8002454:	4b68      	ldr	r3, [pc, #416]	@ (80025f8 <HAL_RCC_OscConfig+0x344>)
 8002456:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002458:	4b68      	ldr	r3, [pc, #416]	@ (80025fc <HAL_RCC_OscConfig+0x348>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	0018      	movs	r0, r3
 800245e:	f7fe feeb 	bl	8001238 <HAL_InitTick>
 8002462:	1e03      	subs	r3, r0, #0
 8002464:	d051      	beq.n	800250a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e221      	b.n	80028ae <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	68db      	ldr	r3, [r3, #12]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d030      	beq.n	80024d4 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002472:	4b5b      	ldr	r3, [pc, #364]	@ (80025e0 <HAL_RCC_OscConfig+0x32c>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a5e      	ldr	r2, [pc, #376]	@ (80025f0 <HAL_RCC_OscConfig+0x33c>)
 8002478:	4013      	ands	r3, r2
 800247a:	0019      	movs	r1, r3
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	691a      	ldr	r2, [r3, #16]
 8002480:	4b57      	ldr	r3, [pc, #348]	@ (80025e0 <HAL_RCC_OscConfig+0x32c>)
 8002482:	430a      	orrs	r2, r1
 8002484:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002486:	4b56      	ldr	r3, [pc, #344]	@ (80025e0 <HAL_RCC_OscConfig+0x32c>)
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	4b55      	ldr	r3, [pc, #340]	@ (80025e0 <HAL_RCC_OscConfig+0x32c>)
 800248c:	2180      	movs	r1, #128	@ 0x80
 800248e:	0049      	lsls	r1, r1, #1
 8002490:	430a      	orrs	r2, r1
 8002492:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002494:	f7fe ff2c 	bl	80012f0 <HAL_GetTick>
 8002498:	0003      	movs	r3, r0
 800249a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800249c:	e008      	b.n	80024b0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800249e:	f7fe ff27 	bl	80012f0 <HAL_GetTick>
 80024a2:	0002      	movs	r2, r0
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	d901      	bls.n	80024b0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80024ac:	2303      	movs	r3, #3
 80024ae:	e1fe      	b.n	80028ae <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024b0:	4b4b      	ldr	r3, [pc, #300]	@ (80025e0 <HAL_RCC_OscConfig+0x32c>)
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	2380      	movs	r3, #128	@ 0x80
 80024b6:	00db      	lsls	r3, r3, #3
 80024b8:	4013      	ands	r3, r2
 80024ba:	d0f0      	beq.n	800249e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024bc:	4b48      	ldr	r3, [pc, #288]	@ (80025e0 <HAL_RCC_OscConfig+0x32c>)
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	4a4a      	ldr	r2, [pc, #296]	@ (80025ec <HAL_RCC_OscConfig+0x338>)
 80024c2:	4013      	ands	r3, r2
 80024c4:	0019      	movs	r1, r3
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	695b      	ldr	r3, [r3, #20]
 80024ca:	021a      	lsls	r2, r3, #8
 80024cc:	4b44      	ldr	r3, [pc, #272]	@ (80025e0 <HAL_RCC_OscConfig+0x32c>)
 80024ce:	430a      	orrs	r2, r1
 80024d0:	605a      	str	r2, [r3, #4]
 80024d2:	e01b      	b.n	800250c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80024d4:	4b42      	ldr	r3, [pc, #264]	@ (80025e0 <HAL_RCC_OscConfig+0x32c>)
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	4b41      	ldr	r3, [pc, #260]	@ (80025e0 <HAL_RCC_OscConfig+0x32c>)
 80024da:	4949      	ldr	r1, [pc, #292]	@ (8002600 <HAL_RCC_OscConfig+0x34c>)
 80024dc:	400a      	ands	r2, r1
 80024de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024e0:	f7fe ff06 	bl	80012f0 <HAL_GetTick>
 80024e4:	0003      	movs	r3, r0
 80024e6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80024e8:	e008      	b.n	80024fc <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024ea:	f7fe ff01 	bl	80012f0 <HAL_GetTick>
 80024ee:	0002      	movs	r2, r0
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	1ad3      	subs	r3, r2, r3
 80024f4:	2b02      	cmp	r3, #2
 80024f6:	d901      	bls.n	80024fc <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80024f8:	2303      	movs	r3, #3
 80024fa:	e1d8      	b.n	80028ae <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80024fc:	4b38      	ldr	r3, [pc, #224]	@ (80025e0 <HAL_RCC_OscConfig+0x32c>)
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	2380      	movs	r3, #128	@ 0x80
 8002502:	00db      	lsls	r3, r3, #3
 8002504:	4013      	ands	r3, r2
 8002506:	d1f0      	bne.n	80024ea <HAL_RCC_OscConfig+0x236>
 8002508:	e000      	b.n	800250c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800250a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	2208      	movs	r2, #8
 8002512:	4013      	ands	r3, r2
 8002514:	d047      	beq.n	80025a6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002516:	4b32      	ldr	r3, [pc, #200]	@ (80025e0 <HAL_RCC_OscConfig+0x32c>)
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	2238      	movs	r2, #56	@ 0x38
 800251c:	4013      	ands	r3, r2
 800251e:	2b18      	cmp	r3, #24
 8002520:	d10a      	bne.n	8002538 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002522:	4b2f      	ldr	r3, [pc, #188]	@ (80025e0 <HAL_RCC_OscConfig+0x32c>)
 8002524:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002526:	2202      	movs	r2, #2
 8002528:	4013      	ands	r3, r2
 800252a:	d03c      	beq.n	80025a6 <HAL_RCC_OscConfig+0x2f2>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	699b      	ldr	r3, [r3, #24]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d138      	bne.n	80025a6 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e1ba      	b.n	80028ae <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	699b      	ldr	r3, [r3, #24]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d019      	beq.n	8002574 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002540:	4b27      	ldr	r3, [pc, #156]	@ (80025e0 <HAL_RCC_OscConfig+0x32c>)
 8002542:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002544:	4b26      	ldr	r3, [pc, #152]	@ (80025e0 <HAL_RCC_OscConfig+0x32c>)
 8002546:	2101      	movs	r1, #1
 8002548:	430a      	orrs	r2, r1
 800254a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800254c:	f7fe fed0 	bl	80012f0 <HAL_GetTick>
 8002550:	0003      	movs	r3, r0
 8002552:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002554:	e008      	b.n	8002568 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002556:	f7fe fecb 	bl	80012f0 <HAL_GetTick>
 800255a:	0002      	movs	r2, r0
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	2b02      	cmp	r3, #2
 8002562:	d901      	bls.n	8002568 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002564:	2303      	movs	r3, #3
 8002566:	e1a2      	b.n	80028ae <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002568:	4b1d      	ldr	r3, [pc, #116]	@ (80025e0 <HAL_RCC_OscConfig+0x32c>)
 800256a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800256c:	2202      	movs	r2, #2
 800256e:	4013      	ands	r3, r2
 8002570:	d0f1      	beq.n	8002556 <HAL_RCC_OscConfig+0x2a2>
 8002572:	e018      	b.n	80025a6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002574:	4b1a      	ldr	r3, [pc, #104]	@ (80025e0 <HAL_RCC_OscConfig+0x32c>)
 8002576:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002578:	4b19      	ldr	r3, [pc, #100]	@ (80025e0 <HAL_RCC_OscConfig+0x32c>)
 800257a:	2101      	movs	r1, #1
 800257c:	438a      	bics	r2, r1
 800257e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002580:	f7fe feb6 	bl	80012f0 <HAL_GetTick>
 8002584:	0003      	movs	r3, r0
 8002586:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002588:	e008      	b.n	800259c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800258a:	f7fe feb1 	bl	80012f0 <HAL_GetTick>
 800258e:	0002      	movs	r2, r0
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	2b02      	cmp	r3, #2
 8002596:	d901      	bls.n	800259c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002598:	2303      	movs	r3, #3
 800259a:	e188      	b.n	80028ae <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800259c:	4b10      	ldr	r3, [pc, #64]	@ (80025e0 <HAL_RCC_OscConfig+0x32c>)
 800259e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025a0:	2202      	movs	r2, #2
 80025a2:	4013      	ands	r3, r2
 80025a4:	d1f1      	bne.n	800258a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	2204      	movs	r2, #4
 80025ac:	4013      	ands	r3, r2
 80025ae:	d100      	bne.n	80025b2 <HAL_RCC_OscConfig+0x2fe>
 80025b0:	e0c6      	b.n	8002740 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025b2:	231f      	movs	r3, #31
 80025b4:	18fb      	adds	r3, r7, r3
 80025b6:	2200      	movs	r2, #0
 80025b8:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80025ba:	4b09      	ldr	r3, [pc, #36]	@ (80025e0 <HAL_RCC_OscConfig+0x32c>)
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	2238      	movs	r2, #56	@ 0x38
 80025c0:	4013      	ands	r3, r2
 80025c2:	2b20      	cmp	r3, #32
 80025c4:	d11e      	bne.n	8002604 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80025c6:	4b06      	ldr	r3, [pc, #24]	@ (80025e0 <HAL_RCC_OscConfig+0x32c>)
 80025c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025ca:	2202      	movs	r2, #2
 80025cc:	4013      	ands	r3, r2
 80025ce:	d100      	bne.n	80025d2 <HAL_RCC_OscConfig+0x31e>
 80025d0:	e0b6      	b.n	8002740 <HAL_RCC_OscConfig+0x48c>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d000      	beq.n	80025dc <HAL_RCC_OscConfig+0x328>
 80025da:	e0b1      	b.n	8002740 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	e166      	b.n	80028ae <HAL_RCC_OscConfig+0x5fa>
 80025e0:	40021000 	.word	0x40021000
 80025e4:	fffeffff 	.word	0xfffeffff
 80025e8:	fffbffff 	.word	0xfffbffff
 80025ec:	ffff80ff 	.word	0xffff80ff
 80025f0:	ffffc7ff 	.word	0xffffc7ff
 80025f4:	00f42400 	.word	0x00f42400
 80025f8:	20000300 	.word	0x20000300
 80025fc:	20000304 	.word	0x20000304
 8002600:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002604:	4bac      	ldr	r3, [pc, #688]	@ (80028b8 <HAL_RCC_OscConfig+0x604>)
 8002606:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002608:	2380      	movs	r3, #128	@ 0x80
 800260a:	055b      	lsls	r3, r3, #21
 800260c:	4013      	ands	r3, r2
 800260e:	d101      	bne.n	8002614 <HAL_RCC_OscConfig+0x360>
 8002610:	2301      	movs	r3, #1
 8002612:	e000      	b.n	8002616 <HAL_RCC_OscConfig+0x362>
 8002614:	2300      	movs	r3, #0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d011      	beq.n	800263e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800261a:	4ba7      	ldr	r3, [pc, #668]	@ (80028b8 <HAL_RCC_OscConfig+0x604>)
 800261c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800261e:	4ba6      	ldr	r3, [pc, #664]	@ (80028b8 <HAL_RCC_OscConfig+0x604>)
 8002620:	2180      	movs	r1, #128	@ 0x80
 8002622:	0549      	lsls	r1, r1, #21
 8002624:	430a      	orrs	r2, r1
 8002626:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002628:	4ba3      	ldr	r3, [pc, #652]	@ (80028b8 <HAL_RCC_OscConfig+0x604>)
 800262a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800262c:	2380      	movs	r3, #128	@ 0x80
 800262e:	055b      	lsls	r3, r3, #21
 8002630:	4013      	ands	r3, r2
 8002632:	60fb      	str	r3, [r7, #12]
 8002634:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002636:	231f      	movs	r3, #31
 8002638:	18fb      	adds	r3, r7, r3
 800263a:	2201      	movs	r2, #1
 800263c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800263e:	4b9f      	ldr	r3, [pc, #636]	@ (80028bc <HAL_RCC_OscConfig+0x608>)
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	2380      	movs	r3, #128	@ 0x80
 8002644:	005b      	lsls	r3, r3, #1
 8002646:	4013      	ands	r3, r2
 8002648:	d11a      	bne.n	8002680 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800264a:	4b9c      	ldr	r3, [pc, #624]	@ (80028bc <HAL_RCC_OscConfig+0x608>)
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	4b9b      	ldr	r3, [pc, #620]	@ (80028bc <HAL_RCC_OscConfig+0x608>)
 8002650:	2180      	movs	r1, #128	@ 0x80
 8002652:	0049      	lsls	r1, r1, #1
 8002654:	430a      	orrs	r2, r1
 8002656:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002658:	f7fe fe4a 	bl	80012f0 <HAL_GetTick>
 800265c:	0003      	movs	r3, r0
 800265e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002660:	e008      	b.n	8002674 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002662:	f7fe fe45 	bl	80012f0 <HAL_GetTick>
 8002666:	0002      	movs	r2, r0
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	1ad3      	subs	r3, r2, r3
 800266c:	2b02      	cmp	r3, #2
 800266e:	d901      	bls.n	8002674 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002670:	2303      	movs	r3, #3
 8002672:	e11c      	b.n	80028ae <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002674:	4b91      	ldr	r3, [pc, #580]	@ (80028bc <HAL_RCC_OscConfig+0x608>)
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	2380      	movs	r3, #128	@ 0x80
 800267a:	005b      	lsls	r3, r3, #1
 800267c:	4013      	ands	r3, r2
 800267e:	d0f0      	beq.n	8002662 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	2b01      	cmp	r3, #1
 8002686:	d106      	bne.n	8002696 <HAL_RCC_OscConfig+0x3e2>
 8002688:	4b8b      	ldr	r3, [pc, #556]	@ (80028b8 <HAL_RCC_OscConfig+0x604>)
 800268a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800268c:	4b8a      	ldr	r3, [pc, #552]	@ (80028b8 <HAL_RCC_OscConfig+0x604>)
 800268e:	2101      	movs	r1, #1
 8002690:	430a      	orrs	r2, r1
 8002692:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002694:	e01c      	b.n	80026d0 <HAL_RCC_OscConfig+0x41c>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	2b05      	cmp	r3, #5
 800269c:	d10c      	bne.n	80026b8 <HAL_RCC_OscConfig+0x404>
 800269e:	4b86      	ldr	r3, [pc, #536]	@ (80028b8 <HAL_RCC_OscConfig+0x604>)
 80026a0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80026a2:	4b85      	ldr	r3, [pc, #532]	@ (80028b8 <HAL_RCC_OscConfig+0x604>)
 80026a4:	2104      	movs	r1, #4
 80026a6:	430a      	orrs	r2, r1
 80026a8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80026aa:	4b83      	ldr	r3, [pc, #524]	@ (80028b8 <HAL_RCC_OscConfig+0x604>)
 80026ac:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80026ae:	4b82      	ldr	r3, [pc, #520]	@ (80028b8 <HAL_RCC_OscConfig+0x604>)
 80026b0:	2101      	movs	r1, #1
 80026b2:	430a      	orrs	r2, r1
 80026b4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80026b6:	e00b      	b.n	80026d0 <HAL_RCC_OscConfig+0x41c>
 80026b8:	4b7f      	ldr	r3, [pc, #508]	@ (80028b8 <HAL_RCC_OscConfig+0x604>)
 80026ba:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80026bc:	4b7e      	ldr	r3, [pc, #504]	@ (80028b8 <HAL_RCC_OscConfig+0x604>)
 80026be:	2101      	movs	r1, #1
 80026c0:	438a      	bics	r2, r1
 80026c2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80026c4:	4b7c      	ldr	r3, [pc, #496]	@ (80028b8 <HAL_RCC_OscConfig+0x604>)
 80026c6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80026c8:	4b7b      	ldr	r3, [pc, #492]	@ (80028b8 <HAL_RCC_OscConfig+0x604>)
 80026ca:	2104      	movs	r1, #4
 80026cc:	438a      	bics	r2, r1
 80026ce:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d014      	beq.n	8002702 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026d8:	f7fe fe0a 	bl	80012f0 <HAL_GetTick>
 80026dc:	0003      	movs	r3, r0
 80026de:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026e0:	e009      	b.n	80026f6 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026e2:	f7fe fe05 	bl	80012f0 <HAL_GetTick>
 80026e6:	0002      	movs	r2, r0
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	1ad3      	subs	r3, r2, r3
 80026ec:	4a74      	ldr	r2, [pc, #464]	@ (80028c0 <HAL_RCC_OscConfig+0x60c>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d901      	bls.n	80026f6 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	e0db      	b.n	80028ae <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026f6:	4b70      	ldr	r3, [pc, #448]	@ (80028b8 <HAL_RCC_OscConfig+0x604>)
 80026f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026fa:	2202      	movs	r2, #2
 80026fc:	4013      	ands	r3, r2
 80026fe:	d0f0      	beq.n	80026e2 <HAL_RCC_OscConfig+0x42e>
 8002700:	e013      	b.n	800272a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002702:	f7fe fdf5 	bl	80012f0 <HAL_GetTick>
 8002706:	0003      	movs	r3, r0
 8002708:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800270a:	e009      	b.n	8002720 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800270c:	f7fe fdf0 	bl	80012f0 <HAL_GetTick>
 8002710:	0002      	movs	r2, r0
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	4a6a      	ldr	r2, [pc, #424]	@ (80028c0 <HAL_RCC_OscConfig+0x60c>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d901      	bls.n	8002720 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800271c:	2303      	movs	r3, #3
 800271e:	e0c6      	b.n	80028ae <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002720:	4b65      	ldr	r3, [pc, #404]	@ (80028b8 <HAL_RCC_OscConfig+0x604>)
 8002722:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002724:	2202      	movs	r2, #2
 8002726:	4013      	ands	r3, r2
 8002728:	d1f0      	bne.n	800270c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800272a:	231f      	movs	r3, #31
 800272c:	18fb      	adds	r3, r7, r3
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	2b01      	cmp	r3, #1
 8002732:	d105      	bne.n	8002740 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002734:	4b60      	ldr	r3, [pc, #384]	@ (80028b8 <HAL_RCC_OscConfig+0x604>)
 8002736:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002738:	4b5f      	ldr	r3, [pc, #380]	@ (80028b8 <HAL_RCC_OscConfig+0x604>)
 800273a:	4962      	ldr	r1, [pc, #392]	@ (80028c4 <HAL_RCC_OscConfig+0x610>)
 800273c:	400a      	ands	r2, r1
 800273e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	69db      	ldr	r3, [r3, #28]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d100      	bne.n	800274a <HAL_RCC_OscConfig+0x496>
 8002748:	e0b0      	b.n	80028ac <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800274a:	4b5b      	ldr	r3, [pc, #364]	@ (80028b8 <HAL_RCC_OscConfig+0x604>)
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	2238      	movs	r2, #56	@ 0x38
 8002750:	4013      	ands	r3, r2
 8002752:	2b10      	cmp	r3, #16
 8002754:	d100      	bne.n	8002758 <HAL_RCC_OscConfig+0x4a4>
 8002756:	e078      	b.n	800284a <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	69db      	ldr	r3, [r3, #28]
 800275c:	2b02      	cmp	r3, #2
 800275e:	d153      	bne.n	8002808 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002760:	4b55      	ldr	r3, [pc, #340]	@ (80028b8 <HAL_RCC_OscConfig+0x604>)
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	4b54      	ldr	r3, [pc, #336]	@ (80028b8 <HAL_RCC_OscConfig+0x604>)
 8002766:	4958      	ldr	r1, [pc, #352]	@ (80028c8 <HAL_RCC_OscConfig+0x614>)
 8002768:	400a      	ands	r2, r1
 800276a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800276c:	f7fe fdc0 	bl	80012f0 <HAL_GetTick>
 8002770:	0003      	movs	r3, r0
 8002772:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002774:	e008      	b.n	8002788 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002776:	f7fe fdbb 	bl	80012f0 <HAL_GetTick>
 800277a:	0002      	movs	r2, r0
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	2b02      	cmp	r3, #2
 8002782:	d901      	bls.n	8002788 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002784:	2303      	movs	r3, #3
 8002786:	e092      	b.n	80028ae <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002788:	4b4b      	ldr	r3, [pc, #300]	@ (80028b8 <HAL_RCC_OscConfig+0x604>)
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	2380      	movs	r3, #128	@ 0x80
 800278e:	049b      	lsls	r3, r3, #18
 8002790:	4013      	ands	r3, r2
 8002792:	d1f0      	bne.n	8002776 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002794:	4b48      	ldr	r3, [pc, #288]	@ (80028b8 <HAL_RCC_OscConfig+0x604>)
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	4a4c      	ldr	r2, [pc, #304]	@ (80028cc <HAL_RCC_OscConfig+0x618>)
 800279a:	4013      	ands	r3, r2
 800279c:	0019      	movs	r1, r3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6a1a      	ldr	r2, [r3, #32]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027a6:	431a      	orrs	r2, r3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027ac:	021b      	lsls	r3, r3, #8
 80027ae:	431a      	orrs	r2, r3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027b4:	431a      	orrs	r2, r3
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ba:	431a      	orrs	r2, r3
 80027bc:	4b3e      	ldr	r3, [pc, #248]	@ (80028b8 <HAL_RCC_OscConfig+0x604>)
 80027be:	430a      	orrs	r2, r1
 80027c0:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027c2:	4b3d      	ldr	r3, [pc, #244]	@ (80028b8 <HAL_RCC_OscConfig+0x604>)
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	4b3c      	ldr	r3, [pc, #240]	@ (80028b8 <HAL_RCC_OscConfig+0x604>)
 80027c8:	2180      	movs	r1, #128	@ 0x80
 80027ca:	0449      	lsls	r1, r1, #17
 80027cc:	430a      	orrs	r2, r1
 80027ce:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80027d0:	4b39      	ldr	r3, [pc, #228]	@ (80028b8 <HAL_RCC_OscConfig+0x604>)
 80027d2:	68da      	ldr	r2, [r3, #12]
 80027d4:	4b38      	ldr	r3, [pc, #224]	@ (80028b8 <HAL_RCC_OscConfig+0x604>)
 80027d6:	2180      	movs	r1, #128	@ 0x80
 80027d8:	0549      	lsls	r1, r1, #21
 80027da:	430a      	orrs	r2, r1
 80027dc:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027de:	f7fe fd87 	bl	80012f0 <HAL_GetTick>
 80027e2:	0003      	movs	r3, r0
 80027e4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027e6:	e008      	b.n	80027fa <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027e8:	f7fe fd82 	bl	80012f0 <HAL_GetTick>
 80027ec:	0002      	movs	r2, r0
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d901      	bls.n	80027fa <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e059      	b.n	80028ae <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027fa:	4b2f      	ldr	r3, [pc, #188]	@ (80028b8 <HAL_RCC_OscConfig+0x604>)
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	2380      	movs	r3, #128	@ 0x80
 8002800:	049b      	lsls	r3, r3, #18
 8002802:	4013      	ands	r3, r2
 8002804:	d0f0      	beq.n	80027e8 <HAL_RCC_OscConfig+0x534>
 8002806:	e051      	b.n	80028ac <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002808:	4b2b      	ldr	r3, [pc, #172]	@ (80028b8 <HAL_RCC_OscConfig+0x604>)
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	4b2a      	ldr	r3, [pc, #168]	@ (80028b8 <HAL_RCC_OscConfig+0x604>)
 800280e:	492e      	ldr	r1, [pc, #184]	@ (80028c8 <HAL_RCC_OscConfig+0x614>)
 8002810:	400a      	ands	r2, r1
 8002812:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002814:	f7fe fd6c 	bl	80012f0 <HAL_GetTick>
 8002818:	0003      	movs	r3, r0
 800281a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800281c:	e008      	b.n	8002830 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800281e:	f7fe fd67 	bl	80012f0 <HAL_GetTick>
 8002822:	0002      	movs	r2, r0
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	2b02      	cmp	r3, #2
 800282a:	d901      	bls.n	8002830 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 800282c:	2303      	movs	r3, #3
 800282e:	e03e      	b.n	80028ae <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002830:	4b21      	ldr	r3, [pc, #132]	@ (80028b8 <HAL_RCC_OscConfig+0x604>)
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	2380      	movs	r3, #128	@ 0x80
 8002836:	049b      	lsls	r3, r3, #18
 8002838:	4013      	ands	r3, r2
 800283a:	d1f0      	bne.n	800281e <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 800283c:	4b1e      	ldr	r3, [pc, #120]	@ (80028b8 <HAL_RCC_OscConfig+0x604>)
 800283e:	68da      	ldr	r2, [r3, #12]
 8002840:	4b1d      	ldr	r3, [pc, #116]	@ (80028b8 <HAL_RCC_OscConfig+0x604>)
 8002842:	4923      	ldr	r1, [pc, #140]	@ (80028d0 <HAL_RCC_OscConfig+0x61c>)
 8002844:	400a      	ands	r2, r1
 8002846:	60da      	str	r2, [r3, #12]
 8002848:	e030      	b.n	80028ac <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	69db      	ldr	r3, [r3, #28]
 800284e:	2b01      	cmp	r3, #1
 8002850:	d101      	bne.n	8002856 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e02b      	b.n	80028ae <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002856:	4b18      	ldr	r3, [pc, #96]	@ (80028b8 <HAL_RCC_OscConfig+0x604>)
 8002858:	68db      	ldr	r3, [r3, #12]
 800285a:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	2203      	movs	r2, #3
 8002860:	401a      	ands	r2, r3
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6a1b      	ldr	r3, [r3, #32]
 8002866:	429a      	cmp	r2, r3
 8002868:	d11e      	bne.n	80028a8 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	2270      	movs	r2, #112	@ 0x70
 800286e:	401a      	ands	r2, r3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002874:	429a      	cmp	r2, r3
 8002876:	d117      	bne.n	80028a8 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002878:	697a      	ldr	r2, [r7, #20]
 800287a:	23fe      	movs	r3, #254	@ 0xfe
 800287c:	01db      	lsls	r3, r3, #7
 800287e:	401a      	ands	r2, r3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002884:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002886:	429a      	cmp	r2, r3
 8002888:	d10e      	bne.n	80028a8 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800288a:	697a      	ldr	r2, [r7, #20]
 800288c:	23f8      	movs	r3, #248	@ 0xf8
 800288e:	039b      	lsls	r3, r3, #14
 8002890:	401a      	ands	r2, r3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002896:	429a      	cmp	r2, r3
 8002898:	d106      	bne.n	80028a8 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	0f5b      	lsrs	r3, r3, #29
 800289e:	075a      	lsls	r2, r3, #29
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d001      	beq.n	80028ac <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e000      	b.n	80028ae <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 80028ac:	2300      	movs	r3, #0
}
 80028ae:	0018      	movs	r0, r3
 80028b0:	46bd      	mov	sp, r7
 80028b2:	b008      	add	sp, #32
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	46c0      	nop			@ (mov r8, r8)
 80028b8:	40021000 	.word	0x40021000
 80028bc:	40007000 	.word	0x40007000
 80028c0:	00001388 	.word	0x00001388
 80028c4:	efffffff 	.word	0xefffffff
 80028c8:	feffffff 	.word	0xfeffffff
 80028cc:	1fc1808c 	.word	0x1fc1808c
 80028d0:	effefffc 	.word	0xeffefffc

080028d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b084      	sub	sp, #16
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d101      	bne.n	80028e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e0e9      	b.n	8002abc <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028e8:	4b76      	ldr	r3, [pc, #472]	@ (8002ac4 <HAL_RCC_ClockConfig+0x1f0>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	2207      	movs	r2, #7
 80028ee:	4013      	ands	r3, r2
 80028f0:	683a      	ldr	r2, [r7, #0]
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d91e      	bls.n	8002934 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028f6:	4b73      	ldr	r3, [pc, #460]	@ (8002ac4 <HAL_RCC_ClockConfig+0x1f0>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	2207      	movs	r2, #7
 80028fc:	4393      	bics	r3, r2
 80028fe:	0019      	movs	r1, r3
 8002900:	4b70      	ldr	r3, [pc, #448]	@ (8002ac4 <HAL_RCC_ClockConfig+0x1f0>)
 8002902:	683a      	ldr	r2, [r7, #0]
 8002904:	430a      	orrs	r2, r1
 8002906:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002908:	f7fe fcf2 	bl	80012f0 <HAL_GetTick>
 800290c:	0003      	movs	r3, r0
 800290e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002910:	e009      	b.n	8002926 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002912:	f7fe fced 	bl	80012f0 <HAL_GetTick>
 8002916:	0002      	movs	r2, r0
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	4a6a      	ldr	r2, [pc, #424]	@ (8002ac8 <HAL_RCC_ClockConfig+0x1f4>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d901      	bls.n	8002926 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e0ca      	b.n	8002abc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002926:	4b67      	ldr	r3, [pc, #412]	@ (8002ac4 <HAL_RCC_ClockConfig+0x1f0>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	2207      	movs	r2, #7
 800292c:	4013      	ands	r3, r2
 800292e:	683a      	ldr	r2, [r7, #0]
 8002930:	429a      	cmp	r2, r3
 8002932:	d1ee      	bne.n	8002912 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	2202      	movs	r2, #2
 800293a:	4013      	ands	r3, r2
 800293c:	d015      	beq.n	800296a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	2204      	movs	r2, #4
 8002944:	4013      	ands	r3, r2
 8002946:	d006      	beq.n	8002956 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002948:	4b60      	ldr	r3, [pc, #384]	@ (8002acc <HAL_RCC_ClockConfig+0x1f8>)
 800294a:	689a      	ldr	r2, [r3, #8]
 800294c:	4b5f      	ldr	r3, [pc, #380]	@ (8002acc <HAL_RCC_ClockConfig+0x1f8>)
 800294e:	21e0      	movs	r1, #224	@ 0xe0
 8002950:	01c9      	lsls	r1, r1, #7
 8002952:	430a      	orrs	r2, r1
 8002954:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002956:	4b5d      	ldr	r3, [pc, #372]	@ (8002acc <HAL_RCC_ClockConfig+0x1f8>)
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	4a5d      	ldr	r2, [pc, #372]	@ (8002ad0 <HAL_RCC_ClockConfig+0x1fc>)
 800295c:	4013      	ands	r3, r2
 800295e:	0019      	movs	r1, r3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	689a      	ldr	r2, [r3, #8]
 8002964:	4b59      	ldr	r3, [pc, #356]	@ (8002acc <HAL_RCC_ClockConfig+0x1f8>)
 8002966:	430a      	orrs	r2, r1
 8002968:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	2201      	movs	r2, #1
 8002970:	4013      	ands	r3, r2
 8002972:	d057      	beq.n	8002a24 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	2b01      	cmp	r3, #1
 800297a:	d107      	bne.n	800298c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800297c:	4b53      	ldr	r3, [pc, #332]	@ (8002acc <HAL_RCC_ClockConfig+0x1f8>)
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	2380      	movs	r3, #128	@ 0x80
 8002982:	029b      	lsls	r3, r3, #10
 8002984:	4013      	ands	r3, r2
 8002986:	d12b      	bne.n	80029e0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	e097      	b.n	8002abc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	2b02      	cmp	r3, #2
 8002992:	d107      	bne.n	80029a4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002994:	4b4d      	ldr	r3, [pc, #308]	@ (8002acc <HAL_RCC_ClockConfig+0x1f8>)
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	2380      	movs	r3, #128	@ 0x80
 800299a:	049b      	lsls	r3, r3, #18
 800299c:	4013      	ands	r3, r2
 800299e:	d11f      	bne.n	80029e0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e08b      	b.n	8002abc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d107      	bne.n	80029bc <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029ac:	4b47      	ldr	r3, [pc, #284]	@ (8002acc <HAL_RCC_ClockConfig+0x1f8>)
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	2380      	movs	r3, #128	@ 0x80
 80029b2:	00db      	lsls	r3, r3, #3
 80029b4:	4013      	ands	r3, r2
 80029b6:	d113      	bne.n	80029e0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	e07f      	b.n	8002abc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	2b03      	cmp	r3, #3
 80029c2:	d106      	bne.n	80029d2 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80029c4:	4b41      	ldr	r3, [pc, #260]	@ (8002acc <HAL_RCC_ClockConfig+0x1f8>)
 80029c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029c8:	2202      	movs	r2, #2
 80029ca:	4013      	ands	r3, r2
 80029cc:	d108      	bne.n	80029e0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e074      	b.n	8002abc <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029d2:	4b3e      	ldr	r3, [pc, #248]	@ (8002acc <HAL_RCC_ClockConfig+0x1f8>)
 80029d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029d6:	2202      	movs	r2, #2
 80029d8:	4013      	ands	r3, r2
 80029da:	d101      	bne.n	80029e0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e06d      	b.n	8002abc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80029e0:	4b3a      	ldr	r3, [pc, #232]	@ (8002acc <HAL_RCC_ClockConfig+0x1f8>)
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	2207      	movs	r2, #7
 80029e6:	4393      	bics	r3, r2
 80029e8:	0019      	movs	r1, r3
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	685a      	ldr	r2, [r3, #4]
 80029ee:	4b37      	ldr	r3, [pc, #220]	@ (8002acc <HAL_RCC_ClockConfig+0x1f8>)
 80029f0:	430a      	orrs	r2, r1
 80029f2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029f4:	f7fe fc7c 	bl	80012f0 <HAL_GetTick>
 80029f8:	0003      	movs	r3, r0
 80029fa:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029fc:	e009      	b.n	8002a12 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029fe:	f7fe fc77 	bl	80012f0 <HAL_GetTick>
 8002a02:	0002      	movs	r2, r0
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	1ad3      	subs	r3, r2, r3
 8002a08:	4a2f      	ldr	r2, [pc, #188]	@ (8002ac8 <HAL_RCC_ClockConfig+0x1f4>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d901      	bls.n	8002a12 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e054      	b.n	8002abc <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a12:	4b2e      	ldr	r3, [pc, #184]	@ (8002acc <HAL_RCC_ClockConfig+0x1f8>)
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	2238      	movs	r2, #56	@ 0x38
 8002a18:	401a      	ands	r2, r3
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	00db      	lsls	r3, r3, #3
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d1ec      	bne.n	80029fe <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a24:	4b27      	ldr	r3, [pc, #156]	@ (8002ac4 <HAL_RCC_ClockConfig+0x1f0>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	2207      	movs	r2, #7
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	683a      	ldr	r2, [r7, #0]
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d21e      	bcs.n	8002a70 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a32:	4b24      	ldr	r3, [pc, #144]	@ (8002ac4 <HAL_RCC_ClockConfig+0x1f0>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	2207      	movs	r2, #7
 8002a38:	4393      	bics	r3, r2
 8002a3a:	0019      	movs	r1, r3
 8002a3c:	4b21      	ldr	r3, [pc, #132]	@ (8002ac4 <HAL_RCC_ClockConfig+0x1f0>)
 8002a3e:	683a      	ldr	r2, [r7, #0]
 8002a40:	430a      	orrs	r2, r1
 8002a42:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002a44:	f7fe fc54 	bl	80012f0 <HAL_GetTick>
 8002a48:	0003      	movs	r3, r0
 8002a4a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002a4c:	e009      	b.n	8002a62 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a4e:	f7fe fc4f 	bl	80012f0 <HAL_GetTick>
 8002a52:	0002      	movs	r2, r0
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	1ad3      	subs	r3, r2, r3
 8002a58:	4a1b      	ldr	r2, [pc, #108]	@ (8002ac8 <HAL_RCC_ClockConfig+0x1f4>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d901      	bls.n	8002a62 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002a5e:	2303      	movs	r3, #3
 8002a60:	e02c      	b.n	8002abc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002a62:	4b18      	ldr	r3, [pc, #96]	@ (8002ac4 <HAL_RCC_ClockConfig+0x1f0>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	2207      	movs	r2, #7
 8002a68:	4013      	ands	r3, r2
 8002a6a:	683a      	ldr	r2, [r7, #0]
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d1ee      	bne.n	8002a4e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	2204      	movs	r2, #4
 8002a76:	4013      	ands	r3, r2
 8002a78:	d009      	beq.n	8002a8e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002a7a:	4b14      	ldr	r3, [pc, #80]	@ (8002acc <HAL_RCC_ClockConfig+0x1f8>)
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	4a15      	ldr	r2, [pc, #84]	@ (8002ad4 <HAL_RCC_ClockConfig+0x200>)
 8002a80:	4013      	ands	r3, r2
 8002a82:	0019      	movs	r1, r3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	68da      	ldr	r2, [r3, #12]
 8002a88:	4b10      	ldr	r3, [pc, #64]	@ (8002acc <HAL_RCC_ClockConfig+0x1f8>)
 8002a8a:	430a      	orrs	r2, r1
 8002a8c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002a8e:	f000 f829 	bl	8002ae4 <HAL_RCC_GetSysClockFreq>
 8002a92:	0001      	movs	r1, r0
 8002a94:	4b0d      	ldr	r3, [pc, #52]	@ (8002acc <HAL_RCC_ClockConfig+0x1f8>)
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	0a1b      	lsrs	r3, r3, #8
 8002a9a:	220f      	movs	r2, #15
 8002a9c:	401a      	ands	r2, r3
 8002a9e:	4b0e      	ldr	r3, [pc, #56]	@ (8002ad8 <HAL_RCC_ClockConfig+0x204>)
 8002aa0:	0092      	lsls	r2, r2, #2
 8002aa2:	58d3      	ldr	r3, [r2, r3]
 8002aa4:	221f      	movs	r2, #31
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	000a      	movs	r2, r1
 8002aaa:	40da      	lsrs	r2, r3
 8002aac:	4b0b      	ldr	r3, [pc, #44]	@ (8002adc <HAL_RCC_ClockConfig+0x208>)
 8002aae:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002ab0:	4b0b      	ldr	r3, [pc, #44]	@ (8002ae0 <HAL_RCC_ClockConfig+0x20c>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	0018      	movs	r0, r3
 8002ab6:	f7fe fbbf 	bl	8001238 <HAL_InitTick>
 8002aba:	0003      	movs	r3, r0
}
 8002abc:	0018      	movs	r0, r3
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	b004      	add	sp, #16
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	40022000 	.word	0x40022000
 8002ac8:	00001388 	.word	0x00001388
 8002acc:	40021000 	.word	0x40021000
 8002ad0:	fffff0ff 	.word	0xfffff0ff
 8002ad4:	ffff8fff 	.word	0xffff8fff
 8002ad8:	080054b0 	.word	0x080054b0
 8002adc:	20000300 	.word	0x20000300
 8002ae0:	20000304 	.word	0x20000304

08002ae4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b086      	sub	sp, #24
 8002ae8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002aea:	4b3c      	ldr	r3, [pc, #240]	@ (8002bdc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	2238      	movs	r2, #56	@ 0x38
 8002af0:	4013      	ands	r3, r2
 8002af2:	d10f      	bne.n	8002b14 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002af4:	4b39      	ldr	r3, [pc, #228]	@ (8002bdc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	0adb      	lsrs	r3, r3, #11
 8002afa:	2207      	movs	r2, #7
 8002afc:	4013      	ands	r3, r2
 8002afe:	2201      	movs	r2, #1
 8002b00:	409a      	lsls	r2, r3
 8002b02:	0013      	movs	r3, r2
 8002b04:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002b06:	6839      	ldr	r1, [r7, #0]
 8002b08:	4835      	ldr	r0, [pc, #212]	@ (8002be0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002b0a:	f7fd fb0d 	bl	8000128 <__udivsi3>
 8002b0e:	0003      	movs	r3, r0
 8002b10:	613b      	str	r3, [r7, #16]
 8002b12:	e05d      	b.n	8002bd0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b14:	4b31      	ldr	r3, [pc, #196]	@ (8002bdc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	2238      	movs	r2, #56	@ 0x38
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	2b08      	cmp	r3, #8
 8002b1e:	d102      	bne.n	8002b26 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002b20:	4b30      	ldr	r3, [pc, #192]	@ (8002be4 <HAL_RCC_GetSysClockFreq+0x100>)
 8002b22:	613b      	str	r3, [r7, #16]
 8002b24:	e054      	b.n	8002bd0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b26:	4b2d      	ldr	r3, [pc, #180]	@ (8002bdc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	2238      	movs	r2, #56	@ 0x38
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	2b10      	cmp	r3, #16
 8002b30:	d138      	bne.n	8002ba4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002b32:	4b2a      	ldr	r3, [pc, #168]	@ (8002bdc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	2203      	movs	r2, #3
 8002b38:	4013      	ands	r3, r2
 8002b3a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b3c:	4b27      	ldr	r3, [pc, #156]	@ (8002bdc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	091b      	lsrs	r3, r3, #4
 8002b42:	2207      	movs	r2, #7
 8002b44:	4013      	ands	r3, r2
 8002b46:	3301      	adds	r3, #1
 8002b48:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2b03      	cmp	r3, #3
 8002b4e:	d10d      	bne.n	8002b6c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002b50:	68b9      	ldr	r1, [r7, #8]
 8002b52:	4824      	ldr	r0, [pc, #144]	@ (8002be4 <HAL_RCC_GetSysClockFreq+0x100>)
 8002b54:	f7fd fae8 	bl	8000128 <__udivsi3>
 8002b58:	0003      	movs	r3, r0
 8002b5a:	0019      	movs	r1, r3
 8002b5c:	4b1f      	ldr	r3, [pc, #124]	@ (8002bdc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	0a1b      	lsrs	r3, r3, #8
 8002b62:	227f      	movs	r2, #127	@ 0x7f
 8002b64:	4013      	ands	r3, r2
 8002b66:	434b      	muls	r3, r1
 8002b68:	617b      	str	r3, [r7, #20]
        break;
 8002b6a:	e00d      	b.n	8002b88 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002b6c:	68b9      	ldr	r1, [r7, #8]
 8002b6e:	481c      	ldr	r0, [pc, #112]	@ (8002be0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002b70:	f7fd fada 	bl	8000128 <__udivsi3>
 8002b74:	0003      	movs	r3, r0
 8002b76:	0019      	movs	r1, r3
 8002b78:	4b18      	ldr	r3, [pc, #96]	@ (8002bdc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	0a1b      	lsrs	r3, r3, #8
 8002b7e:	227f      	movs	r2, #127	@ 0x7f
 8002b80:	4013      	ands	r3, r2
 8002b82:	434b      	muls	r3, r1
 8002b84:	617b      	str	r3, [r7, #20]
        break;
 8002b86:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002b88:	4b14      	ldr	r3, [pc, #80]	@ (8002bdc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	0f5b      	lsrs	r3, r3, #29
 8002b8e:	2207      	movs	r2, #7
 8002b90:	4013      	ands	r3, r2
 8002b92:	3301      	adds	r3, #1
 8002b94:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002b96:	6879      	ldr	r1, [r7, #4]
 8002b98:	6978      	ldr	r0, [r7, #20]
 8002b9a:	f7fd fac5 	bl	8000128 <__udivsi3>
 8002b9e:	0003      	movs	r3, r0
 8002ba0:	613b      	str	r3, [r7, #16]
 8002ba2:	e015      	b.n	8002bd0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002ba4:	4b0d      	ldr	r3, [pc, #52]	@ (8002bdc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	2238      	movs	r2, #56	@ 0x38
 8002baa:	4013      	ands	r3, r2
 8002bac:	2b20      	cmp	r3, #32
 8002bae:	d103      	bne.n	8002bb8 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002bb0:	2380      	movs	r3, #128	@ 0x80
 8002bb2:	021b      	lsls	r3, r3, #8
 8002bb4:	613b      	str	r3, [r7, #16]
 8002bb6:	e00b      	b.n	8002bd0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002bb8:	4b08      	ldr	r3, [pc, #32]	@ (8002bdc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	2238      	movs	r2, #56	@ 0x38
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	2b18      	cmp	r3, #24
 8002bc2:	d103      	bne.n	8002bcc <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002bc4:	23fa      	movs	r3, #250	@ 0xfa
 8002bc6:	01db      	lsls	r3, r3, #7
 8002bc8:	613b      	str	r3, [r7, #16]
 8002bca:	e001      	b.n	8002bd0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002bd0:	693b      	ldr	r3, [r7, #16]
}
 8002bd2:	0018      	movs	r0, r3
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	b006      	add	sp, #24
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	46c0      	nop			@ (mov r8, r8)
 8002bdc:	40021000 	.word	0x40021000
 8002be0:	00f42400 	.word	0x00f42400
 8002be4:	007a1200 	.word	0x007a1200

08002be8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bec:	4b02      	ldr	r3, [pc, #8]	@ (8002bf8 <HAL_RCC_GetHCLKFreq+0x10>)
 8002bee:	681b      	ldr	r3, [r3, #0]
}
 8002bf0:	0018      	movs	r0, r3
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	46c0      	nop			@ (mov r8, r8)
 8002bf8:	20000300 	.word	0x20000300

08002bfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bfc:	b5b0      	push	{r4, r5, r7, lr}
 8002bfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002c00:	f7ff fff2 	bl	8002be8 <HAL_RCC_GetHCLKFreq>
 8002c04:	0004      	movs	r4, r0
 8002c06:	f7ff fb49 	bl	800229c <LL_RCC_GetAPB1Prescaler>
 8002c0a:	0003      	movs	r3, r0
 8002c0c:	0b1a      	lsrs	r2, r3, #12
 8002c0e:	4b05      	ldr	r3, [pc, #20]	@ (8002c24 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002c10:	0092      	lsls	r2, r2, #2
 8002c12:	58d3      	ldr	r3, [r2, r3]
 8002c14:	221f      	movs	r2, #31
 8002c16:	4013      	ands	r3, r2
 8002c18:	40dc      	lsrs	r4, r3
 8002c1a:	0023      	movs	r3, r4
}
 8002c1c:	0018      	movs	r0, r3
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bdb0      	pop	{r4, r5, r7, pc}
 8002c22:	46c0      	nop			@ (mov r8, r8)
 8002c24:	080054f0 	.word	0x080054f0

08002c28 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b086      	sub	sp, #24
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002c30:	2313      	movs	r3, #19
 8002c32:	18fb      	adds	r3, r7, r3
 8002c34:	2200      	movs	r2, #0
 8002c36:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002c38:	2312      	movs	r3, #18
 8002c3a:	18fb      	adds	r3, r7, r3
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	2380      	movs	r3, #128	@ 0x80
 8002c46:	029b      	lsls	r3, r3, #10
 8002c48:	4013      	ands	r3, r2
 8002c4a:	d100      	bne.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002c4c:	e0a3      	b.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c4e:	2011      	movs	r0, #17
 8002c50:	183b      	adds	r3, r7, r0
 8002c52:	2200      	movs	r2, #0
 8002c54:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c56:	4b7f      	ldr	r3, [pc, #508]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002c58:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002c5a:	2380      	movs	r3, #128	@ 0x80
 8002c5c:	055b      	lsls	r3, r3, #21
 8002c5e:	4013      	ands	r3, r2
 8002c60:	d110      	bne.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c62:	4b7c      	ldr	r3, [pc, #496]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002c64:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002c66:	4b7b      	ldr	r3, [pc, #492]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002c68:	2180      	movs	r1, #128	@ 0x80
 8002c6a:	0549      	lsls	r1, r1, #21
 8002c6c:	430a      	orrs	r2, r1
 8002c6e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002c70:	4b78      	ldr	r3, [pc, #480]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002c72:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002c74:	2380      	movs	r3, #128	@ 0x80
 8002c76:	055b      	lsls	r3, r3, #21
 8002c78:	4013      	ands	r3, r2
 8002c7a:	60bb      	str	r3, [r7, #8]
 8002c7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c7e:	183b      	adds	r3, r7, r0
 8002c80:	2201      	movs	r2, #1
 8002c82:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c84:	4b74      	ldr	r3, [pc, #464]	@ (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	4b73      	ldr	r3, [pc, #460]	@ (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002c8a:	2180      	movs	r1, #128	@ 0x80
 8002c8c:	0049      	lsls	r1, r1, #1
 8002c8e:	430a      	orrs	r2, r1
 8002c90:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c92:	f7fe fb2d 	bl	80012f0 <HAL_GetTick>
 8002c96:	0003      	movs	r3, r0
 8002c98:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c9a:	e00b      	b.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c9c:	f7fe fb28 	bl	80012f0 <HAL_GetTick>
 8002ca0:	0002      	movs	r2, r0
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	d904      	bls.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002caa:	2313      	movs	r3, #19
 8002cac:	18fb      	adds	r3, r7, r3
 8002cae:	2203      	movs	r2, #3
 8002cb0:	701a      	strb	r2, [r3, #0]
        break;
 8002cb2:	e005      	b.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002cb4:	4b68      	ldr	r3, [pc, #416]	@ (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	2380      	movs	r3, #128	@ 0x80
 8002cba:	005b      	lsls	r3, r3, #1
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	d0ed      	beq.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002cc0:	2313      	movs	r3, #19
 8002cc2:	18fb      	adds	r3, r7, r3
 8002cc4:	781b      	ldrb	r3, [r3, #0]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d154      	bne.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002cca:	4b62      	ldr	r3, [pc, #392]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002ccc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002cce:	23c0      	movs	r3, #192	@ 0xc0
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d019      	beq.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	695b      	ldr	r3, [r3, #20]
 8002ce0:	697a      	ldr	r2, [r7, #20]
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d014      	beq.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002ce6:	4b5b      	ldr	r3, [pc, #364]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002ce8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cea:	4a5c      	ldr	r2, [pc, #368]	@ (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002cec:	4013      	ands	r3, r2
 8002cee:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002cf0:	4b58      	ldr	r3, [pc, #352]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002cf2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002cf4:	4b57      	ldr	r3, [pc, #348]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002cf6:	2180      	movs	r1, #128	@ 0x80
 8002cf8:	0249      	lsls	r1, r1, #9
 8002cfa:	430a      	orrs	r2, r1
 8002cfc:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002cfe:	4b55      	ldr	r3, [pc, #340]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002d00:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002d02:	4b54      	ldr	r3, [pc, #336]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002d04:	4956      	ldr	r1, [pc, #344]	@ (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8002d06:	400a      	ands	r2, r1
 8002d08:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002d0a:	4b52      	ldr	r3, [pc, #328]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002d0c:	697a      	ldr	r2, [r7, #20]
 8002d0e:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	2201      	movs	r2, #1
 8002d14:	4013      	ands	r3, r2
 8002d16:	d016      	beq.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d18:	f7fe faea 	bl	80012f0 <HAL_GetTick>
 8002d1c:	0003      	movs	r3, r0
 8002d1e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d20:	e00c      	b.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d22:	f7fe fae5 	bl	80012f0 <HAL_GetTick>
 8002d26:	0002      	movs	r2, r0
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	1ad3      	subs	r3, r2, r3
 8002d2c:	4a4d      	ldr	r2, [pc, #308]	@ (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d904      	bls.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002d32:	2313      	movs	r3, #19
 8002d34:	18fb      	adds	r3, r7, r3
 8002d36:	2203      	movs	r2, #3
 8002d38:	701a      	strb	r2, [r3, #0]
            break;
 8002d3a:	e004      	b.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d3c:	4b45      	ldr	r3, [pc, #276]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002d3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d40:	2202      	movs	r2, #2
 8002d42:	4013      	ands	r3, r2
 8002d44:	d0ed      	beq.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002d46:	2313      	movs	r3, #19
 8002d48:	18fb      	adds	r3, r7, r3
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d10a      	bne.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d50:	4b40      	ldr	r3, [pc, #256]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002d52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d54:	4a41      	ldr	r2, [pc, #260]	@ (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002d56:	4013      	ands	r3, r2
 8002d58:	0019      	movs	r1, r3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	695a      	ldr	r2, [r3, #20]
 8002d5e:	4b3d      	ldr	r3, [pc, #244]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002d60:	430a      	orrs	r2, r1
 8002d62:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002d64:	e00c      	b.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002d66:	2312      	movs	r3, #18
 8002d68:	18fb      	adds	r3, r7, r3
 8002d6a:	2213      	movs	r2, #19
 8002d6c:	18ba      	adds	r2, r7, r2
 8002d6e:	7812      	ldrb	r2, [r2, #0]
 8002d70:	701a      	strb	r2, [r3, #0]
 8002d72:	e005      	b.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d74:	2312      	movs	r3, #18
 8002d76:	18fb      	adds	r3, r7, r3
 8002d78:	2213      	movs	r2, #19
 8002d7a:	18ba      	adds	r2, r7, r2
 8002d7c:	7812      	ldrb	r2, [r2, #0]
 8002d7e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002d80:	2311      	movs	r3, #17
 8002d82:	18fb      	adds	r3, r7, r3
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d105      	bne.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d8a:	4b32      	ldr	r3, [pc, #200]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002d8c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002d8e:	4b31      	ldr	r3, [pc, #196]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002d90:	4935      	ldr	r1, [pc, #212]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d92:	400a      	ands	r2, r1
 8002d94:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	d009      	beq.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002da0:	4b2c      	ldr	r3, [pc, #176]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002da2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002da4:	2203      	movs	r2, #3
 8002da6:	4393      	bics	r3, r2
 8002da8:	0019      	movs	r1, r3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	685a      	ldr	r2, [r3, #4]
 8002dae:	4b29      	ldr	r3, [pc, #164]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002db0:	430a      	orrs	r2, r1
 8002db2:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	2220      	movs	r2, #32
 8002dba:	4013      	ands	r3, r2
 8002dbc:	d009      	beq.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002dbe:	4b25      	ldr	r3, [pc, #148]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002dc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dc2:	4a2a      	ldr	r2, [pc, #168]	@ (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	0019      	movs	r1, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	689a      	ldr	r2, [r3, #8]
 8002dcc:	4b21      	ldr	r3, [pc, #132]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002dce:	430a      	orrs	r2, r1
 8002dd0:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	2380      	movs	r3, #128	@ 0x80
 8002dd8:	01db      	lsls	r3, r3, #7
 8002dda:	4013      	ands	r3, r2
 8002ddc:	d015      	beq.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002dde:	4b1d      	ldr	r3, [pc, #116]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002de0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	0899      	lsrs	r1, r3, #2
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	691a      	ldr	r2, [r3, #16]
 8002dea:	4b1a      	ldr	r3, [pc, #104]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002dec:	430a      	orrs	r2, r1
 8002dee:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	691a      	ldr	r2, [r3, #16]
 8002df4:	2380      	movs	r3, #128	@ 0x80
 8002df6:	05db      	lsls	r3, r3, #23
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d106      	bne.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002dfc:	4b15      	ldr	r3, [pc, #84]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002dfe:	68da      	ldr	r2, [r3, #12]
 8002e00:	4b14      	ldr	r3, [pc, #80]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002e02:	2180      	movs	r1, #128	@ 0x80
 8002e04:	0249      	lsls	r1, r1, #9
 8002e06:	430a      	orrs	r2, r1
 8002e08:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	2380      	movs	r3, #128	@ 0x80
 8002e10:	011b      	lsls	r3, r3, #4
 8002e12:	4013      	ands	r3, r2
 8002e14:	d016      	beq.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002e16:	4b0f      	ldr	r3, [pc, #60]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002e18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e1a:	4a15      	ldr	r2, [pc, #84]	@ (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	0019      	movs	r1, r3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	68da      	ldr	r2, [r3, #12]
 8002e24:	4b0b      	ldr	r3, [pc, #44]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002e26:	430a      	orrs	r2, r1
 8002e28:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	68da      	ldr	r2, [r3, #12]
 8002e2e:	2380      	movs	r3, #128	@ 0x80
 8002e30:	01db      	lsls	r3, r3, #7
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d106      	bne.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002e36:	4b07      	ldr	r3, [pc, #28]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002e38:	68da      	ldr	r2, [r3, #12]
 8002e3a:	4b06      	ldr	r3, [pc, #24]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002e3c:	2180      	movs	r1, #128	@ 0x80
 8002e3e:	0249      	lsls	r1, r1, #9
 8002e40:	430a      	orrs	r2, r1
 8002e42:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002e44:	2312      	movs	r3, #18
 8002e46:	18fb      	adds	r3, r7, r3
 8002e48:	781b      	ldrb	r3, [r3, #0]
}
 8002e4a:	0018      	movs	r0, r3
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	b006      	add	sp, #24
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	46c0      	nop			@ (mov r8, r8)
 8002e54:	40021000 	.word	0x40021000
 8002e58:	40007000 	.word	0x40007000
 8002e5c:	fffffcff 	.word	0xfffffcff
 8002e60:	fffeffff 	.word	0xfffeffff
 8002e64:	00001388 	.word	0x00001388
 8002e68:	efffffff 	.word	0xefffffff
 8002e6c:	ffffcfff 	.word	0xffffcfff
 8002e70:	ffff3fff 	.word	0xffff3fff

08002e74 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b084      	sub	sp, #16
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d101      	bne.n	8002e86 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e0a8      	b.n	8002fd8 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d109      	bne.n	8002ea2 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	685a      	ldr	r2, [r3, #4]
 8002e92:	2382      	movs	r3, #130	@ 0x82
 8002e94:	005b      	lsls	r3, r3, #1
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d009      	beq.n	8002eae <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	61da      	str	r2, [r3, #28]
 8002ea0:	e005      	b.n	8002eae <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	225d      	movs	r2, #93	@ 0x5d
 8002eb8:	5c9b      	ldrb	r3, [r3, r2]
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d107      	bne.n	8002ed0 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	225c      	movs	r2, #92	@ 0x5c
 8002ec4:	2100      	movs	r1, #0
 8002ec6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	0018      	movs	r0, r3
 8002ecc:	f7fe f806 	bl	8000edc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	225d      	movs	r2, #93	@ 0x5d
 8002ed4:	2102      	movs	r1, #2
 8002ed6:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	2140      	movs	r1, #64	@ 0x40
 8002ee4:	438a      	bics	r2, r1
 8002ee6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	68da      	ldr	r2, [r3, #12]
 8002eec:	23e0      	movs	r3, #224	@ 0xe0
 8002eee:	00db      	lsls	r3, r3, #3
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d902      	bls.n	8002efa <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	60fb      	str	r3, [r7, #12]
 8002ef8:	e002      	b.n	8002f00 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002efa:	2380      	movs	r3, #128	@ 0x80
 8002efc:	015b      	lsls	r3, r3, #5
 8002efe:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	68da      	ldr	r2, [r3, #12]
 8002f04:	23f0      	movs	r3, #240	@ 0xf0
 8002f06:	011b      	lsls	r3, r3, #4
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d008      	beq.n	8002f1e <HAL_SPI_Init+0xaa>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	68da      	ldr	r2, [r3, #12]
 8002f10:	23e0      	movs	r3, #224	@ 0xe0
 8002f12:	00db      	lsls	r3, r3, #3
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d002      	beq.n	8002f1e <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	685a      	ldr	r2, [r3, #4]
 8002f22:	2382      	movs	r3, #130	@ 0x82
 8002f24:	005b      	lsls	r3, r3, #1
 8002f26:	401a      	ands	r2, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6899      	ldr	r1, [r3, #8]
 8002f2c:	2384      	movs	r3, #132	@ 0x84
 8002f2e:	021b      	lsls	r3, r3, #8
 8002f30:	400b      	ands	r3, r1
 8002f32:	431a      	orrs	r2, r3
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	691b      	ldr	r3, [r3, #16]
 8002f38:	2102      	movs	r1, #2
 8002f3a:	400b      	ands	r3, r1
 8002f3c:	431a      	orrs	r2, r3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	695b      	ldr	r3, [r3, #20]
 8002f42:	2101      	movs	r1, #1
 8002f44:	400b      	ands	r3, r1
 8002f46:	431a      	orrs	r2, r3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6999      	ldr	r1, [r3, #24]
 8002f4c:	2380      	movs	r3, #128	@ 0x80
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	400b      	ands	r3, r1
 8002f52:	431a      	orrs	r2, r3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	69db      	ldr	r3, [r3, #28]
 8002f58:	2138      	movs	r1, #56	@ 0x38
 8002f5a:	400b      	ands	r3, r1
 8002f5c:	431a      	orrs	r2, r3
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6a1b      	ldr	r3, [r3, #32]
 8002f62:	2180      	movs	r1, #128	@ 0x80
 8002f64:	400b      	ands	r3, r1
 8002f66:	431a      	orrs	r2, r3
 8002f68:	0011      	movs	r1, r2
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002f6e:	2380      	movs	r3, #128	@ 0x80
 8002f70:	019b      	lsls	r3, r3, #6
 8002f72:	401a      	ands	r2, r3
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	430a      	orrs	r2, r1
 8002f7a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	699b      	ldr	r3, [r3, #24]
 8002f80:	0c1b      	lsrs	r3, r3, #16
 8002f82:	2204      	movs	r2, #4
 8002f84:	401a      	ands	r2, r3
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f8a:	2110      	movs	r1, #16
 8002f8c:	400b      	ands	r3, r1
 8002f8e:	431a      	orrs	r2, r3
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f94:	2108      	movs	r1, #8
 8002f96:	400b      	ands	r3, r1
 8002f98:	431a      	orrs	r2, r3
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	68d9      	ldr	r1, [r3, #12]
 8002f9e:	23f0      	movs	r3, #240	@ 0xf0
 8002fa0:	011b      	lsls	r3, r3, #4
 8002fa2:	400b      	ands	r3, r1
 8002fa4:	431a      	orrs	r2, r3
 8002fa6:	0011      	movs	r1, r2
 8002fa8:	68fa      	ldr	r2, [r7, #12]
 8002faa:	2380      	movs	r3, #128	@ 0x80
 8002fac:	015b      	lsls	r3, r3, #5
 8002fae:	401a      	ands	r2, r3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	430a      	orrs	r2, r1
 8002fb6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	69da      	ldr	r2, [r3, #28]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4907      	ldr	r1, [pc, #28]	@ (8002fe0 <HAL_SPI_Init+0x16c>)
 8002fc4:	400a      	ands	r2, r1
 8002fc6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	225d      	movs	r2, #93	@ 0x5d
 8002fd2:	2101      	movs	r1, #1
 8002fd4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002fd6:	2300      	movs	r3, #0
}
 8002fd8:	0018      	movs	r0, r3
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	b004      	add	sp, #16
 8002fde:	bd80      	pop	{r7, pc}
 8002fe0:	fffff7ff 	.word	0xfffff7ff

08002fe4 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b086      	sub	sp, #24
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	60f8      	str	r0, [r7, #12]
 8002fec:	60b9      	str	r1, [r7, #8]
 8002fee:	1dbb      	adds	r3, r7, #6
 8002ff0:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002ff2:	2117      	movs	r1, #23
 8002ff4:	187b      	adds	r3, r7, r1
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	701a      	strb	r2, [r3, #0]


  if (hspi->State != HAL_SPI_STATE_READY)
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	225d      	movs	r2, #93	@ 0x5d
 8002ffe:	5c9b      	ldrb	r3, [r3, r2]
 8003000:	b2db      	uxtb	r3, r3
 8003002:	2b01      	cmp	r3, #1
 8003004:	d003      	beq.n	800300e <HAL_SPI_Receive_IT+0x2a>
  {
    errorcode = HAL_BUSY;
 8003006:	187b      	adds	r3, r7, r1
 8003008:	2202      	movs	r2, #2
 800300a:	701a      	strb	r2, [r3, #0]
    goto error;
 800300c:	e09c      	b.n	8003148 <HAL_SPI_Receive_IT+0x164>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d112      	bne.n	800303c <HAL_SPI_Receive_IT+0x58>
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	685a      	ldr	r2, [r3, #4]
 800301a:	2382      	movs	r3, #130	@ 0x82
 800301c:	005b      	lsls	r3, r3, #1
 800301e:	429a      	cmp	r2, r3
 8003020:	d10c      	bne.n	800303c <HAL_SPI_Receive_IT+0x58>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	225d      	movs	r2, #93	@ 0x5d
 8003026:	2104      	movs	r1, #4
 8003028:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 800302a:	1dbb      	adds	r3, r7, #6
 800302c:	881b      	ldrh	r3, [r3, #0]
 800302e:	68ba      	ldr	r2, [r7, #8]
 8003030:	68b9      	ldr	r1, [r7, #8]
 8003032:	68f8      	ldr	r0, [r7, #12]
 8003034:	f000 f898 	bl	8003168 <HAL_SPI_TransmitReceive_IT>
 8003038:	0003      	movs	r3, r0
 800303a:	e088      	b.n	800314e <HAL_SPI_Receive_IT+0x16a>
  }


  if ((pData == NULL) || (Size == 0U))
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d003      	beq.n	800304a <HAL_SPI_Receive_IT+0x66>
 8003042:	1dbb      	adds	r3, r7, #6
 8003044:	881b      	ldrh	r3, [r3, #0]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d104      	bne.n	8003054 <HAL_SPI_Receive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 800304a:	2317      	movs	r3, #23
 800304c:	18fb      	adds	r3, r7, r3
 800304e:	2201      	movs	r2, #1
 8003050:	701a      	strb	r2, [r3, #0]
    goto error;
 8003052:	e079      	b.n	8003148 <HAL_SPI_Receive_IT+0x164>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	225c      	movs	r2, #92	@ 0x5c
 8003058:	5c9b      	ldrb	r3, [r3, r2]
 800305a:	2b01      	cmp	r3, #1
 800305c:	d101      	bne.n	8003062 <HAL_SPI_Receive_IT+0x7e>
 800305e:	2302      	movs	r3, #2
 8003060:	e075      	b.n	800314e <HAL_SPI_Receive_IT+0x16a>
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	225c      	movs	r2, #92	@ 0x5c
 8003066:	2101      	movs	r1, #1
 8003068:	5499      	strb	r1, [r3, r2]

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	225d      	movs	r2, #93	@ 0x5d
 800306e:	2104      	movs	r1, #4
 8003070:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2200      	movs	r2, #0
 8003076:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	68ba      	ldr	r2, [r7, #8]
 800307c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	1dba      	adds	r2, r7, #6
 8003082:	2144      	movs	r1, #68	@ 0x44
 8003084:	8812      	ldrh	r2, [r2, #0]
 8003086:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	1dba      	adds	r2, r7, #6
 800308c:	2146      	movs	r1, #70	@ 0x46
 800308e:	8812      	ldrh	r2, [r2, #0]
 8003090:	525a      	strh	r2, [r3, r1]

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2200      	movs	r2, #0
 8003096:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2200      	movs	r2, #0
 800309c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2200      	movs	r2, #0
 80030a2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2200      	movs	r2, #0
 80030a8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	68da      	ldr	r2, [r3, #12]
 80030ae:	23e0      	movs	r3, #224	@ 0xe0
 80030b0:	00db      	lsls	r3, r3, #3
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d90b      	bls.n	80030ce <HAL_SPI_Receive_IT+0xea>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	685a      	ldr	r2, [r3, #4]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4925      	ldr	r1, [pc, #148]	@ (8003158 <HAL_SPI_Receive_IT+0x174>)
 80030c2:	400a      	ands	r2, r1
 80030c4:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	4a24      	ldr	r2, [pc, #144]	@ (800315c <HAL_SPI_Receive_IT+0x178>)
 80030ca:	64da      	str	r2, [r3, #76]	@ 0x4c
 80030cc:	e00b      	b.n	80030e6 <HAL_SPI_Receive_IT+0x102>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	685a      	ldr	r2, [r3, #4]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	2180      	movs	r1, #128	@ 0x80
 80030da:	0149      	lsls	r1, r1, #5
 80030dc:	430a      	orrs	r2, r1
 80030de:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	4a1f      	ldr	r2, [pc, #124]	@ (8003160 <HAL_SPI_Receive_IT+0x17c>)
 80030e4:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	689a      	ldr	r2, [r3, #8]
 80030ea:	2380      	movs	r3, #128	@ 0x80
 80030ec:	021b      	lsls	r3, r3, #8
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d10f      	bne.n	8003112 <HAL_SPI_Receive_IT+0x12e>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	2140      	movs	r1, #64	@ 0x40
 80030fe:	438a      	bics	r2, r1
 8003100:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4915      	ldr	r1, [pc, #84]	@ (8003164 <HAL_SPI_Receive_IT+0x180>)
 800310e:	400a      	ands	r2, r1
 8003110:	601a      	str	r2, [r3, #0]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	2240      	movs	r2, #64	@ 0x40
 800311a:	4013      	ands	r3, r2
 800311c:	2b40      	cmp	r3, #64	@ 0x40
 800311e:	d007      	beq.n	8003130 <HAL_SPI_Receive_IT+0x14c>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	2140      	movs	r1, #64	@ 0x40
 800312c:	430a      	orrs	r2, r1
 800312e:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	225c      	movs	r2, #92	@ 0x5c
 8003134:	2100      	movs	r1, #0
 8003136:	5499      	strb	r1, [r3, r2]
  /* Enable RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	685a      	ldr	r2, [r3, #4]
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	2160      	movs	r1, #96	@ 0x60
 8003144:	430a      	orrs	r2, r1
 8003146:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 8003148:	2317      	movs	r3, #23
 800314a:	18fb      	adds	r3, r7, r3
 800314c:	781b      	ldrb	r3, [r3, #0]
}
 800314e:	0018      	movs	r0, r3
 8003150:	46bd      	mov	sp, r7
 8003152:	b006      	add	sp, #24
 8003154:	bd80      	pop	{r7, pc}
 8003156:	46c0      	nop			@ (mov r8, r8)
 8003158:	ffffefff 	.word	0xffffefff
 800315c:	0800378b 	.word	0x0800378b
 8003160:	08003739 	.word	0x08003739
 8003164:	ffffbfff 	.word	0xffffbfff

08003168 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b086      	sub	sp, #24
 800316c:	af00      	add	r7, sp, #0
 800316e:	60f8      	str	r0, [r7, #12]
 8003170:	60b9      	str	r1, [r7, #8]
 8003172:	607a      	str	r2, [r7, #4]
 8003174:	001a      	movs	r2, r3
 8003176:	1cbb      	adds	r3, r7, #2
 8003178:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800317a:	2317      	movs	r3, #23
 800317c:	18fb      	adds	r3, r7, r3
 800317e:	2200      	movs	r2, #0
 8003180:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003182:	2016      	movs	r0, #22
 8003184:	183b      	adds	r3, r7, r0
 8003186:	68fa      	ldr	r2, [r7, #12]
 8003188:	215d      	movs	r1, #93	@ 0x5d
 800318a:	5c52      	ldrb	r2, [r2, r1]
 800318c:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003194:	0001      	movs	r1, r0
 8003196:	187b      	adds	r3, r7, r1
 8003198:	781b      	ldrb	r3, [r3, #0]
 800319a:	2b01      	cmp	r3, #1
 800319c:	d011      	beq.n	80031c2 <HAL_SPI_TransmitReceive_IT+0x5a>
 800319e:	693a      	ldr	r2, [r7, #16]
 80031a0:	2382      	movs	r3, #130	@ 0x82
 80031a2:	005b      	lsls	r3, r3, #1
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d107      	bne.n	80031b8 <HAL_SPI_TransmitReceive_IT+0x50>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d103      	bne.n	80031b8 <HAL_SPI_TransmitReceive_IT+0x50>
 80031b0:	187b      	adds	r3, r7, r1
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	2b04      	cmp	r3, #4
 80031b6:	d004      	beq.n	80031c2 <HAL_SPI_TransmitReceive_IT+0x5a>
  {
    errorcode = HAL_BUSY;
 80031b8:	2317      	movs	r3, #23
 80031ba:	18fb      	adds	r3, r7, r3
 80031bc:	2202      	movs	r2, #2
 80031be:	701a      	strb	r2, [r3, #0]
    goto error;
 80031c0:	e088      	b.n	80032d4 <HAL_SPI_TransmitReceive_IT+0x16c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d006      	beq.n	80031d6 <HAL_SPI_TransmitReceive_IT+0x6e>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d003      	beq.n	80031d6 <HAL_SPI_TransmitReceive_IT+0x6e>
 80031ce:	1cbb      	adds	r3, r7, #2
 80031d0:	881b      	ldrh	r3, [r3, #0]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d104      	bne.n	80031e0 <HAL_SPI_TransmitReceive_IT+0x78>
  {
    errorcode = HAL_ERROR;
 80031d6:	2317      	movs	r3, #23
 80031d8:	18fb      	adds	r3, r7, r3
 80031da:	2201      	movs	r2, #1
 80031dc:	701a      	strb	r2, [r3, #0]
    goto error;
 80031de:	e079      	b.n	80032d4 <HAL_SPI_TransmitReceive_IT+0x16c>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	225c      	movs	r2, #92	@ 0x5c
 80031e4:	5c9b      	ldrb	r3, [r3, r2]
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d101      	bne.n	80031ee <HAL_SPI_TransmitReceive_IT+0x86>
 80031ea:	2302      	movs	r3, #2
 80031ec:	e075      	b.n	80032da <HAL_SPI_TransmitReceive_IT+0x172>
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	225c      	movs	r2, #92	@ 0x5c
 80031f2:	2101      	movs	r1, #1
 80031f4:	5499      	strb	r1, [r3, r2]

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	225d      	movs	r2, #93	@ 0x5d
 80031fa:	5c9b      	ldrb	r3, [r3, r2]
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	2b04      	cmp	r3, #4
 8003200:	d003      	beq.n	800320a <HAL_SPI_TransmitReceive_IT+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	225d      	movs	r2, #93	@ 0x5d
 8003206:	2105      	movs	r1, #5
 8003208:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2200      	movs	r2, #0
 800320e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	68ba      	ldr	r2, [r7, #8]
 8003214:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	1cba      	adds	r2, r7, #2
 800321a:	8812      	ldrh	r2, [r2, #0]
 800321c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	1cba      	adds	r2, r7, #2
 8003222:	8812      	ldrh	r2, [r2, #0]
 8003224:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	687a      	ldr	r2, [r7, #4]
 800322a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	1cba      	adds	r2, r7, #2
 8003230:	2144      	movs	r1, #68	@ 0x44
 8003232:	8812      	ldrh	r2, [r2, #0]
 8003234:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	1cba      	adds	r2, r7, #2
 800323a:	2146      	movs	r1, #70	@ 0x46
 800323c:	8812      	ldrh	r2, [r2, #0]
 800323e:	525a      	strh	r2, [r3, r1]

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	68da      	ldr	r2, [r3, #12]
 8003244:	23e0      	movs	r3, #224	@ 0xe0
 8003246:	00db      	lsls	r3, r3, #3
 8003248:	429a      	cmp	r2, r3
 800324a:	d906      	bls.n	800325a <HAL_SPI_TransmitReceive_IT+0xf2>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	4a25      	ldr	r2, [pc, #148]	@ (80032e4 <HAL_SPI_TransmitReceive_IT+0x17c>)
 8003250:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	4a24      	ldr	r2, [pc, #144]	@ (80032e8 <HAL_SPI_TransmitReceive_IT+0x180>)
 8003256:	651a      	str	r2, [r3, #80]	@ 0x50
 8003258:	e005      	b.n	8003266 <HAL_SPI_TransmitReceive_IT+0xfe>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	4a23      	ldr	r2, [pc, #140]	@ (80032ec <HAL_SPI_TransmitReceive_IT+0x184>)
 800325e:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	4a23      	ldr	r2, [pc, #140]	@ (80032f0 <HAL_SPI_TransmitReceive_IT+0x188>)
 8003264:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	68da      	ldr	r2, [r3, #12]
 800326a:	23e0      	movs	r3, #224	@ 0xe0
 800326c:	00db      	lsls	r3, r3, #3
 800326e:	429a      	cmp	r2, r3
 8003270:	d803      	bhi.n	800327a <HAL_SPI_TransmitReceive_IT+0x112>
 8003272:	1cbb      	adds	r3, r7, #2
 8003274:	881b      	ldrh	r3, [r3, #0]
 8003276:	2b01      	cmp	r3, #1
 8003278:	d908      	bls.n	800328c <HAL_SPI_TransmitReceive_IT+0x124>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	685a      	ldr	r2, [r3, #4]
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	491b      	ldr	r1, [pc, #108]	@ (80032f4 <HAL_SPI_TransmitReceive_IT+0x18c>)
 8003286:	400a      	ands	r2, r1
 8003288:	605a      	str	r2, [r3, #4]
 800328a:	e008      	b.n	800329e <HAL_SPI_TransmitReceive_IT+0x136>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	685a      	ldr	r2, [r3, #4]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	2180      	movs	r1, #128	@ 0x80
 8003298:	0149      	lsls	r1, r1, #5
 800329a:	430a      	orrs	r2, r1
 800329c:	605a      	str	r2, [r3, #4]
  }


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	2240      	movs	r2, #64	@ 0x40
 80032a6:	4013      	ands	r3, r2
 80032a8:	2b40      	cmp	r3, #64	@ 0x40
 80032aa:	d007      	beq.n	80032bc <HAL_SPI_TransmitReceive_IT+0x154>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	2140      	movs	r1, #64	@ 0x40
 80032b8:	430a      	orrs	r2, r1
 80032ba:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	225c      	movs	r2, #92	@ 0x5c
 80032c0:	2100      	movs	r1, #0
 80032c2:	5499      	strb	r1, [r3, r2]
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	685a      	ldr	r2, [r3, #4]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	21e0      	movs	r1, #224	@ 0xe0
 80032d0:	430a      	orrs	r2, r1
 80032d2:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 80032d4:	2317      	movs	r3, #23
 80032d6:	18fb      	adds	r3, r7, r3
 80032d8:	781b      	ldrb	r3, [r3, #0]
}
 80032da:	0018      	movs	r0, r3
 80032dc:	46bd      	mov	sp, r7
 80032de:	b006      	add	sp, #24
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	46c0      	nop			@ (mov r8, r8)
 80032e4:	0800366f 	.word	0x0800366f
 80032e8:	080036d7 	.word	0x080036d7
 80032ec:	08003519 	.word	0x08003519
 80032f0:	080035db 	.word	0x080035db
 80032f4:	ffffefff 	.word	0xffffefff

080032f8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b088      	sub	sp, #32
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003310:	69bb      	ldr	r3, [r7, #24]
 8003312:	2240      	movs	r2, #64	@ 0x40
 8003314:	4013      	ands	r3, r2
 8003316:	d10d      	bne.n	8003334 <HAL_SPI_IRQHandler+0x3c>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003318:	69bb      	ldr	r3, [r7, #24]
 800331a:	2201      	movs	r2, #1
 800331c:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800331e:	d009      	beq.n	8003334 <HAL_SPI_IRQHandler+0x3c>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	2240      	movs	r2, #64	@ 0x40
 8003324:	4013      	ands	r3, r2
 8003326:	d005      	beq.n	8003334 <HAL_SPI_IRQHandler+0x3c>
  {
    hspi->RxISR(hspi);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800332c:	687a      	ldr	r2, [r7, #4]
 800332e:	0010      	movs	r0, r2
 8003330:	4798      	blx	r3
    return;
 8003332:	e0c5      	b.n	80034c0 <HAL_SPI_IRQHandler+0x1c8>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003334:	69bb      	ldr	r3, [r7, #24]
 8003336:	2202      	movs	r2, #2
 8003338:	4013      	ands	r3, r2
 800333a:	d009      	beq.n	8003350 <HAL_SPI_IRQHandler+0x58>
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	2280      	movs	r2, #128	@ 0x80
 8003340:	4013      	ands	r3, r2
 8003342:	d005      	beq.n	8003350 <HAL_SPI_IRQHandler+0x58>
  {
    hspi->TxISR(hspi);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003348:	687a      	ldr	r2, [r7, #4]
 800334a:	0010      	movs	r0, r2
 800334c:	4798      	blx	r3
    return;
 800334e:	e0b7      	b.n	80034c0 <HAL_SPI_IRQHandler+0x1c8>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003350:	69bb      	ldr	r3, [r7, #24]
 8003352:	2220      	movs	r2, #32
 8003354:	4013      	ands	r3, r2
 8003356:	d109      	bne.n	800336c <HAL_SPI_IRQHandler+0x74>
 8003358:	69bb      	ldr	r3, [r7, #24]
 800335a:	2240      	movs	r2, #64	@ 0x40
 800335c:	4013      	ands	r3, r2
 800335e:	d105      	bne.n	800336c <HAL_SPI_IRQHandler+0x74>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003360:	69ba      	ldr	r2, [r7, #24]
 8003362:	2380      	movs	r3, #128	@ 0x80
 8003364:	005b      	lsls	r3, r3, #1
 8003366:	4013      	ands	r3, r2
 8003368:	d100      	bne.n	800336c <HAL_SPI_IRQHandler+0x74>
 800336a:	e0a9      	b.n	80034c0 <HAL_SPI_IRQHandler+0x1c8>
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	2220      	movs	r2, #32
 8003370:	4013      	ands	r3, r2
 8003372:	d100      	bne.n	8003376 <HAL_SPI_IRQHandler+0x7e>
 8003374:	e0a4      	b.n	80034c0 <HAL_SPI_IRQHandler+0x1c8>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003376:	69bb      	ldr	r3, [r7, #24]
 8003378:	2240      	movs	r2, #64	@ 0x40
 800337a:	4013      	ands	r3, r2
 800337c:	d023      	beq.n	80033c6 <HAL_SPI_IRQHandler+0xce>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	225d      	movs	r2, #93	@ 0x5d
 8003382:	5c9b      	ldrb	r3, [r3, r2]
 8003384:	b2db      	uxtb	r3, r3
 8003386:	2b03      	cmp	r3, #3
 8003388:	d011      	beq.n	80033ae <HAL_SPI_IRQHandler+0xb6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800338e:	2204      	movs	r2, #4
 8003390:	431a      	orrs	r2, r3
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003396:	2300      	movs	r3, #0
 8003398:	617b      	str	r3, [r7, #20]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	617b      	str	r3, [r7, #20]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	617b      	str	r3, [r7, #20]
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	e00b      	b.n	80033c6 <HAL_SPI_IRQHandler+0xce>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80033ae:	2300      	movs	r3, #0
 80033b0:	613b      	str	r3, [r7, #16]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	613b      	str	r3, [r7, #16]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	613b      	str	r3, [r7, #16]
 80033c2:	693b      	ldr	r3, [r7, #16]
        return;
 80033c4:	e07c      	b.n	80034c0 <HAL_SPI_IRQHandler+0x1c8>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80033c6:	69bb      	ldr	r3, [r7, #24]
 80033c8:	2220      	movs	r2, #32
 80033ca:	4013      	ands	r3, r2
 80033cc:	d014      	beq.n	80033f8 <HAL_SPI_IRQHandler+0x100>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033d2:	2201      	movs	r2, #1
 80033d4:	431a      	orrs	r2, r3
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80033da:	2300      	movs	r3, #0
 80033dc:	60fb      	str	r3, [r7, #12]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	60fb      	str	r3, [r7, #12]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	2140      	movs	r1, #64	@ 0x40
 80033f2:	438a      	bics	r2, r1
 80033f4:	601a      	str	r2, [r3, #0]
 80033f6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80033f8:	69ba      	ldr	r2, [r7, #24]
 80033fa:	2380      	movs	r3, #128	@ 0x80
 80033fc:	005b      	lsls	r3, r3, #1
 80033fe:	4013      	ands	r3, r2
 8003400:	d00c      	beq.n	800341c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003406:	2208      	movs	r2, #8
 8003408:	431a      	orrs	r2, r3
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800340e:	2300      	movs	r3, #0
 8003410:	60bb      	str	r3, [r7, #8]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	60bb      	str	r3, [r7, #8]
 800341a:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003420:	2b00      	cmp	r3, #0
 8003422:	d04c      	beq.n	80034be <HAL_SPI_IRQHandler+0x1c6>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	685a      	ldr	r2, [r3, #4]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	21e0      	movs	r1, #224	@ 0xe0
 8003430:	438a      	bics	r2, r1
 8003432:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	225d      	movs	r2, #93	@ 0x5d
 8003438:	2101      	movs	r1, #1
 800343a:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800343c:	69fb      	ldr	r3, [r7, #28]
 800343e:	2202      	movs	r2, #2
 8003440:	4013      	ands	r3, r2
 8003442:	d103      	bne.n	800344c <HAL_SPI_IRQHandler+0x154>
 8003444:	69fb      	ldr	r3, [r7, #28]
 8003446:	2201      	movs	r2, #1
 8003448:	4013      	ands	r3, r2
 800344a:	d032      	beq.n	80034b2 <HAL_SPI_IRQHandler+0x1ba>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	685a      	ldr	r2, [r3, #4]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	2103      	movs	r1, #3
 8003458:	438a      	bics	r2, r1
 800345a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003460:	2b00      	cmp	r3, #0
 8003462:	d010      	beq.n	8003486 <HAL_SPI_IRQHandler+0x18e>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003468:	4a17      	ldr	r2, [pc, #92]	@ (80034c8 <HAL_SPI_IRQHandler+0x1d0>)
 800346a:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003470:	0018      	movs	r0, r3
 8003472:	f7fe f849 	bl	8001508 <HAL_DMA_Abort_IT>
 8003476:	1e03      	subs	r3, r0, #0
 8003478:	d005      	beq.n	8003486 <HAL_SPI_IRQHandler+0x18e>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800347e:	2240      	movs	r2, #64	@ 0x40
 8003480:	431a      	orrs	r2, r3
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800348a:	2b00      	cmp	r3, #0
 800348c:	d016      	beq.n	80034bc <HAL_SPI_IRQHandler+0x1c4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003492:	4a0d      	ldr	r2, [pc, #52]	@ (80034c8 <HAL_SPI_IRQHandler+0x1d0>)
 8003494:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800349a:	0018      	movs	r0, r3
 800349c:	f7fe f834 	bl	8001508 <HAL_DMA_Abort_IT>
 80034a0:	1e03      	subs	r3, r0, #0
 80034a2:	d00b      	beq.n	80034bc <HAL_SPI_IRQHandler+0x1c4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034a8:	2240      	movs	r2, #64	@ 0x40
 80034aa:	431a      	orrs	r2, r3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 80034b0:	e004      	b.n	80034bc <HAL_SPI_IRQHandler+0x1c4>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	0018      	movs	r0, r3
 80034b6:	f000 f811 	bl	80034dc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80034ba:	e000      	b.n	80034be <HAL_SPI_IRQHandler+0x1c6>
        if (hspi->hdmatx != NULL)
 80034bc:	46c0      	nop			@ (mov r8, r8)
    return;
 80034be:	46c0      	nop			@ (mov r8, r8)
  }
}
 80034c0:	46bd      	mov	sp, r7
 80034c2:	b008      	add	sp, #32
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	46c0      	nop			@ (mov r8, r8)
 80034c8:	080034ed 	.word	0x080034ed

080034cc <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b082      	sub	sp, #8
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80034d4:	46c0      	nop			@ (mov r8, r8)
 80034d6:	46bd      	mov	sp, r7
 80034d8:	b002      	add	sp, #8
 80034da:	bd80      	pop	{r7, pc}

080034dc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b082      	sub	sp, #8
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80034e4:	46c0      	nop			@ (mov r8, r8)
 80034e6:	46bd      	mov	sp, r7
 80034e8:	b002      	add	sp, #8
 80034ea:	bd80      	pop	{r7, pc}

080034ec <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b084      	sub	sp, #16
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034f8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2246      	movs	r2, #70	@ 0x46
 80034fe:	2100      	movs	r1, #0
 8003500:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2200      	movs	r2, #0
 8003506:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	0018      	movs	r0, r3
 800350c:	f7ff ffe6 	bl	80034dc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003510:	46c0      	nop			@ (mov r8, r8)
 8003512:	46bd      	mov	sp, r7
 8003514:	b004      	add	sp, #16
 8003516:	bd80      	pop	{r7, pc}

08003518 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b082      	sub	sp, #8
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2246      	movs	r2, #70	@ 0x46
 8003524:	5a9b      	ldrh	r3, [r3, r2]
 8003526:	b29b      	uxth	r3, r3
 8003528:	2b01      	cmp	r3, #1
 800352a:	d924      	bls.n	8003576 <SPI_2linesRxISR_8BIT+0x5e>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	68da      	ldr	r2, [r3, #12]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003536:	b292      	uxth	r2, r2
 8003538:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800353e:	1c9a      	adds	r2, r3, #2
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount -= 2U;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2246      	movs	r2, #70	@ 0x46
 8003548:	5a9b      	ldrh	r3, [r3, r2]
 800354a:	b29b      	uxth	r3, r3
 800354c:	3b02      	subs	r3, #2
 800354e:	b299      	uxth	r1, r3
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2246      	movs	r2, #70	@ 0x46
 8003554:	5299      	strh	r1, [r3, r2]
    if (hspi->RxXferCount == 1U)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2246      	movs	r2, #70	@ 0x46
 800355a:	5a9b      	ldrh	r3, [r3, r2]
 800355c:	b29b      	uxth	r3, r3
 800355e:	2b01      	cmp	r3, #1
 8003560:	d120      	bne.n	80035a4 <SPI_2linesRxISR_8BIT+0x8c>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	685a      	ldr	r2, [r3, #4]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	2180      	movs	r1, #128	@ 0x80
 800356e:	0149      	lsls	r1, r1, #5
 8003570:	430a      	orrs	r2, r1
 8003572:	605a      	str	r2, [r3, #4]
 8003574:	e016      	b.n	80035a4 <SPI_2linesRxISR_8BIT+0x8c>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	330c      	adds	r3, #12
 800357c:	001a      	movs	r2, r3
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003582:	7812      	ldrb	r2, [r2, #0]
 8003584:	b2d2      	uxtb	r2, r2
 8003586:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800358c:	1c5a      	adds	r2, r3, #1
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount--;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2246      	movs	r2, #70	@ 0x46
 8003596:	5a9b      	ldrh	r3, [r3, r2]
 8003598:	b29b      	uxth	r3, r3
 800359a:	3b01      	subs	r3, #1
 800359c:	b299      	uxth	r1, r3
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2246      	movs	r2, #70	@ 0x46
 80035a2:	5299      	strh	r1, [r3, r2]
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2246      	movs	r2, #70	@ 0x46
 80035a8:	5a9b      	ldrh	r3, [r3, r2]
 80035aa:	b29b      	uxth	r3, r3
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d110      	bne.n	80035d2 <SPI_2linesRxISR_8BIT+0xba>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	685a      	ldr	r2, [r3, #4]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	2160      	movs	r1, #96	@ 0x60
 80035bc:	438a      	bics	r2, r1
 80035be:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035c4:	b29b      	uxth	r3, r3
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d103      	bne.n	80035d2 <SPI_2linesRxISR_8BIT+0xba>
    {
      SPI_CloseRxTx_ISR(hspi);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	0018      	movs	r0, r3
 80035ce:	f000 fad7 	bl	8003b80 <SPI_CloseRxTx_ISR>
    }
  }
}
 80035d2:	46c0      	nop			@ (mov r8, r8)
 80035d4:	46bd      	mov	sp, r7
 80035d6:	b002      	add	sp, #8
 80035d8:	bd80      	pop	{r7, pc}

080035da <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80035da:	b580      	push	{r7, lr}
 80035dc:	b082      	sub	sp, #8
 80035de:	af00      	add	r7, sp, #0
 80035e0:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035e6:	b29b      	uxth	r3, r3
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d912      	bls.n	8003612 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035f0:	881a      	ldrh	r2, [r3, #0]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035fc:	1c9a      	adds	r2, r3, #2
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount -= 2U;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003606:	b29b      	uxth	r3, r3
 8003608:	3b02      	subs	r3, #2
 800360a:	b29a      	uxth	r2, r3
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003610:	e012      	b.n	8003638 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	330c      	adds	r3, #12
 800361c:	7812      	ldrb	r2, [r2, #0]
 800361e:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003624:	1c5a      	adds	r2, r3, #1
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount--;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800362e:	b29b      	uxth	r3, r3
 8003630:	3b01      	subs	r3, #1
 8003632:	b29a      	uxth	r2, r3
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	87da      	strh	r2, [r3, #62]	@ 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800363c:	b29b      	uxth	r3, r3
 800363e:	2b00      	cmp	r3, #0
 8003640:	d111      	bne.n	8003666 <SPI_2linesTxISR_8BIT+0x8c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	685a      	ldr	r2, [r3, #4]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	2180      	movs	r1, #128	@ 0x80
 800364e:	438a      	bics	r2, r1
 8003650:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2246      	movs	r2, #70	@ 0x46
 8003656:	5a9b      	ldrh	r3, [r3, r2]
 8003658:	b29b      	uxth	r3, r3
 800365a:	2b00      	cmp	r3, #0
 800365c:	d103      	bne.n	8003666 <SPI_2linesTxISR_8BIT+0x8c>
    {
      SPI_CloseRxTx_ISR(hspi);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	0018      	movs	r0, r3
 8003662:	f000 fa8d 	bl	8003b80 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003666:	46c0      	nop			@ (mov r8, r8)
 8003668:	46bd      	mov	sp, r7
 800366a:	b002      	add	sp, #8
 800366c:	bd80      	pop	{r7, pc}

0800366e <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800366e:	b580      	push	{r7, lr}
 8003670:	b082      	sub	sp, #8
 8003672:	af00      	add	r7, sp, #0
 8003674:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	68da      	ldr	r2, [r3, #12]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003680:	b292      	uxth	r2, r2
 8003682:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003688:	1c9a      	adds	r2, r3, #2
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2246      	movs	r2, #70	@ 0x46
 8003692:	5a9b      	ldrh	r3, [r3, r2]
 8003694:	b29b      	uxth	r3, r3
 8003696:	3b01      	subs	r3, #1
 8003698:	b299      	uxth	r1, r3
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2246      	movs	r2, #70	@ 0x46
 800369e:	5299      	strh	r1, [r3, r2]

  if (hspi->RxXferCount == 0U)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2246      	movs	r2, #70	@ 0x46
 80036a4:	5a9b      	ldrh	r3, [r3, r2]
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d110      	bne.n	80036ce <SPI_2linesRxISR_16BIT+0x60>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	685a      	ldr	r2, [r3, #4]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	2140      	movs	r1, #64	@ 0x40
 80036b8:	438a      	bics	r2, r1
 80036ba:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036c0:	b29b      	uxth	r3, r3
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d103      	bne.n	80036ce <SPI_2linesRxISR_16BIT+0x60>
    {
      SPI_CloseRxTx_ISR(hspi);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	0018      	movs	r0, r3
 80036ca:	f000 fa59 	bl	8003b80 <SPI_CloseRxTx_ISR>
    }
  }
}
 80036ce:	46c0      	nop			@ (mov r8, r8)
 80036d0:	46bd      	mov	sp, r7
 80036d2:	b002      	add	sp, #8
 80036d4:	bd80      	pop	{r7, pc}

080036d6 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80036d6:	b580      	push	{r7, lr}
 80036d8:	b082      	sub	sp, #8
 80036da:	af00      	add	r7, sp, #0
 80036dc:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036e2:	881a      	ldrh	r2, [r3, #0]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036ee:	1c9a      	adds	r2, r3, #2
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036f8:	b29b      	uxth	r3, r3
 80036fa:	3b01      	subs	r3, #1
 80036fc:	b29a      	uxth	r2, r3
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003706:	b29b      	uxth	r3, r3
 8003708:	2b00      	cmp	r3, #0
 800370a:	d111      	bne.n	8003730 <SPI_2linesTxISR_16BIT+0x5a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	685a      	ldr	r2, [r3, #4]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	2180      	movs	r1, #128	@ 0x80
 8003718:	438a      	bics	r2, r1
 800371a:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2246      	movs	r2, #70	@ 0x46
 8003720:	5a9b      	ldrh	r3, [r3, r2]
 8003722:	b29b      	uxth	r3, r3
 8003724:	2b00      	cmp	r3, #0
 8003726:	d103      	bne.n	8003730 <SPI_2linesTxISR_16BIT+0x5a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	0018      	movs	r0, r3
 800372c:	f000 fa28 	bl	8003b80 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003730:	46c0      	nop			@ (mov r8, r8)
 8003732:	46bd      	mov	sp, r7
 8003734:	b002      	add	sp, #8
 8003736:	bd80      	pop	{r7, pc}

08003738 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b082      	sub	sp, #8
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	330c      	adds	r3, #12
 8003746:	001a      	movs	r2, r3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800374c:	7812      	ldrb	r2, [r2, #0]
 800374e:	b2d2      	uxtb	r2, r2
 8003750:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003756:	1c5a      	adds	r2, r3, #1
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2246      	movs	r2, #70	@ 0x46
 8003760:	5a9b      	ldrh	r3, [r3, r2]
 8003762:	b29b      	uxth	r3, r3
 8003764:	3b01      	subs	r3, #1
 8003766:	b299      	uxth	r1, r3
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2246      	movs	r2, #70	@ 0x46
 800376c:	5299      	strh	r1, [r3, r2]
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2246      	movs	r2, #70	@ 0x46
 8003772:	5a9b      	ldrh	r3, [r3, r2]
 8003774:	b29b      	uxth	r3, r3
 8003776:	2b00      	cmp	r3, #0
 8003778:	d103      	bne.n	8003782 <SPI_RxISR_8BIT+0x4a>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	0018      	movs	r0, r3
 800377e:	f000 fa45 	bl	8003c0c <SPI_CloseRx_ISR>
  }
}
 8003782:	46c0      	nop			@ (mov r8, r8)
 8003784:	46bd      	mov	sp, r7
 8003786:	b002      	add	sp, #8
 8003788:	bd80      	pop	{r7, pc}

0800378a <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800378a:	b580      	push	{r7, lr}
 800378c:	b082      	sub	sp, #8
 800378e:	af00      	add	r7, sp, #0
 8003790:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	68da      	ldr	r2, [r3, #12]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800379c:	b292      	uxth	r2, r2
 800379e:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037a4:	1c9a      	adds	r2, r3, #2
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2246      	movs	r2, #70	@ 0x46
 80037ae:	5a9b      	ldrh	r3, [r3, r2]
 80037b0:	b29b      	uxth	r3, r3
 80037b2:	3b01      	subs	r3, #1
 80037b4:	b299      	uxth	r1, r3
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2246      	movs	r2, #70	@ 0x46
 80037ba:	5299      	strh	r1, [r3, r2]
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2246      	movs	r2, #70	@ 0x46
 80037c0:	5a9b      	ldrh	r3, [r3, r2]
 80037c2:	b29b      	uxth	r3, r3
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d103      	bne.n	80037d0 <SPI_RxISR_16BIT+0x46>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	0018      	movs	r0, r3
 80037cc:	f000 fa1e 	bl	8003c0c <SPI_CloseRx_ISR>
  }
}
 80037d0:	46c0      	nop			@ (mov r8, r8)
 80037d2:	46bd      	mov	sp, r7
 80037d4:	b002      	add	sp, #8
 80037d6:	bd80      	pop	{r7, pc}

080037d8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b088      	sub	sp, #32
 80037dc:	af00      	add	r7, sp, #0
 80037de:	60f8      	str	r0, [r7, #12]
 80037e0:	60b9      	str	r1, [r7, #8]
 80037e2:	603b      	str	r3, [r7, #0]
 80037e4:	1dfb      	adds	r3, r7, #7
 80037e6:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80037e8:	f7fd fd82 	bl	80012f0 <HAL_GetTick>
 80037ec:	0002      	movs	r2, r0
 80037ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037f0:	1a9b      	subs	r3, r3, r2
 80037f2:	683a      	ldr	r2, [r7, #0]
 80037f4:	18d3      	adds	r3, r2, r3
 80037f6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80037f8:	f7fd fd7a 	bl	80012f0 <HAL_GetTick>
 80037fc:	0003      	movs	r3, r0
 80037fe:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003800:	4b3a      	ldr	r3, [pc, #232]	@ (80038ec <SPI_WaitFlagStateUntilTimeout+0x114>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	015b      	lsls	r3, r3, #5
 8003806:	0d1b      	lsrs	r3, r3, #20
 8003808:	69fa      	ldr	r2, [r7, #28]
 800380a:	4353      	muls	r3, r2
 800380c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800380e:	e058      	b.n	80038c2 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	3301      	adds	r3, #1
 8003814:	d055      	beq.n	80038c2 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003816:	f7fd fd6b 	bl	80012f0 <HAL_GetTick>
 800381a:	0002      	movs	r2, r0
 800381c:	69bb      	ldr	r3, [r7, #24]
 800381e:	1ad3      	subs	r3, r2, r3
 8003820:	69fa      	ldr	r2, [r7, #28]
 8003822:	429a      	cmp	r2, r3
 8003824:	d902      	bls.n	800382c <SPI_WaitFlagStateUntilTimeout+0x54>
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d142      	bne.n	80038b2 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	685a      	ldr	r2, [r3, #4]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	21e0      	movs	r1, #224	@ 0xe0
 8003838:	438a      	bics	r2, r1
 800383a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	685a      	ldr	r2, [r3, #4]
 8003840:	2382      	movs	r3, #130	@ 0x82
 8003842:	005b      	lsls	r3, r3, #1
 8003844:	429a      	cmp	r2, r3
 8003846:	d113      	bne.n	8003870 <SPI_WaitFlagStateUntilTimeout+0x98>
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	689a      	ldr	r2, [r3, #8]
 800384c:	2380      	movs	r3, #128	@ 0x80
 800384e:	021b      	lsls	r3, r3, #8
 8003850:	429a      	cmp	r2, r3
 8003852:	d005      	beq.n	8003860 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	689a      	ldr	r2, [r3, #8]
 8003858:	2380      	movs	r3, #128	@ 0x80
 800385a:	00db      	lsls	r3, r3, #3
 800385c:	429a      	cmp	r2, r3
 800385e:	d107      	bne.n	8003870 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	2140      	movs	r1, #64	@ 0x40
 800386c:	438a      	bics	r2, r1
 800386e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003874:	2380      	movs	r3, #128	@ 0x80
 8003876:	019b      	lsls	r3, r3, #6
 8003878:	429a      	cmp	r2, r3
 800387a:	d110      	bne.n	800389e <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	491a      	ldr	r1, [pc, #104]	@ (80038f0 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8003888:	400a      	ands	r2, r1
 800388a:	601a      	str	r2, [r3, #0]
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	2180      	movs	r1, #128	@ 0x80
 8003898:	0189      	lsls	r1, r1, #6
 800389a:	430a      	orrs	r2, r1
 800389c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	225d      	movs	r2, #93	@ 0x5d
 80038a2:	2101      	movs	r1, #1
 80038a4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	225c      	movs	r2, #92	@ 0x5c
 80038aa:	2100      	movs	r1, #0
 80038ac:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80038ae:	2303      	movs	r3, #3
 80038b0:	e017      	b.n	80038e2 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d101      	bne.n	80038bc <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80038b8:	2300      	movs	r3, #0
 80038ba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	3b01      	subs	r3, #1
 80038c0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	68ba      	ldr	r2, [r7, #8]
 80038ca:	4013      	ands	r3, r2
 80038cc:	68ba      	ldr	r2, [r7, #8]
 80038ce:	1ad3      	subs	r3, r2, r3
 80038d0:	425a      	negs	r2, r3
 80038d2:	4153      	adcs	r3, r2
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	001a      	movs	r2, r3
 80038d8:	1dfb      	adds	r3, r7, #7
 80038da:	781b      	ldrb	r3, [r3, #0]
 80038dc:	429a      	cmp	r2, r3
 80038de:	d197      	bne.n	8003810 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80038e0:	2300      	movs	r3, #0
}
 80038e2:	0018      	movs	r0, r3
 80038e4:	46bd      	mov	sp, r7
 80038e6:	b008      	add	sp, #32
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	46c0      	nop			@ (mov r8, r8)
 80038ec:	20000300 	.word	0x20000300
 80038f0:	ffffdfff 	.word	0xffffdfff

080038f4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b08a      	sub	sp, #40	@ 0x28
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	60f8      	str	r0, [r7, #12]
 80038fc:	60b9      	str	r1, [r7, #8]
 80038fe:	607a      	str	r2, [r7, #4]
 8003900:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003902:	2317      	movs	r3, #23
 8003904:	18fb      	adds	r3, r7, r3
 8003906:	2200      	movs	r2, #0
 8003908:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800390a:	f7fd fcf1 	bl	80012f0 <HAL_GetTick>
 800390e:	0002      	movs	r2, r0
 8003910:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003912:	1a9b      	subs	r3, r3, r2
 8003914:	683a      	ldr	r2, [r7, #0]
 8003916:	18d3      	adds	r3, r2, r3
 8003918:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800391a:	f7fd fce9 	bl	80012f0 <HAL_GetTick>
 800391e:	0003      	movs	r3, r0
 8003920:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	330c      	adds	r3, #12
 8003928:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800392a:	4b41      	ldr	r3, [pc, #260]	@ (8003a30 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	0013      	movs	r3, r2
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	189b      	adds	r3, r3, r2
 8003934:	00da      	lsls	r2, r3, #3
 8003936:	1ad3      	subs	r3, r2, r3
 8003938:	0d1b      	lsrs	r3, r3, #20
 800393a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800393c:	4353      	muls	r3, r2
 800393e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003940:	e068      	b.n	8003a14 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003942:	68ba      	ldr	r2, [r7, #8]
 8003944:	23c0      	movs	r3, #192	@ 0xc0
 8003946:	00db      	lsls	r3, r3, #3
 8003948:	429a      	cmp	r2, r3
 800394a:	d10a      	bne.n	8003962 <SPI_WaitFifoStateUntilTimeout+0x6e>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d107      	bne.n	8003962 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	781b      	ldrb	r3, [r3, #0]
 8003956:	b2da      	uxtb	r2, r3
 8003958:	2117      	movs	r1, #23
 800395a:	187b      	adds	r3, r7, r1
 800395c:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800395e:	187b      	adds	r3, r7, r1
 8003960:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	3301      	adds	r3, #1
 8003966:	d055      	beq.n	8003a14 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003968:	f7fd fcc2 	bl	80012f0 <HAL_GetTick>
 800396c:	0002      	movs	r2, r0
 800396e:	6a3b      	ldr	r3, [r7, #32]
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003974:	429a      	cmp	r2, r3
 8003976:	d902      	bls.n	800397e <SPI_WaitFifoStateUntilTimeout+0x8a>
 8003978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800397a:	2b00      	cmp	r3, #0
 800397c:	d142      	bne.n	8003a04 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	685a      	ldr	r2, [r3, #4]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	21e0      	movs	r1, #224	@ 0xe0
 800398a:	438a      	bics	r2, r1
 800398c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	685a      	ldr	r2, [r3, #4]
 8003992:	2382      	movs	r3, #130	@ 0x82
 8003994:	005b      	lsls	r3, r3, #1
 8003996:	429a      	cmp	r2, r3
 8003998:	d113      	bne.n	80039c2 <SPI_WaitFifoStateUntilTimeout+0xce>
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	689a      	ldr	r2, [r3, #8]
 800399e:	2380      	movs	r3, #128	@ 0x80
 80039a0:	021b      	lsls	r3, r3, #8
 80039a2:	429a      	cmp	r2, r3
 80039a4:	d005      	beq.n	80039b2 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	689a      	ldr	r2, [r3, #8]
 80039aa:	2380      	movs	r3, #128	@ 0x80
 80039ac:	00db      	lsls	r3, r3, #3
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d107      	bne.n	80039c2 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	2140      	movs	r1, #64	@ 0x40
 80039be:	438a      	bics	r2, r1
 80039c0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80039c6:	2380      	movs	r3, #128	@ 0x80
 80039c8:	019b      	lsls	r3, r3, #6
 80039ca:	429a      	cmp	r2, r3
 80039cc:	d110      	bne.n	80039f0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4916      	ldr	r1, [pc, #88]	@ (8003a34 <SPI_WaitFifoStateUntilTimeout+0x140>)
 80039da:	400a      	ands	r2, r1
 80039dc:	601a      	str	r2, [r3, #0]
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	2180      	movs	r1, #128	@ 0x80
 80039ea:	0189      	lsls	r1, r1, #6
 80039ec:	430a      	orrs	r2, r1
 80039ee:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	225d      	movs	r2, #93	@ 0x5d
 80039f4:	2101      	movs	r1, #1
 80039f6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	225c      	movs	r2, #92	@ 0x5c
 80039fc:	2100      	movs	r1, #0
 80039fe:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003a00:	2303      	movs	r3, #3
 8003a02:	e010      	b.n	8003a26 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003a04:	69bb      	ldr	r3, [r7, #24]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d101      	bne.n	8003a0e <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003a0e:	69bb      	ldr	r3, [r7, #24]
 8003a10:	3b01      	subs	r3, #1
 8003a12:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	68ba      	ldr	r2, [r7, #8]
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	687a      	ldr	r2, [r7, #4]
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d18e      	bne.n	8003942 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8003a24:	2300      	movs	r3, #0
}
 8003a26:	0018      	movs	r0, r3
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	b00a      	add	sp, #40	@ 0x28
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	46c0      	nop			@ (mov r8, r8)
 8003a30:	20000300 	.word	0x20000300
 8003a34:	ffffdfff 	.word	0xffffdfff

08003a38 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b086      	sub	sp, #24
 8003a3c:	af02      	add	r7, sp, #8
 8003a3e:	60f8      	str	r0, [r7, #12]
 8003a40:	60b9      	str	r1, [r7, #8]
 8003a42:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	685a      	ldr	r2, [r3, #4]
 8003a48:	2382      	movs	r3, #130	@ 0x82
 8003a4a:	005b      	lsls	r3, r3, #1
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d113      	bne.n	8003a78 <SPI_EndRxTransaction+0x40>
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	689a      	ldr	r2, [r3, #8]
 8003a54:	2380      	movs	r3, #128	@ 0x80
 8003a56:	021b      	lsls	r3, r3, #8
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d005      	beq.n	8003a68 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	689a      	ldr	r2, [r3, #8]
 8003a60:	2380      	movs	r3, #128	@ 0x80
 8003a62:	00db      	lsls	r3, r3, #3
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d107      	bne.n	8003a78 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	2140      	movs	r1, #64	@ 0x40
 8003a74:	438a      	bics	r2, r1
 8003a76:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003a78:	68ba      	ldr	r2, [r7, #8]
 8003a7a:	68f8      	ldr	r0, [r7, #12]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	9300      	str	r3, [sp, #0]
 8003a80:	0013      	movs	r3, r2
 8003a82:	2200      	movs	r2, #0
 8003a84:	2180      	movs	r1, #128	@ 0x80
 8003a86:	f7ff fea7 	bl	80037d8 <SPI_WaitFlagStateUntilTimeout>
 8003a8a:	1e03      	subs	r3, r0, #0
 8003a8c:	d007      	beq.n	8003a9e <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a92:	2220      	movs	r2, #32
 8003a94:	431a      	orrs	r2, r3
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	e026      	b.n	8003aec <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	685a      	ldr	r2, [r3, #4]
 8003aa2:	2382      	movs	r3, #130	@ 0x82
 8003aa4:	005b      	lsls	r3, r3, #1
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d11f      	bne.n	8003aea <SPI_EndRxTransaction+0xb2>
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	689a      	ldr	r2, [r3, #8]
 8003aae:	2380      	movs	r3, #128	@ 0x80
 8003ab0:	021b      	lsls	r3, r3, #8
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	d005      	beq.n	8003ac2 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	689a      	ldr	r2, [r3, #8]
 8003aba:	2380      	movs	r3, #128	@ 0x80
 8003abc:	00db      	lsls	r3, r3, #3
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	d113      	bne.n	8003aea <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003ac2:	68ba      	ldr	r2, [r7, #8]
 8003ac4:	23c0      	movs	r3, #192	@ 0xc0
 8003ac6:	00d9      	lsls	r1, r3, #3
 8003ac8:	68f8      	ldr	r0, [r7, #12]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	9300      	str	r3, [sp, #0]
 8003ace:	0013      	movs	r3, r2
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f7ff ff0f 	bl	80038f4 <SPI_WaitFifoStateUntilTimeout>
 8003ad6:	1e03      	subs	r3, r0, #0
 8003ad8:	d007      	beq.n	8003aea <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ade:	2220      	movs	r2, #32
 8003ae0:	431a      	orrs	r2, r3
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	e000      	b.n	8003aec <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8003aea:	2300      	movs	r3, #0
}
 8003aec:	0018      	movs	r0, r3
 8003aee:	46bd      	mov	sp, r7
 8003af0:	b004      	add	sp, #16
 8003af2:	bd80      	pop	{r7, pc}

08003af4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b086      	sub	sp, #24
 8003af8:	af02      	add	r7, sp, #8
 8003afa:	60f8      	str	r0, [r7, #12]
 8003afc:	60b9      	str	r1, [r7, #8]
 8003afe:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003b00:	68ba      	ldr	r2, [r7, #8]
 8003b02:	23c0      	movs	r3, #192	@ 0xc0
 8003b04:	0159      	lsls	r1, r3, #5
 8003b06:	68f8      	ldr	r0, [r7, #12]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	9300      	str	r3, [sp, #0]
 8003b0c:	0013      	movs	r3, r2
 8003b0e:	2200      	movs	r2, #0
 8003b10:	f7ff fef0 	bl	80038f4 <SPI_WaitFifoStateUntilTimeout>
 8003b14:	1e03      	subs	r3, r0, #0
 8003b16:	d007      	beq.n	8003b28 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b1c:	2220      	movs	r2, #32
 8003b1e:	431a      	orrs	r2, r3
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003b24:	2303      	movs	r3, #3
 8003b26:	e027      	b.n	8003b78 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003b28:	68ba      	ldr	r2, [r7, #8]
 8003b2a:	68f8      	ldr	r0, [r7, #12]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	9300      	str	r3, [sp, #0]
 8003b30:	0013      	movs	r3, r2
 8003b32:	2200      	movs	r2, #0
 8003b34:	2180      	movs	r1, #128	@ 0x80
 8003b36:	f7ff fe4f 	bl	80037d8 <SPI_WaitFlagStateUntilTimeout>
 8003b3a:	1e03      	subs	r3, r0, #0
 8003b3c:	d007      	beq.n	8003b4e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b42:	2220      	movs	r2, #32
 8003b44:	431a      	orrs	r2, r3
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003b4a:	2303      	movs	r3, #3
 8003b4c:	e014      	b.n	8003b78 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003b4e:	68ba      	ldr	r2, [r7, #8]
 8003b50:	23c0      	movs	r3, #192	@ 0xc0
 8003b52:	00d9      	lsls	r1, r3, #3
 8003b54:	68f8      	ldr	r0, [r7, #12]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	9300      	str	r3, [sp, #0]
 8003b5a:	0013      	movs	r3, r2
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	f7ff fec9 	bl	80038f4 <SPI_WaitFifoStateUntilTimeout>
 8003b62:	1e03      	subs	r3, r0, #0
 8003b64:	d007      	beq.n	8003b76 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b6a:	2220      	movs	r2, #32
 8003b6c:	431a      	orrs	r2, r3
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003b72:	2303      	movs	r3, #3
 8003b74:	e000      	b.n	8003b78 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003b76:	2300      	movs	r3, #0
}
 8003b78:	0018      	movs	r0, r3
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	b004      	add	sp, #16
 8003b7e:	bd80      	pop	{r7, pc}

08003b80 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b084      	sub	sp, #16
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003b88:	f7fd fbb2 	bl	80012f0 <HAL_GetTick>
 8003b8c:	0003      	movs	r3, r0
 8003b8e:	60fb      	str	r3, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	685a      	ldr	r2, [r3, #4]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	2120      	movs	r1, #32
 8003b9c:	438a      	bics	r2, r1
 8003b9e:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003ba0:	68fa      	ldr	r2, [r7, #12]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2164      	movs	r1, #100	@ 0x64
 8003ba6:	0018      	movs	r0, r3
 8003ba8:	f7ff ffa4 	bl	8003af4 <SPI_EndRxTxTransaction>
 8003bac:	1e03      	subs	r3, r0, #0
 8003bae:	d005      	beq.n	8003bbc <SPI_CloseRxTx_ISR+0x3c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bb4:	2220      	movs	r2, #32
 8003bb6:	431a      	orrs	r2, r3
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	661a      	str	r2, [r3, #96]	@ 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d117      	bne.n	8003bf4 <SPI_CloseRxTx_ISR+0x74>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	225d      	movs	r2, #93	@ 0x5d
 8003bc8:	5c9b      	ldrb	r3, [r3, r2]
 8003bca:	b2db      	uxtb	r3, r3
 8003bcc:	2b04      	cmp	r3, #4
 8003bce:	d108      	bne.n	8003be2 <SPI_CloseRxTx_ISR+0x62>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	225d      	movs	r2, #93	@ 0x5d
 8003bd4:	2101      	movs	r1, #1
 8003bd6:	5499      	strb	r1, [r3, r2]
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	0018      	movs	r0, r3
 8003bdc:	f7fd f850 	bl	8000c80 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8003be0:	e010      	b.n	8003c04 <SPI_CloseRxTx_ISR+0x84>
        hspi->State = HAL_SPI_STATE_READY;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	225d      	movs	r2, #93	@ 0x5d
 8003be6:	2101      	movs	r1, #1
 8003be8:	5499      	strb	r1, [r3, r2]
        HAL_SPI_TxRxCpltCallback(hspi);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	0018      	movs	r0, r3
 8003bee:	f7ff fc6d 	bl	80034cc <HAL_SPI_TxRxCpltCallback>
}
 8003bf2:	e007      	b.n	8003c04 <SPI_CloseRxTx_ISR+0x84>
      hspi->State = HAL_SPI_STATE_READY;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	225d      	movs	r2, #93	@ 0x5d
 8003bf8:	2101      	movs	r1, #1
 8003bfa:	5499      	strb	r1, [r3, r2]
      HAL_SPI_ErrorCallback(hspi);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	0018      	movs	r0, r3
 8003c00:	f7ff fc6c 	bl	80034dc <HAL_SPI_ErrorCallback>
}
 8003c04:	46c0      	nop			@ (mov r8, r8)
 8003c06:	46bd      	mov	sp, r7
 8003c08:	b004      	add	sp, #16
 8003c0a:	bd80      	pop	{r7, pc}

08003c0c <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b082      	sub	sp, #8
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	685a      	ldr	r2, [r3, #4]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	2160      	movs	r1, #96	@ 0x60
 8003c20:	438a      	bics	r2, r1
 8003c22:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8003c24:	f7fd fb64 	bl	80012f0 <HAL_GetTick>
 8003c28:	0002      	movs	r2, r0
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2164      	movs	r1, #100	@ 0x64
 8003c2e:	0018      	movs	r0, r3
 8003c30:	f7ff ff02 	bl	8003a38 <SPI_EndRxTransaction>
 8003c34:	1e03      	subs	r3, r0, #0
 8003c36:	d005      	beq.n	8003c44 <SPI_CloseRx_ISR+0x38>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c3c:	2220      	movs	r2, #32
 8003c3e:	431a      	orrs	r2, r3
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	661a      	str	r2, [r3, #96]	@ 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	225d      	movs	r2, #93	@ 0x5d
 8003c48:	2101      	movs	r1, #1
 8003c4a:	5499      	strb	r1, [r3, r2]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d104      	bne.n	8003c5e <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	0018      	movs	r0, r3
 8003c58:	f7fd f812 	bl	8000c80 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8003c5c:	e003      	b.n	8003c66 <SPI_CloseRx_ISR+0x5a>
      HAL_SPI_ErrorCallback(hspi);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	0018      	movs	r0, r3
 8003c62:	f7ff fc3b 	bl	80034dc <HAL_SPI_ErrorCallback>
}
 8003c66:	46c0      	nop			@ (mov r8, r8)
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	b002      	add	sp, #8
 8003c6c:	bd80      	pop	{r7, pc}
	...

08003c70 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b082      	sub	sp, #8
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d101      	bne.n	8003c82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e046      	b.n	8003d10 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2288      	movs	r2, #136	@ 0x88
 8003c86:	589b      	ldr	r3, [r3, r2]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d107      	bne.n	8003c9c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2284      	movs	r2, #132	@ 0x84
 8003c90:	2100      	movs	r1, #0
 8003c92:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	0018      	movs	r0, r3
 8003c98:	f7fd f972 	bl	8000f80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2288      	movs	r2, #136	@ 0x88
 8003ca0:	2124      	movs	r1, #36	@ 0x24
 8003ca2:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	2101      	movs	r1, #1
 8003cb0:	438a      	bics	r2, r1
 8003cb2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d003      	beq.n	8003cc4 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	0018      	movs	r0, r3
 8003cc0:	f000 f996 	bl	8003ff0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	0018      	movs	r0, r3
 8003cc8:	f000 f828 	bl	8003d1c <UART_SetConfig>
 8003ccc:	0003      	movs	r3, r0
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d101      	bne.n	8003cd6 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e01c      	b.n	8003d10 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	685a      	ldr	r2, [r3, #4]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	490d      	ldr	r1, [pc, #52]	@ (8003d18 <HAL_UART_Init+0xa8>)
 8003ce2:	400a      	ands	r2, r1
 8003ce4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	689a      	ldr	r2, [r3, #8]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	212a      	movs	r1, #42	@ 0x2a
 8003cf2:	438a      	bics	r2, r1
 8003cf4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	2101      	movs	r1, #1
 8003d02:	430a      	orrs	r2, r1
 8003d04:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	0018      	movs	r0, r3
 8003d0a:	f000 fa25 	bl	8004158 <UART_CheckIdleState>
 8003d0e:	0003      	movs	r3, r0
}
 8003d10:	0018      	movs	r0, r3
 8003d12:	46bd      	mov	sp, r7
 8003d14:	b002      	add	sp, #8
 8003d16:	bd80      	pop	{r7, pc}
 8003d18:	ffffb7ff 	.word	0xffffb7ff

08003d1c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b088      	sub	sp, #32
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003d24:	231a      	movs	r3, #26
 8003d26:	18fb      	adds	r3, r7, r3
 8003d28:	2200      	movs	r2, #0
 8003d2a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	689a      	ldr	r2, [r3, #8]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	691b      	ldr	r3, [r3, #16]
 8003d34:	431a      	orrs	r2, r3
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	695b      	ldr	r3, [r3, #20]
 8003d3a:	431a      	orrs	r2, r3
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	69db      	ldr	r3, [r3, #28]
 8003d40:	4313      	orrs	r3, r2
 8003d42:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4aa1      	ldr	r2, [pc, #644]	@ (8003fd0 <UART_SetConfig+0x2b4>)
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	0019      	movs	r1, r3
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	69fa      	ldr	r2, [r7, #28]
 8003d56:	430a      	orrs	r2, r1
 8003d58:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	4a9c      	ldr	r2, [pc, #624]	@ (8003fd4 <UART_SetConfig+0x2b8>)
 8003d62:	4013      	ands	r3, r2
 8003d64:	0019      	movs	r1, r3
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	68da      	ldr	r2, [r3, #12]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	430a      	orrs	r2, r1
 8003d70:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	699b      	ldr	r3, [r3, #24]
 8003d76:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6a1b      	ldr	r3, [r3, #32]
 8003d7c:	69fa      	ldr	r2, [r7, #28]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	4a93      	ldr	r2, [pc, #588]	@ (8003fd8 <UART_SetConfig+0x2bc>)
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	0019      	movs	r1, r3
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	69fa      	ldr	r2, [r7, #28]
 8003d94:	430a      	orrs	r2, r1
 8003d96:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d9e:	220f      	movs	r2, #15
 8003da0:	4393      	bics	r3, r2
 8003da2:	0019      	movs	r1, r3
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	430a      	orrs	r2, r1
 8003dae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a89      	ldr	r2, [pc, #548]	@ (8003fdc <UART_SetConfig+0x2c0>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d127      	bne.n	8003e0a <UART_SetConfig+0xee>
 8003dba:	4b89      	ldr	r3, [pc, #548]	@ (8003fe0 <UART_SetConfig+0x2c4>)
 8003dbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dbe:	2203      	movs	r2, #3
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	2b03      	cmp	r3, #3
 8003dc4:	d017      	beq.n	8003df6 <UART_SetConfig+0xda>
 8003dc6:	d81b      	bhi.n	8003e00 <UART_SetConfig+0xe4>
 8003dc8:	2b02      	cmp	r3, #2
 8003dca:	d00a      	beq.n	8003de2 <UART_SetConfig+0xc6>
 8003dcc:	d818      	bhi.n	8003e00 <UART_SetConfig+0xe4>
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d002      	beq.n	8003dd8 <UART_SetConfig+0xbc>
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	d00a      	beq.n	8003dec <UART_SetConfig+0xd0>
 8003dd6:	e013      	b.n	8003e00 <UART_SetConfig+0xe4>
 8003dd8:	231b      	movs	r3, #27
 8003dda:	18fb      	adds	r3, r7, r3
 8003ddc:	2200      	movs	r2, #0
 8003dde:	701a      	strb	r2, [r3, #0]
 8003de0:	e021      	b.n	8003e26 <UART_SetConfig+0x10a>
 8003de2:	231b      	movs	r3, #27
 8003de4:	18fb      	adds	r3, r7, r3
 8003de6:	2202      	movs	r2, #2
 8003de8:	701a      	strb	r2, [r3, #0]
 8003dea:	e01c      	b.n	8003e26 <UART_SetConfig+0x10a>
 8003dec:	231b      	movs	r3, #27
 8003dee:	18fb      	adds	r3, r7, r3
 8003df0:	2204      	movs	r2, #4
 8003df2:	701a      	strb	r2, [r3, #0]
 8003df4:	e017      	b.n	8003e26 <UART_SetConfig+0x10a>
 8003df6:	231b      	movs	r3, #27
 8003df8:	18fb      	adds	r3, r7, r3
 8003dfa:	2208      	movs	r2, #8
 8003dfc:	701a      	strb	r2, [r3, #0]
 8003dfe:	e012      	b.n	8003e26 <UART_SetConfig+0x10a>
 8003e00:	231b      	movs	r3, #27
 8003e02:	18fb      	adds	r3, r7, r3
 8003e04:	2210      	movs	r2, #16
 8003e06:	701a      	strb	r2, [r3, #0]
 8003e08:	e00d      	b.n	8003e26 <UART_SetConfig+0x10a>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a75      	ldr	r2, [pc, #468]	@ (8003fe4 <UART_SetConfig+0x2c8>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d104      	bne.n	8003e1e <UART_SetConfig+0x102>
 8003e14:	231b      	movs	r3, #27
 8003e16:	18fb      	adds	r3, r7, r3
 8003e18:	2200      	movs	r2, #0
 8003e1a:	701a      	strb	r2, [r3, #0]
 8003e1c:	e003      	b.n	8003e26 <UART_SetConfig+0x10a>
 8003e1e:	231b      	movs	r3, #27
 8003e20:	18fb      	adds	r3, r7, r3
 8003e22:	2210      	movs	r2, #16
 8003e24:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	69da      	ldr	r2, [r3, #28]
 8003e2a:	2380      	movs	r3, #128	@ 0x80
 8003e2c:	021b      	lsls	r3, r3, #8
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d000      	beq.n	8003e34 <UART_SetConfig+0x118>
 8003e32:	e065      	b.n	8003f00 <UART_SetConfig+0x1e4>
  {
    switch (clocksource)
 8003e34:	231b      	movs	r3, #27
 8003e36:	18fb      	adds	r3, r7, r3
 8003e38:	781b      	ldrb	r3, [r3, #0]
 8003e3a:	2b08      	cmp	r3, #8
 8003e3c:	d015      	beq.n	8003e6a <UART_SetConfig+0x14e>
 8003e3e:	dc18      	bgt.n	8003e72 <UART_SetConfig+0x156>
 8003e40:	2b04      	cmp	r3, #4
 8003e42:	d00d      	beq.n	8003e60 <UART_SetConfig+0x144>
 8003e44:	dc15      	bgt.n	8003e72 <UART_SetConfig+0x156>
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d002      	beq.n	8003e50 <UART_SetConfig+0x134>
 8003e4a:	2b02      	cmp	r3, #2
 8003e4c:	d005      	beq.n	8003e5a <UART_SetConfig+0x13e>
 8003e4e:	e010      	b.n	8003e72 <UART_SetConfig+0x156>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e50:	f7fe fed4 	bl	8002bfc <HAL_RCC_GetPCLK1Freq>
 8003e54:	0003      	movs	r3, r0
 8003e56:	617b      	str	r3, [r7, #20]
        break;
 8003e58:	e012      	b.n	8003e80 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e5a:	4b63      	ldr	r3, [pc, #396]	@ (8003fe8 <UART_SetConfig+0x2cc>)
 8003e5c:	617b      	str	r3, [r7, #20]
        break;
 8003e5e:	e00f      	b.n	8003e80 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e60:	f7fe fe40 	bl	8002ae4 <HAL_RCC_GetSysClockFreq>
 8003e64:	0003      	movs	r3, r0
 8003e66:	617b      	str	r3, [r7, #20]
        break;
 8003e68:	e00a      	b.n	8003e80 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e6a:	2380      	movs	r3, #128	@ 0x80
 8003e6c:	021b      	lsls	r3, r3, #8
 8003e6e:	617b      	str	r3, [r7, #20]
        break;
 8003e70:	e006      	b.n	8003e80 <UART_SetConfig+0x164>
      default:
        pclk = 0U;
 8003e72:	2300      	movs	r3, #0
 8003e74:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003e76:	231a      	movs	r3, #26
 8003e78:	18fb      	adds	r3, r7, r3
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	701a      	strb	r2, [r3, #0]
        break;
 8003e7e:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d100      	bne.n	8003e88 <UART_SetConfig+0x16c>
 8003e86:	e08d      	b.n	8003fa4 <UART_SetConfig+0x288>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003e8c:	4b57      	ldr	r3, [pc, #348]	@ (8003fec <UART_SetConfig+0x2d0>)
 8003e8e:	0052      	lsls	r2, r2, #1
 8003e90:	5ad3      	ldrh	r3, [r2, r3]
 8003e92:	0019      	movs	r1, r3
 8003e94:	6978      	ldr	r0, [r7, #20]
 8003e96:	f7fc f947 	bl	8000128 <__udivsi3>
 8003e9a:	0003      	movs	r3, r0
 8003e9c:	005a      	lsls	r2, r3, #1
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	085b      	lsrs	r3, r3, #1
 8003ea4:	18d2      	adds	r2, r2, r3
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	0019      	movs	r1, r3
 8003eac:	0010      	movs	r0, r2
 8003eae:	f7fc f93b 	bl	8000128 <__udivsi3>
 8003eb2:	0003      	movs	r3, r0
 8003eb4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	2b0f      	cmp	r3, #15
 8003eba:	d91c      	bls.n	8003ef6 <UART_SetConfig+0x1da>
 8003ebc:	693a      	ldr	r2, [r7, #16]
 8003ebe:	2380      	movs	r3, #128	@ 0x80
 8003ec0:	025b      	lsls	r3, r3, #9
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	d217      	bcs.n	8003ef6 <UART_SetConfig+0x1da>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	b29a      	uxth	r2, r3
 8003eca:	200e      	movs	r0, #14
 8003ecc:	183b      	adds	r3, r7, r0
 8003ece:	210f      	movs	r1, #15
 8003ed0:	438a      	bics	r2, r1
 8003ed2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	085b      	lsrs	r3, r3, #1
 8003ed8:	b29b      	uxth	r3, r3
 8003eda:	2207      	movs	r2, #7
 8003edc:	4013      	ands	r3, r2
 8003ede:	b299      	uxth	r1, r3
 8003ee0:	183b      	adds	r3, r7, r0
 8003ee2:	183a      	adds	r2, r7, r0
 8003ee4:	8812      	ldrh	r2, [r2, #0]
 8003ee6:	430a      	orrs	r2, r1
 8003ee8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	183a      	adds	r2, r7, r0
 8003ef0:	8812      	ldrh	r2, [r2, #0]
 8003ef2:	60da      	str	r2, [r3, #12]
 8003ef4:	e056      	b.n	8003fa4 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 8003ef6:	231a      	movs	r3, #26
 8003ef8:	18fb      	adds	r3, r7, r3
 8003efa:	2201      	movs	r2, #1
 8003efc:	701a      	strb	r2, [r3, #0]
 8003efe:	e051      	b.n	8003fa4 <UART_SetConfig+0x288>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003f00:	231b      	movs	r3, #27
 8003f02:	18fb      	adds	r3, r7, r3
 8003f04:	781b      	ldrb	r3, [r3, #0]
 8003f06:	2b08      	cmp	r3, #8
 8003f08:	d015      	beq.n	8003f36 <UART_SetConfig+0x21a>
 8003f0a:	dc18      	bgt.n	8003f3e <UART_SetConfig+0x222>
 8003f0c:	2b04      	cmp	r3, #4
 8003f0e:	d00d      	beq.n	8003f2c <UART_SetConfig+0x210>
 8003f10:	dc15      	bgt.n	8003f3e <UART_SetConfig+0x222>
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d002      	beq.n	8003f1c <UART_SetConfig+0x200>
 8003f16:	2b02      	cmp	r3, #2
 8003f18:	d005      	beq.n	8003f26 <UART_SetConfig+0x20a>
 8003f1a:	e010      	b.n	8003f3e <UART_SetConfig+0x222>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f1c:	f7fe fe6e 	bl	8002bfc <HAL_RCC_GetPCLK1Freq>
 8003f20:	0003      	movs	r3, r0
 8003f22:	617b      	str	r3, [r7, #20]
        break;
 8003f24:	e012      	b.n	8003f4c <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f26:	4b30      	ldr	r3, [pc, #192]	@ (8003fe8 <UART_SetConfig+0x2cc>)
 8003f28:	617b      	str	r3, [r7, #20]
        break;
 8003f2a:	e00f      	b.n	8003f4c <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f2c:	f7fe fdda 	bl	8002ae4 <HAL_RCC_GetSysClockFreq>
 8003f30:	0003      	movs	r3, r0
 8003f32:	617b      	str	r3, [r7, #20]
        break;
 8003f34:	e00a      	b.n	8003f4c <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f36:	2380      	movs	r3, #128	@ 0x80
 8003f38:	021b      	lsls	r3, r3, #8
 8003f3a:	617b      	str	r3, [r7, #20]
        break;
 8003f3c:	e006      	b.n	8003f4c <UART_SetConfig+0x230>
      default:
        pclk = 0U;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003f42:	231a      	movs	r3, #26
 8003f44:	18fb      	adds	r3, r7, r3
 8003f46:	2201      	movs	r2, #1
 8003f48:	701a      	strb	r2, [r3, #0]
        break;
 8003f4a:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d028      	beq.n	8003fa4 <UART_SetConfig+0x288>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003f56:	4b25      	ldr	r3, [pc, #148]	@ (8003fec <UART_SetConfig+0x2d0>)
 8003f58:	0052      	lsls	r2, r2, #1
 8003f5a:	5ad3      	ldrh	r3, [r2, r3]
 8003f5c:	0019      	movs	r1, r3
 8003f5e:	6978      	ldr	r0, [r7, #20]
 8003f60:	f7fc f8e2 	bl	8000128 <__udivsi3>
 8003f64:	0003      	movs	r3, r0
 8003f66:	001a      	movs	r2, r3
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	085b      	lsrs	r3, r3, #1
 8003f6e:	18d2      	adds	r2, r2, r3
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	0019      	movs	r1, r3
 8003f76:	0010      	movs	r0, r2
 8003f78:	f7fc f8d6 	bl	8000128 <__udivsi3>
 8003f7c:	0003      	movs	r3, r0
 8003f7e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	2b0f      	cmp	r3, #15
 8003f84:	d90a      	bls.n	8003f9c <UART_SetConfig+0x280>
 8003f86:	693a      	ldr	r2, [r7, #16]
 8003f88:	2380      	movs	r3, #128	@ 0x80
 8003f8a:	025b      	lsls	r3, r3, #9
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d205      	bcs.n	8003f9c <UART_SetConfig+0x280>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	b29a      	uxth	r2, r3
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	60da      	str	r2, [r3, #12]
 8003f9a:	e003      	b.n	8003fa4 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 8003f9c:	231a      	movs	r3, #26
 8003f9e:	18fb      	adds	r3, r7, r3
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	226a      	movs	r2, #106	@ 0x6a
 8003fa8:	2101      	movs	r1, #1
 8003faa:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2268      	movs	r2, #104	@ 0x68
 8003fb0:	2101      	movs	r1, #1
 8003fb2:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003fc0:	231a      	movs	r3, #26
 8003fc2:	18fb      	adds	r3, r7, r3
 8003fc4:	781b      	ldrb	r3, [r3, #0]
}
 8003fc6:	0018      	movs	r0, r3
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	b008      	add	sp, #32
 8003fcc:	bd80      	pop	{r7, pc}
 8003fce:	46c0      	nop			@ (mov r8, r8)
 8003fd0:	cfff69f3 	.word	0xcfff69f3
 8003fd4:	ffffcfff 	.word	0xffffcfff
 8003fd8:	11fff4ff 	.word	0x11fff4ff
 8003fdc:	40013800 	.word	0x40013800
 8003fe0:	40021000 	.word	0x40021000
 8003fe4:	40004400 	.word	0x40004400
 8003fe8:	00f42400 	.word	0x00f42400
 8003fec:	08005510 	.word	0x08005510

08003ff0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b082      	sub	sp, #8
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ffc:	2208      	movs	r2, #8
 8003ffe:	4013      	ands	r3, r2
 8004000:	d00b      	beq.n	800401a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	4a4a      	ldr	r2, [pc, #296]	@ (8004134 <UART_AdvFeatureConfig+0x144>)
 800400a:	4013      	ands	r3, r2
 800400c:	0019      	movs	r1, r3
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	430a      	orrs	r2, r1
 8004018:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800401e:	2201      	movs	r2, #1
 8004020:	4013      	ands	r3, r2
 8004022:	d00b      	beq.n	800403c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	4a43      	ldr	r2, [pc, #268]	@ (8004138 <UART_AdvFeatureConfig+0x148>)
 800402c:	4013      	ands	r3, r2
 800402e:	0019      	movs	r1, r3
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	430a      	orrs	r2, r1
 800403a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004040:	2202      	movs	r2, #2
 8004042:	4013      	ands	r3, r2
 8004044:	d00b      	beq.n	800405e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	4a3b      	ldr	r2, [pc, #236]	@ (800413c <UART_AdvFeatureConfig+0x14c>)
 800404e:	4013      	ands	r3, r2
 8004050:	0019      	movs	r1, r3
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	430a      	orrs	r2, r1
 800405c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004062:	2204      	movs	r2, #4
 8004064:	4013      	ands	r3, r2
 8004066:	d00b      	beq.n	8004080 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	4a34      	ldr	r2, [pc, #208]	@ (8004140 <UART_AdvFeatureConfig+0x150>)
 8004070:	4013      	ands	r3, r2
 8004072:	0019      	movs	r1, r3
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	430a      	orrs	r2, r1
 800407e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004084:	2210      	movs	r2, #16
 8004086:	4013      	ands	r3, r2
 8004088:	d00b      	beq.n	80040a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	4a2c      	ldr	r2, [pc, #176]	@ (8004144 <UART_AdvFeatureConfig+0x154>)
 8004092:	4013      	ands	r3, r2
 8004094:	0019      	movs	r1, r3
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	430a      	orrs	r2, r1
 80040a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040a6:	2220      	movs	r2, #32
 80040a8:	4013      	ands	r3, r2
 80040aa:	d00b      	beq.n	80040c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	4a25      	ldr	r2, [pc, #148]	@ (8004148 <UART_AdvFeatureConfig+0x158>)
 80040b4:	4013      	ands	r3, r2
 80040b6:	0019      	movs	r1, r3
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	430a      	orrs	r2, r1
 80040c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040c8:	2240      	movs	r2, #64	@ 0x40
 80040ca:	4013      	ands	r3, r2
 80040cc:	d01d      	beq.n	800410a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	4a1d      	ldr	r2, [pc, #116]	@ (800414c <UART_AdvFeatureConfig+0x15c>)
 80040d6:	4013      	ands	r3, r2
 80040d8:	0019      	movs	r1, r3
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	430a      	orrs	r2, r1
 80040e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80040ea:	2380      	movs	r3, #128	@ 0x80
 80040ec:	035b      	lsls	r3, r3, #13
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d10b      	bne.n	800410a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	4a15      	ldr	r2, [pc, #84]	@ (8004150 <UART_AdvFeatureConfig+0x160>)
 80040fa:	4013      	ands	r3, r2
 80040fc:	0019      	movs	r1, r3
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	430a      	orrs	r2, r1
 8004108:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800410e:	2280      	movs	r2, #128	@ 0x80
 8004110:	4013      	ands	r3, r2
 8004112:	d00b      	beq.n	800412c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	4a0e      	ldr	r2, [pc, #56]	@ (8004154 <UART_AdvFeatureConfig+0x164>)
 800411c:	4013      	ands	r3, r2
 800411e:	0019      	movs	r1, r3
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	430a      	orrs	r2, r1
 800412a:	605a      	str	r2, [r3, #4]
  }
}
 800412c:	46c0      	nop			@ (mov r8, r8)
 800412e:	46bd      	mov	sp, r7
 8004130:	b002      	add	sp, #8
 8004132:	bd80      	pop	{r7, pc}
 8004134:	ffff7fff 	.word	0xffff7fff
 8004138:	fffdffff 	.word	0xfffdffff
 800413c:	fffeffff 	.word	0xfffeffff
 8004140:	fffbffff 	.word	0xfffbffff
 8004144:	ffffefff 	.word	0xffffefff
 8004148:	ffffdfff 	.word	0xffffdfff
 800414c:	ffefffff 	.word	0xffefffff
 8004150:	ff9fffff 	.word	0xff9fffff
 8004154:	fff7ffff 	.word	0xfff7ffff

08004158 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b092      	sub	sp, #72	@ 0x48
 800415c:	af02      	add	r7, sp, #8
 800415e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2290      	movs	r2, #144	@ 0x90
 8004164:	2100      	movs	r1, #0
 8004166:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004168:	f7fd f8c2 	bl	80012f0 <HAL_GetTick>
 800416c:	0003      	movs	r3, r0
 800416e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	2208      	movs	r2, #8
 8004178:	4013      	ands	r3, r2
 800417a:	2b08      	cmp	r3, #8
 800417c:	d12d      	bne.n	80041da <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800417e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004180:	2280      	movs	r2, #128	@ 0x80
 8004182:	0391      	lsls	r1, r2, #14
 8004184:	6878      	ldr	r0, [r7, #4]
 8004186:	4a47      	ldr	r2, [pc, #284]	@ (80042a4 <UART_CheckIdleState+0x14c>)
 8004188:	9200      	str	r2, [sp, #0]
 800418a:	2200      	movs	r2, #0
 800418c:	f000 f88e 	bl	80042ac <UART_WaitOnFlagUntilTimeout>
 8004190:	1e03      	subs	r3, r0, #0
 8004192:	d022      	beq.n	80041da <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004194:	f3ef 8310 	mrs	r3, PRIMASK
 8004198:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800419a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800419c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800419e:	2301      	movs	r3, #1
 80041a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041a4:	f383 8810 	msr	PRIMASK, r3
}
 80041a8:	46c0      	nop			@ (mov r8, r8)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	2180      	movs	r1, #128	@ 0x80
 80041b6:	438a      	bics	r2, r1
 80041b8:	601a      	str	r2, [r3, #0]
 80041ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041c0:	f383 8810 	msr	PRIMASK, r3
}
 80041c4:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2288      	movs	r2, #136	@ 0x88
 80041ca:	2120      	movs	r1, #32
 80041cc:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2284      	movs	r2, #132	@ 0x84
 80041d2:	2100      	movs	r1, #0
 80041d4:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80041d6:	2303      	movs	r3, #3
 80041d8:	e060      	b.n	800429c <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	2204      	movs	r2, #4
 80041e2:	4013      	ands	r3, r2
 80041e4:	2b04      	cmp	r3, #4
 80041e6:	d146      	bne.n	8004276 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041ea:	2280      	movs	r2, #128	@ 0x80
 80041ec:	03d1      	lsls	r1, r2, #15
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	4a2c      	ldr	r2, [pc, #176]	@ (80042a4 <UART_CheckIdleState+0x14c>)
 80041f2:	9200      	str	r2, [sp, #0]
 80041f4:	2200      	movs	r2, #0
 80041f6:	f000 f859 	bl	80042ac <UART_WaitOnFlagUntilTimeout>
 80041fa:	1e03      	subs	r3, r0, #0
 80041fc:	d03b      	beq.n	8004276 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041fe:	f3ef 8310 	mrs	r3, PRIMASK
 8004202:	60fb      	str	r3, [r7, #12]
  return(result);
 8004204:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004206:	637b      	str	r3, [r7, #52]	@ 0x34
 8004208:	2301      	movs	r3, #1
 800420a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	f383 8810 	msr	PRIMASK, r3
}
 8004212:	46c0      	nop			@ (mov r8, r8)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4922      	ldr	r1, [pc, #136]	@ (80042a8 <UART_CheckIdleState+0x150>)
 8004220:	400a      	ands	r2, r1
 8004222:	601a      	str	r2, [r3, #0]
 8004224:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004226:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	f383 8810 	msr	PRIMASK, r3
}
 800422e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004230:	f3ef 8310 	mrs	r3, PRIMASK
 8004234:	61bb      	str	r3, [r7, #24]
  return(result);
 8004236:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004238:	633b      	str	r3, [r7, #48]	@ 0x30
 800423a:	2301      	movs	r3, #1
 800423c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800423e:	69fb      	ldr	r3, [r7, #28]
 8004240:	f383 8810 	msr	PRIMASK, r3
}
 8004244:	46c0      	nop			@ (mov r8, r8)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	689a      	ldr	r2, [r3, #8]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	2101      	movs	r1, #1
 8004252:	438a      	bics	r2, r1
 8004254:	609a      	str	r2, [r3, #8]
 8004256:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004258:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800425a:	6a3b      	ldr	r3, [r7, #32]
 800425c:	f383 8810 	msr	PRIMASK, r3
}
 8004260:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	228c      	movs	r2, #140	@ 0x8c
 8004266:	2120      	movs	r1, #32
 8004268:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2284      	movs	r2, #132	@ 0x84
 800426e:	2100      	movs	r1, #0
 8004270:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004272:	2303      	movs	r3, #3
 8004274:	e012      	b.n	800429c <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2288      	movs	r2, #136	@ 0x88
 800427a:	2120      	movs	r1, #32
 800427c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	228c      	movs	r2, #140	@ 0x8c
 8004282:	2120      	movs	r1, #32
 8004284:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2200      	movs	r2, #0
 800428a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2200      	movs	r2, #0
 8004290:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2284      	movs	r2, #132	@ 0x84
 8004296:	2100      	movs	r1, #0
 8004298:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800429a:	2300      	movs	r3, #0
}
 800429c:	0018      	movs	r0, r3
 800429e:	46bd      	mov	sp, r7
 80042a0:	b010      	add	sp, #64	@ 0x40
 80042a2:	bd80      	pop	{r7, pc}
 80042a4:	01ffffff 	.word	0x01ffffff
 80042a8:	fffffedf 	.word	0xfffffedf

080042ac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b084      	sub	sp, #16
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	60f8      	str	r0, [r7, #12]
 80042b4:	60b9      	str	r1, [r7, #8]
 80042b6:	603b      	str	r3, [r7, #0]
 80042b8:	1dfb      	adds	r3, r7, #7
 80042ba:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042bc:	e051      	b.n	8004362 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042be:	69bb      	ldr	r3, [r7, #24]
 80042c0:	3301      	adds	r3, #1
 80042c2:	d04e      	beq.n	8004362 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042c4:	f7fd f814 	bl	80012f0 <HAL_GetTick>
 80042c8:	0002      	movs	r2, r0
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	1ad3      	subs	r3, r2, r3
 80042ce:	69ba      	ldr	r2, [r7, #24]
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d302      	bcc.n	80042da <UART_WaitOnFlagUntilTimeout+0x2e>
 80042d4:	69bb      	ldr	r3, [r7, #24]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d101      	bne.n	80042de <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80042da:	2303      	movs	r3, #3
 80042dc:	e051      	b.n	8004382 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	2204      	movs	r2, #4
 80042e6:	4013      	ands	r3, r2
 80042e8:	d03b      	beq.n	8004362 <UART_WaitOnFlagUntilTimeout+0xb6>
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	2b80      	cmp	r3, #128	@ 0x80
 80042ee:	d038      	beq.n	8004362 <UART_WaitOnFlagUntilTimeout+0xb6>
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	2b40      	cmp	r3, #64	@ 0x40
 80042f4:	d035      	beq.n	8004362 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	69db      	ldr	r3, [r3, #28]
 80042fc:	2208      	movs	r2, #8
 80042fe:	4013      	ands	r3, r2
 8004300:	2b08      	cmp	r3, #8
 8004302:	d111      	bne.n	8004328 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	2208      	movs	r2, #8
 800430a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	0018      	movs	r0, r3
 8004310:	f000 f83c 	bl	800438c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2290      	movs	r2, #144	@ 0x90
 8004318:	2108      	movs	r1, #8
 800431a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2284      	movs	r2, #132	@ 0x84
 8004320:	2100      	movs	r1, #0
 8004322:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	e02c      	b.n	8004382 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	69da      	ldr	r2, [r3, #28]
 800432e:	2380      	movs	r3, #128	@ 0x80
 8004330:	011b      	lsls	r3, r3, #4
 8004332:	401a      	ands	r2, r3
 8004334:	2380      	movs	r3, #128	@ 0x80
 8004336:	011b      	lsls	r3, r3, #4
 8004338:	429a      	cmp	r2, r3
 800433a:	d112      	bne.n	8004362 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	2280      	movs	r2, #128	@ 0x80
 8004342:	0112      	lsls	r2, r2, #4
 8004344:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	0018      	movs	r0, r3
 800434a:	f000 f81f 	bl	800438c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2290      	movs	r2, #144	@ 0x90
 8004352:	2120      	movs	r1, #32
 8004354:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2284      	movs	r2, #132	@ 0x84
 800435a:	2100      	movs	r1, #0
 800435c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800435e:	2303      	movs	r3, #3
 8004360:	e00f      	b.n	8004382 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	69db      	ldr	r3, [r3, #28]
 8004368:	68ba      	ldr	r2, [r7, #8]
 800436a:	4013      	ands	r3, r2
 800436c:	68ba      	ldr	r2, [r7, #8]
 800436e:	1ad3      	subs	r3, r2, r3
 8004370:	425a      	negs	r2, r3
 8004372:	4153      	adcs	r3, r2
 8004374:	b2db      	uxtb	r3, r3
 8004376:	001a      	movs	r2, r3
 8004378:	1dfb      	adds	r3, r7, #7
 800437a:	781b      	ldrb	r3, [r3, #0]
 800437c:	429a      	cmp	r2, r3
 800437e:	d09e      	beq.n	80042be <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004380:	2300      	movs	r3, #0
}
 8004382:	0018      	movs	r0, r3
 8004384:	46bd      	mov	sp, r7
 8004386:	b004      	add	sp, #16
 8004388:	bd80      	pop	{r7, pc}
	...

0800438c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b08e      	sub	sp, #56	@ 0x38
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004394:	f3ef 8310 	mrs	r3, PRIMASK
 8004398:	617b      	str	r3, [r7, #20]
  return(result);
 800439a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800439c:	637b      	str	r3, [r7, #52]	@ 0x34
 800439e:	2301      	movs	r3, #1
 80043a0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043a2:	69bb      	ldr	r3, [r7, #24]
 80043a4:	f383 8810 	msr	PRIMASK, r3
}
 80043a8:	46c0      	nop			@ (mov r8, r8)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4926      	ldr	r1, [pc, #152]	@ (8004450 <UART_EndRxTransfer+0xc4>)
 80043b6:	400a      	ands	r2, r1
 80043b8:	601a      	str	r2, [r3, #0]
 80043ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043bc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043be:	69fb      	ldr	r3, [r7, #28]
 80043c0:	f383 8810 	msr	PRIMASK, r3
}
 80043c4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043c6:	f3ef 8310 	mrs	r3, PRIMASK
 80043ca:	623b      	str	r3, [r7, #32]
  return(result);
 80043cc:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80043ce:	633b      	str	r3, [r7, #48]	@ 0x30
 80043d0:	2301      	movs	r3, #1
 80043d2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043d6:	f383 8810 	msr	PRIMASK, r3
}
 80043da:	46c0      	nop			@ (mov r8, r8)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	689a      	ldr	r2, [r3, #8]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	491b      	ldr	r1, [pc, #108]	@ (8004454 <UART_EndRxTransfer+0xc8>)
 80043e8:	400a      	ands	r2, r1
 80043ea:	609a      	str	r2, [r3, #8]
 80043ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043f2:	f383 8810 	msr	PRIMASK, r3
}
 80043f6:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d118      	bne.n	8004432 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004400:	f3ef 8310 	mrs	r3, PRIMASK
 8004404:	60bb      	str	r3, [r7, #8]
  return(result);
 8004406:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004408:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800440a:	2301      	movs	r3, #1
 800440c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	f383 8810 	msr	PRIMASK, r3
}
 8004414:	46c0      	nop			@ (mov r8, r8)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	2110      	movs	r1, #16
 8004422:	438a      	bics	r2, r1
 8004424:	601a      	str	r2, [r3, #0]
 8004426:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004428:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	f383 8810 	msr	PRIMASK, r3
}
 8004430:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	228c      	movs	r2, #140	@ 0x8c
 8004436:	2120      	movs	r1, #32
 8004438:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2200      	movs	r2, #0
 800443e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2200      	movs	r2, #0
 8004444:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004446:	46c0      	nop			@ (mov r8, r8)
 8004448:	46bd      	mov	sp, r7
 800444a:	b00e      	add	sp, #56	@ 0x38
 800444c:	bd80      	pop	{r7, pc}
 800444e:	46c0      	nop			@ (mov r8, r8)
 8004450:	fffffedf 	.word	0xfffffedf
 8004454:	effffffe 	.word	0xeffffffe

08004458 <atoi>:
 8004458:	b510      	push	{r4, lr}
 800445a:	220a      	movs	r2, #10
 800445c:	2100      	movs	r1, #0
 800445e:	f000 f88b 	bl	8004578 <strtol>
 8004462:	bd10      	pop	{r4, pc}

08004464 <_strtol_l.constprop.0>:
 8004464:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004466:	b085      	sub	sp, #20
 8004468:	0017      	movs	r7, r2
 800446a:	001e      	movs	r6, r3
 800446c:	9003      	str	r0, [sp, #12]
 800446e:	9101      	str	r1, [sp, #4]
 8004470:	2b24      	cmp	r3, #36	@ 0x24
 8004472:	d844      	bhi.n	80044fe <_strtol_l.constprop.0+0x9a>
 8004474:	000c      	movs	r4, r1
 8004476:	2b01      	cmp	r3, #1
 8004478:	d041      	beq.n	80044fe <_strtol_l.constprop.0+0x9a>
 800447a:	4b3d      	ldr	r3, [pc, #244]	@ (8004570 <_strtol_l.constprop.0+0x10c>)
 800447c:	2208      	movs	r2, #8
 800447e:	469c      	mov	ip, r3
 8004480:	0023      	movs	r3, r4
 8004482:	4661      	mov	r1, ip
 8004484:	781d      	ldrb	r5, [r3, #0]
 8004486:	3401      	adds	r4, #1
 8004488:	5d48      	ldrb	r0, [r1, r5]
 800448a:	0001      	movs	r1, r0
 800448c:	4011      	ands	r1, r2
 800448e:	4210      	tst	r0, r2
 8004490:	d1f6      	bne.n	8004480 <_strtol_l.constprop.0+0x1c>
 8004492:	2d2d      	cmp	r5, #45	@ 0x2d
 8004494:	d13a      	bne.n	800450c <_strtol_l.constprop.0+0xa8>
 8004496:	7825      	ldrb	r5, [r4, #0]
 8004498:	1c9c      	adds	r4, r3, #2
 800449a:	2301      	movs	r3, #1
 800449c:	9300      	str	r3, [sp, #0]
 800449e:	2210      	movs	r2, #16
 80044a0:	0033      	movs	r3, r6
 80044a2:	4393      	bics	r3, r2
 80044a4:	d109      	bne.n	80044ba <_strtol_l.constprop.0+0x56>
 80044a6:	2d30      	cmp	r5, #48	@ 0x30
 80044a8:	d136      	bne.n	8004518 <_strtol_l.constprop.0+0xb4>
 80044aa:	2120      	movs	r1, #32
 80044ac:	7823      	ldrb	r3, [r4, #0]
 80044ae:	438b      	bics	r3, r1
 80044b0:	2b58      	cmp	r3, #88	@ 0x58
 80044b2:	d131      	bne.n	8004518 <_strtol_l.constprop.0+0xb4>
 80044b4:	0016      	movs	r6, r2
 80044b6:	7865      	ldrb	r5, [r4, #1]
 80044b8:	3402      	adds	r4, #2
 80044ba:	4a2e      	ldr	r2, [pc, #184]	@ (8004574 <_strtol_l.constprop.0+0x110>)
 80044bc:	9b00      	ldr	r3, [sp, #0]
 80044be:	4694      	mov	ip, r2
 80044c0:	4463      	add	r3, ip
 80044c2:	0031      	movs	r1, r6
 80044c4:	0018      	movs	r0, r3
 80044c6:	9302      	str	r3, [sp, #8]
 80044c8:	f7fb feb4 	bl	8000234 <__aeabi_uidivmod>
 80044cc:	2200      	movs	r2, #0
 80044ce:	4684      	mov	ip, r0
 80044d0:	0010      	movs	r0, r2
 80044d2:	002b      	movs	r3, r5
 80044d4:	3b30      	subs	r3, #48	@ 0x30
 80044d6:	2b09      	cmp	r3, #9
 80044d8:	d825      	bhi.n	8004526 <_strtol_l.constprop.0+0xc2>
 80044da:	001d      	movs	r5, r3
 80044dc:	42ae      	cmp	r6, r5
 80044de:	dd31      	ble.n	8004544 <_strtol_l.constprop.0+0xe0>
 80044e0:	1c53      	adds	r3, r2, #1
 80044e2:	d009      	beq.n	80044f8 <_strtol_l.constprop.0+0x94>
 80044e4:	2201      	movs	r2, #1
 80044e6:	4252      	negs	r2, r2
 80044e8:	4584      	cmp	ip, r0
 80044ea:	d305      	bcc.n	80044f8 <_strtol_l.constprop.0+0x94>
 80044ec:	d101      	bne.n	80044f2 <_strtol_l.constprop.0+0x8e>
 80044ee:	42a9      	cmp	r1, r5
 80044f0:	db25      	blt.n	800453e <_strtol_l.constprop.0+0xda>
 80044f2:	2201      	movs	r2, #1
 80044f4:	4370      	muls	r0, r6
 80044f6:	1828      	adds	r0, r5, r0
 80044f8:	7825      	ldrb	r5, [r4, #0]
 80044fa:	3401      	adds	r4, #1
 80044fc:	e7e9      	b.n	80044d2 <_strtol_l.constprop.0+0x6e>
 80044fe:	f000 f9bd 	bl	800487c <__errno>
 8004502:	2316      	movs	r3, #22
 8004504:	6003      	str	r3, [r0, #0]
 8004506:	2000      	movs	r0, #0
 8004508:	b005      	add	sp, #20
 800450a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800450c:	9100      	str	r1, [sp, #0]
 800450e:	2d2b      	cmp	r5, #43	@ 0x2b
 8004510:	d1c5      	bne.n	800449e <_strtol_l.constprop.0+0x3a>
 8004512:	7825      	ldrb	r5, [r4, #0]
 8004514:	1c9c      	adds	r4, r3, #2
 8004516:	e7c2      	b.n	800449e <_strtol_l.constprop.0+0x3a>
 8004518:	2e00      	cmp	r6, #0
 800451a:	d1ce      	bne.n	80044ba <_strtol_l.constprop.0+0x56>
 800451c:	3608      	adds	r6, #8
 800451e:	2d30      	cmp	r5, #48	@ 0x30
 8004520:	d0cb      	beq.n	80044ba <_strtol_l.constprop.0+0x56>
 8004522:	3602      	adds	r6, #2
 8004524:	e7c9      	b.n	80044ba <_strtol_l.constprop.0+0x56>
 8004526:	002b      	movs	r3, r5
 8004528:	3b41      	subs	r3, #65	@ 0x41
 800452a:	2b19      	cmp	r3, #25
 800452c:	d801      	bhi.n	8004532 <_strtol_l.constprop.0+0xce>
 800452e:	3d37      	subs	r5, #55	@ 0x37
 8004530:	e7d4      	b.n	80044dc <_strtol_l.constprop.0+0x78>
 8004532:	002b      	movs	r3, r5
 8004534:	3b61      	subs	r3, #97	@ 0x61
 8004536:	2b19      	cmp	r3, #25
 8004538:	d804      	bhi.n	8004544 <_strtol_l.constprop.0+0xe0>
 800453a:	3d57      	subs	r5, #87	@ 0x57
 800453c:	e7ce      	b.n	80044dc <_strtol_l.constprop.0+0x78>
 800453e:	2201      	movs	r2, #1
 8004540:	4252      	negs	r2, r2
 8004542:	e7d9      	b.n	80044f8 <_strtol_l.constprop.0+0x94>
 8004544:	1c53      	adds	r3, r2, #1
 8004546:	d108      	bne.n	800455a <_strtol_l.constprop.0+0xf6>
 8004548:	2322      	movs	r3, #34	@ 0x22
 800454a:	9a03      	ldr	r2, [sp, #12]
 800454c:	9802      	ldr	r0, [sp, #8]
 800454e:	6013      	str	r3, [r2, #0]
 8004550:	2f00      	cmp	r7, #0
 8004552:	d0d9      	beq.n	8004508 <_strtol_l.constprop.0+0xa4>
 8004554:	1e63      	subs	r3, r4, #1
 8004556:	9301      	str	r3, [sp, #4]
 8004558:	e007      	b.n	800456a <_strtol_l.constprop.0+0x106>
 800455a:	9b00      	ldr	r3, [sp, #0]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d000      	beq.n	8004562 <_strtol_l.constprop.0+0xfe>
 8004560:	4240      	negs	r0, r0
 8004562:	2f00      	cmp	r7, #0
 8004564:	d0d0      	beq.n	8004508 <_strtol_l.constprop.0+0xa4>
 8004566:	2a00      	cmp	r2, #0
 8004568:	d1f4      	bne.n	8004554 <_strtol_l.constprop.0+0xf0>
 800456a:	9b01      	ldr	r3, [sp, #4]
 800456c:	603b      	str	r3, [r7, #0]
 800456e:	e7cb      	b.n	8004508 <_strtol_l.constprop.0+0xa4>
 8004570:	08005529 	.word	0x08005529
 8004574:	7fffffff 	.word	0x7fffffff

08004578 <strtol>:
 8004578:	b510      	push	{r4, lr}
 800457a:	4c04      	ldr	r4, [pc, #16]	@ (800458c <strtol+0x14>)
 800457c:	0013      	movs	r3, r2
 800457e:	000a      	movs	r2, r1
 8004580:	0001      	movs	r1, r0
 8004582:	6820      	ldr	r0, [r4, #0]
 8004584:	f7ff ff6e 	bl	8004464 <_strtol_l.constprop.0>
 8004588:	bd10      	pop	{r4, pc}
 800458a:	46c0      	nop			@ (mov r8, r8)
 800458c:	20000318 	.word	0x20000318

08004590 <std>:
 8004590:	2300      	movs	r3, #0
 8004592:	b510      	push	{r4, lr}
 8004594:	0004      	movs	r4, r0
 8004596:	6003      	str	r3, [r0, #0]
 8004598:	6043      	str	r3, [r0, #4]
 800459a:	6083      	str	r3, [r0, #8]
 800459c:	8181      	strh	r1, [r0, #12]
 800459e:	6643      	str	r3, [r0, #100]	@ 0x64
 80045a0:	81c2      	strh	r2, [r0, #14]
 80045a2:	6103      	str	r3, [r0, #16]
 80045a4:	6143      	str	r3, [r0, #20]
 80045a6:	6183      	str	r3, [r0, #24]
 80045a8:	0019      	movs	r1, r3
 80045aa:	2208      	movs	r2, #8
 80045ac:	305c      	adds	r0, #92	@ 0x5c
 80045ae:	f000 f90f 	bl	80047d0 <memset>
 80045b2:	4b0b      	ldr	r3, [pc, #44]	@ (80045e0 <std+0x50>)
 80045b4:	6224      	str	r4, [r4, #32]
 80045b6:	6263      	str	r3, [r4, #36]	@ 0x24
 80045b8:	4b0a      	ldr	r3, [pc, #40]	@ (80045e4 <std+0x54>)
 80045ba:	62a3      	str	r3, [r4, #40]	@ 0x28
 80045bc:	4b0a      	ldr	r3, [pc, #40]	@ (80045e8 <std+0x58>)
 80045be:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80045c0:	4b0a      	ldr	r3, [pc, #40]	@ (80045ec <std+0x5c>)
 80045c2:	6323      	str	r3, [r4, #48]	@ 0x30
 80045c4:	4b0a      	ldr	r3, [pc, #40]	@ (80045f0 <std+0x60>)
 80045c6:	429c      	cmp	r4, r3
 80045c8:	d005      	beq.n	80045d6 <std+0x46>
 80045ca:	4b0a      	ldr	r3, [pc, #40]	@ (80045f4 <std+0x64>)
 80045cc:	429c      	cmp	r4, r3
 80045ce:	d002      	beq.n	80045d6 <std+0x46>
 80045d0:	4b09      	ldr	r3, [pc, #36]	@ (80045f8 <std+0x68>)
 80045d2:	429c      	cmp	r4, r3
 80045d4:	d103      	bne.n	80045de <std+0x4e>
 80045d6:	0020      	movs	r0, r4
 80045d8:	3058      	adds	r0, #88	@ 0x58
 80045da:	f000 f979 	bl	80048d0 <__retarget_lock_init_recursive>
 80045de:	bd10      	pop	{r4, pc}
 80045e0:	08004739 	.word	0x08004739
 80045e4:	08004761 	.word	0x08004761
 80045e8:	08004799 	.word	0x08004799
 80045ec:	080047c5 	.word	0x080047c5
 80045f0:	20000a54 	.word	0x20000a54
 80045f4:	20000abc 	.word	0x20000abc
 80045f8:	20000b24 	.word	0x20000b24

080045fc <stdio_exit_handler>:
 80045fc:	b510      	push	{r4, lr}
 80045fe:	4a03      	ldr	r2, [pc, #12]	@ (800460c <stdio_exit_handler+0x10>)
 8004600:	4903      	ldr	r1, [pc, #12]	@ (8004610 <stdio_exit_handler+0x14>)
 8004602:	4804      	ldr	r0, [pc, #16]	@ (8004614 <stdio_exit_handler+0x18>)
 8004604:	f000 f86c 	bl	80046e0 <_fwalk_sglue>
 8004608:	bd10      	pop	{r4, pc}
 800460a:	46c0      	nop			@ (mov r8, r8)
 800460c:	2000030c 	.word	0x2000030c
 8004610:	08005161 	.word	0x08005161
 8004614:	2000031c 	.word	0x2000031c

08004618 <cleanup_stdio>:
 8004618:	6841      	ldr	r1, [r0, #4]
 800461a:	4b0b      	ldr	r3, [pc, #44]	@ (8004648 <cleanup_stdio+0x30>)
 800461c:	b510      	push	{r4, lr}
 800461e:	0004      	movs	r4, r0
 8004620:	4299      	cmp	r1, r3
 8004622:	d001      	beq.n	8004628 <cleanup_stdio+0x10>
 8004624:	f000 fd9c 	bl	8005160 <_fflush_r>
 8004628:	68a1      	ldr	r1, [r4, #8]
 800462a:	4b08      	ldr	r3, [pc, #32]	@ (800464c <cleanup_stdio+0x34>)
 800462c:	4299      	cmp	r1, r3
 800462e:	d002      	beq.n	8004636 <cleanup_stdio+0x1e>
 8004630:	0020      	movs	r0, r4
 8004632:	f000 fd95 	bl	8005160 <_fflush_r>
 8004636:	68e1      	ldr	r1, [r4, #12]
 8004638:	4b05      	ldr	r3, [pc, #20]	@ (8004650 <cleanup_stdio+0x38>)
 800463a:	4299      	cmp	r1, r3
 800463c:	d002      	beq.n	8004644 <cleanup_stdio+0x2c>
 800463e:	0020      	movs	r0, r4
 8004640:	f000 fd8e 	bl	8005160 <_fflush_r>
 8004644:	bd10      	pop	{r4, pc}
 8004646:	46c0      	nop			@ (mov r8, r8)
 8004648:	20000a54 	.word	0x20000a54
 800464c:	20000abc 	.word	0x20000abc
 8004650:	20000b24 	.word	0x20000b24

08004654 <global_stdio_init.part.0>:
 8004654:	b510      	push	{r4, lr}
 8004656:	4b09      	ldr	r3, [pc, #36]	@ (800467c <global_stdio_init.part.0+0x28>)
 8004658:	4a09      	ldr	r2, [pc, #36]	@ (8004680 <global_stdio_init.part.0+0x2c>)
 800465a:	2104      	movs	r1, #4
 800465c:	601a      	str	r2, [r3, #0]
 800465e:	4809      	ldr	r0, [pc, #36]	@ (8004684 <global_stdio_init.part.0+0x30>)
 8004660:	2200      	movs	r2, #0
 8004662:	f7ff ff95 	bl	8004590 <std>
 8004666:	2201      	movs	r2, #1
 8004668:	2109      	movs	r1, #9
 800466a:	4807      	ldr	r0, [pc, #28]	@ (8004688 <global_stdio_init.part.0+0x34>)
 800466c:	f7ff ff90 	bl	8004590 <std>
 8004670:	2202      	movs	r2, #2
 8004672:	2112      	movs	r1, #18
 8004674:	4805      	ldr	r0, [pc, #20]	@ (800468c <global_stdio_init.part.0+0x38>)
 8004676:	f7ff ff8b 	bl	8004590 <std>
 800467a:	bd10      	pop	{r4, pc}
 800467c:	20000b8c 	.word	0x20000b8c
 8004680:	080045fd 	.word	0x080045fd
 8004684:	20000a54 	.word	0x20000a54
 8004688:	20000abc 	.word	0x20000abc
 800468c:	20000b24 	.word	0x20000b24

08004690 <__sfp_lock_acquire>:
 8004690:	b510      	push	{r4, lr}
 8004692:	4802      	ldr	r0, [pc, #8]	@ (800469c <__sfp_lock_acquire+0xc>)
 8004694:	f000 f91d 	bl	80048d2 <__retarget_lock_acquire_recursive>
 8004698:	bd10      	pop	{r4, pc}
 800469a:	46c0      	nop			@ (mov r8, r8)
 800469c:	20000b95 	.word	0x20000b95

080046a0 <__sfp_lock_release>:
 80046a0:	b510      	push	{r4, lr}
 80046a2:	4802      	ldr	r0, [pc, #8]	@ (80046ac <__sfp_lock_release+0xc>)
 80046a4:	f000 f916 	bl	80048d4 <__retarget_lock_release_recursive>
 80046a8:	bd10      	pop	{r4, pc}
 80046aa:	46c0      	nop			@ (mov r8, r8)
 80046ac:	20000b95 	.word	0x20000b95

080046b0 <__sinit>:
 80046b0:	b510      	push	{r4, lr}
 80046b2:	0004      	movs	r4, r0
 80046b4:	f7ff ffec 	bl	8004690 <__sfp_lock_acquire>
 80046b8:	6a23      	ldr	r3, [r4, #32]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d002      	beq.n	80046c4 <__sinit+0x14>
 80046be:	f7ff ffef 	bl	80046a0 <__sfp_lock_release>
 80046c2:	bd10      	pop	{r4, pc}
 80046c4:	4b04      	ldr	r3, [pc, #16]	@ (80046d8 <__sinit+0x28>)
 80046c6:	6223      	str	r3, [r4, #32]
 80046c8:	4b04      	ldr	r3, [pc, #16]	@ (80046dc <__sinit+0x2c>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d1f6      	bne.n	80046be <__sinit+0xe>
 80046d0:	f7ff ffc0 	bl	8004654 <global_stdio_init.part.0>
 80046d4:	e7f3      	b.n	80046be <__sinit+0xe>
 80046d6:	46c0      	nop			@ (mov r8, r8)
 80046d8:	08004619 	.word	0x08004619
 80046dc:	20000b8c 	.word	0x20000b8c

080046e0 <_fwalk_sglue>:
 80046e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80046e2:	0014      	movs	r4, r2
 80046e4:	2600      	movs	r6, #0
 80046e6:	9000      	str	r0, [sp, #0]
 80046e8:	9101      	str	r1, [sp, #4]
 80046ea:	68a5      	ldr	r5, [r4, #8]
 80046ec:	6867      	ldr	r7, [r4, #4]
 80046ee:	3f01      	subs	r7, #1
 80046f0:	d504      	bpl.n	80046fc <_fwalk_sglue+0x1c>
 80046f2:	6824      	ldr	r4, [r4, #0]
 80046f4:	2c00      	cmp	r4, #0
 80046f6:	d1f8      	bne.n	80046ea <_fwalk_sglue+0xa>
 80046f8:	0030      	movs	r0, r6
 80046fa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80046fc:	89ab      	ldrh	r3, [r5, #12]
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d908      	bls.n	8004714 <_fwalk_sglue+0x34>
 8004702:	220e      	movs	r2, #14
 8004704:	5eab      	ldrsh	r3, [r5, r2]
 8004706:	3301      	adds	r3, #1
 8004708:	d004      	beq.n	8004714 <_fwalk_sglue+0x34>
 800470a:	0029      	movs	r1, r5
 800470c:	9800      	ldr	r0, [sp, #0]
 800470e:	9b01      	ldr	r3, [sp, #4]
 8004710:	4798      	blx	r3
 8004712:	4306      	orrs	r6, r0
 8004714:	3568      	adds	r5, #104	@ 0x68
 8004716:	e7ea      	b.n	80046ee <_fwalk_sglue+0xe>

08004718 <iprintf>:
 8004718:	b40f      	push	{r0, r1, r2, r3}
 800471a:	b507      	push	{r0, r1, r2, lr}
 800471c:	4905      	ldr	r1, [pc, #20]	@ (8004734 <iprintf+0x1c>)
 800471e:	ab04      	add	r3, sp, #16
 8004720:	6808      	ldr	r0, [r1, #0]
 8004722:	cb04      	ldmia	r3!, {r2}
 8004724:	6881      	ldr	r1, [r0, #8]
 8004726:	9301      	str	r3, [sp, #4]
 8004728:	f000 f9fa 	bl	8004b20 <_vfiprintf_r>
 800472c:	b003      	add	sp, #12
 800472e:	bc08      	pop	{r3}
 8004730:	b004      	add	sp, #16
 8004732:	4718      	bx	r3
 8004734:	20000318 	.word	0x20000318

08004738 <__sread>:
 8004738:	b570      	push	{r4, r5, r6, lr}
 800473a:	000c      	movs	r4, r1
 800473c:	250e      	movs	r5, #14
 800473e:	5f49      	ldrsh	r1, [r1, r5]
 8004740:	f000 f874 	bl	800482c <_read_r>
 8004744:	2800      	cmp	r0, #0
 8004746:	db03      	blt.n	8004750 <__sread+0x18>
 8004748:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800474a:	181b      	adds	r3, r3, r0
 800474c:	6563      	str	r3, [r4, #84]	@ 0x54
 800474e:	bd70      	pop	{r4, r5, r6, pc}
 8004750:	89a3      	ldrh	r3, [r4, #12]
 8004752:	4a02      	ldr	r2, [pc, #8]	@ (800475c <__sread+0x24>)
 8004754:	4013      	ands	r3, r2
 8004756:	81a3      	strh	r3, [r4, #12]
 8004758:	e7f9      	b.n	800474e <__sread+0x16>
 800475a:	46c0      	nop			@ (mov r8, r8)
 800475c:	ffffefff 	.word	0xffffefff

08004760 <__swrite>:
 8004760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004762:	001f      	movs	r7, r3
 8004764:	898b      	ldrh	r3, [r1, #12]
 8004766:	0005      	movs	r5, r0
 8004768:	000c      	movs	r4, r1
 800476a:	0016      	movs	r6, r2
 800476c:	05db      	lsls	r3, r3, #23
 800476e:	d505      	bpl.n	800477c <__swrite+0x1c>
 8004770:	230e      	movs	r3, #14
 8004772:	5ec9      	ldrsh	r1, [r1, r3]
 8004774:	2200      	movs	r2, #0
 8004776:	2302      	movs	r3, #2
 8004778:	f000 f844 	bl	8004804 <_lseek_r>
 800477c:	89a3      	ldrh	r3, [r4, #12]
 800477e:	4a05      	ldr	r2, [pc, #20]	@ (8004794 <__swrite+0x34>)
 8004780:	0028      	movs	r0, r5
 8004782:	4013      	ands	r3, r2
 8004784:	81a3      	strh	r3, [r4, #12]
 8004786:	0032      	movs	r2, r6
 8004788:	230e      	movs	r3, #14
 800478a:	5ee1      	ldrsh	r1, [r4, r3]
 800478c:	003b      	movs	r3, r7
 800478e:	f000 f861 	bl	8004854 <_write_r>
 8004792:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004794:	ffffefff 	.word	0xffffefff

08004798 <__sseek>:
 8004798:	b570      	push	{r4, r5, r6, lr}
 800479a:	000c      	movs	r4, r1
 800479c:	250e      	movs	r5, #14
 800479e:	5f49      	ldrsh	r1, [r1, r5]
 80047a0:	f000 f830 	bl	8004804 <_lseek_r>
 80047a4:	89a3      	ldrh	r3, [r4, #12]
 80047a6:	1c42      	adds	r2, r0, #1
 80047a8:	d103      	bne.n	80047b2 <__sseek+0x1a>
 80047aa:	4a05      	ldr	r2, [pc, #20]	@ (80047c0 <__sseek+0x28>)
 80047ac:	4013      	ands	r3, r2
 80047ae:	81a3      	strh	r3, [r4, #12]
 80047b0:	bd70      	pop	{r4, r5, r6, pc}
 80047b2:	2280      	movs	r2, #128	@ 0x80
 80047b4:	0152      	lsls	r2, r2, #5
 80047b6:	4313      	orrs	r3, r2
 80047b8:	81a3      	strh	r3, [r4, #12]
 80047ba:	6560      	str	r0, [r4, #84]	@ 0x54
 80047bc:	e7f8      	b.n	80047b0 <__sseek+0x18>
 80047be:	46c0      	nop			@ (mov r8, r8)
 80047c0:	ffffefff 	.word	0xffffefff

080047c4 <__sclose>:
 80047c4:	b510      	push	{r4, lr}
 80047c6:	230e      	movs	r3, #14
 80047c8:	5ec9      	ldrsh	r1, [r1, r3]
 80047ca:	f000 f809 	bl	80047e0 <_close_r>
 80047ce:	bd10      	pop	{r4, pc}

080047d0 <memset>:
 80047d0:	0003      	movs	r3, r0
 80047d2:	1882      	adds	r2, r0, r2
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d100      	bne.n	80047da <memset+0xa>
 80047d8:	4770      	bx	lr
 80047da:	7019      	strb	r1, [r3, #0]
 80047dc:	3301      	adds	r3, #1
 80047de:	e7f9      	b.n	80047d4 <memset+0x4>

080047e0 <_close_r>:
 80047e0:	2300      	movs	r3, #0
 80047e2:	b570      	push	{r4, r5, r6, lr}
 80047e4:	4d06      	ldr	r5, [pc, #24]	@ (8004800 <_close_r+0x20>)
 80047e6:	0004      	movs	r4, r0
 80047e8:	0008      	movs	r0, r1
 80047ea:	602b      	str	r3, [r5, #0]
 80047ec:	f7fc fc71 	bl	80010d2 <_close>
 80047f0:	1c43      	adds	r3, r0, #1
 80047f2:	d103      	bne.n	80047fc <_close_r+0x1c>
 80047f4:	682b      	ldr	r3, [r5, #0]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d000      	beq.n	80047fc <_close_r+0x1c>
 80047fa:	6023      	str	r3, [r4, #0]
 80047fc:	bd70      	pop	{r4, r5, r6, pc}
 80047fe:	46c0      	nop			@ (mov r8, r8)
 8004800:	20000b90 	.word	0x20000b90

08004804 <_lseek_r>:
 8004804:	b570      	push	{r4, r5, r6, lr}
 8004806:	0004      	movs	r4, r0
 8004808:	0008      	movs	r0, r1
 800480a:	0011      	movs	r1, r2
 800480c:	001a      	movs	r2, r3
 800480e:	2300      	movs	r3, #0
 8004810:	4d05      	ldr	r5, [pc, #20]	@ (8004828 <_lseek_r+0x24>)
 8004812:	602b      	str	r3, [r5, #0]
 8004814:	f7fc fc7e 	bl	8001114 <_lseek>
 8004818:	1c43      	adds	r3, r0, #1
 800481a:	d103      	bne.n	8004824 <_lseek_r+0x20>
 800481c:	682b      	ldr	r3, [r5, #0]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d000      	beq.n	8004824 <_lseek_r+0x20>
 8004822:	6023      	str	r3, [r4, #0]
 8004824:	bd70      	pop	{r4, r5, r6, pc}
 8004826:	46c0      	nop			@ (mov r8, r8)
 8004828:	20000b90 	.word	0x20000b90

0800482c <_read_r>:
 800482c:	b570      	push	{r4, r5, r6, lr}
 800482e:	0004      	movs	r4, r0
 8004830:	0008      	movs	r0, r1
 8004832:	0011      	movs	r1, r2
 8004834:	001a      	movs	r2, r3
 8004836:	2300      	movs	r3, #0
 8004838:	4d05      	ldr	r5, [pc, #20]	@ (8004850 <_read_r+0x24>)
 800483a:	602b      	str	r3, [r5, #0]
 800483c:	f7fc fc10 	bl	8001060 <_read>
 8004840:	1c43      	adds	r3, r0, #1
 8004842:	d103      	bne.n	800484c <_read_r+0x20>
 8004844:	682b      	ldr	r3, [r5, #0]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d000      	beq.n	800484c <_read_r+0x20>
 800484a:	6023      	str	r3, [r4, #0]
 800484c:	bd70      	pop	{r4, r5, r6, pc}
 800484e:	46c0      	nop			@ (mov r8, r8)
 8004850:	20000b90 	.word	0x20000b90

08004854 <_write_r>:
 8004854:	b570      	push	{r4, r5, r6, lr}
 8004856:	0004      	movs	r4, r0
 8004858:	0008      	movs	r0, r1
 800485a:	0011      	movs	r1, r2
 800485c:	001a      	movs	r2, r3
 800485e:	2300      	movs	r3, #0
 8004860:	4d05      	ldr	r5, [pc, #20]	@ (8004878 <_write_r+0x24>)
 8004862:	602b      	str	r3, [r5, #0]
 8004864:	f7fc fc19 	bl	800109a <_write>
 8004868:	1c43      	adds	r3, r0, #1
 800486a:	d103      	bne.n	8004874 <_write_r+0x20>
 800486c:	682b      	ldr	r3, [r5, #0]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d000      	beq.n	8004874 <_write_r+0x20>
 8004872:	6023      	str	r3, [r4, #0]
 8004874:	bd70      	pop	{r4, r5, r6, pc}
 8004876:	46c0      	nop			@ (mov r8, r8)
 8004878:	20000b90 	.word	0x20000b90

0800487c <__errno>:
 800487c:	4b01      	ldr	r3, [pc, #4]	@ (8004884 <__errno+0x8>)
 800487e:	6818      	ldr	r0, [r3, #0]
 8004880:	4770      	bx	lr
 8004882:	46c0      	nop			@ (mov r8, r8)
 8004884:	20000318 	.word	0x20000318

08004888 <__libc_init_array>:
 8004888:	b570      	push	{r4, r5, r6, lr}
 800488a:	2600      	movs	r6, #0
 800488c:	4c0c      	ldr	r4, [pc, #48]	@ (80048c0 <__libc_init_array+0x38>)
 800488e:	4d0d      	ldr	r5, [pc, #52]	@ (80048c4 <__libc_init_array+0x3c>)
 8004890:	1b64      	subs	r4, r4, r5
 8004892:	10a4      	asrs	r4, r4, #2
 8004894:	42a6      	cmp	r6, r4
 8004896:	d109      	bne.n	80048ac <__libc_init_array+0x24>
 8004898:	2600      	movs	r6, #0
 800489a:	f000 fddb 	bl	8005454 <_init>
 800489e:	4c0a      	ldr	r4, [pc, #40]	@ (80048c8 <__libc_init_array+0x40>)
 80048a0:	4d0a      	ldr	r5, [pc, #40]	@ (80048cc <__libc_init_array+0x44>)
 80048a2:	1b64      	subs	r4, r4, r5
 80048a4:	10a4      	asrs	r4, r4, #2
 80048a6:	42a6      	cmp	r6, r4
 80048a8:	d105      	bne.n	80048b6 <__libc_init_array+0x2e>
 80048aa:	bd70      	pop	{r4, r5, r6, pc}
 80048ac:	00b3      	lsls	r3, r6, #2
 80048ae:	58eb      	ldr	r3, [r5, r3]
 80048b0:	4798      	blx	r3
 80048b2:	3601      	adds	r6, #1
 80048b4:	e7ee      	b.n	8004894 <__libc_init_array+0xc>
 80048b6:	00b3      	lsls	r3, r6, #2
 80048b8:	58eb      	ldr	r3, [r5, r3]
 80048ba:	4798      	blx	r3
 80048bc:	3601      	adds	r6, #1
 80048be:	e7f2      	b.n	80048a6 <__libc_init_array+0x1e>
 80048c0:	0800565c 	.word	0x0800565c
 80048c4:	0800565c 	.word	0x0800565c
 80048c8:	08005660 	.word	0x08005660
 80048cc:	0800565c 	.word	0x0800565c

080048d0 <__retarget_lock_init_recursive>:
 80048d0:	4770      	bx	lr

080048d2 <__retarget_lock_acquire_recursive>:
 80048d2:	4770      	bx	lr

080048d4 <__retarget_lock_release_recursive>:
 80048d4:	4770      	bx	lr
	...

080048d8 <_free_r>:
 80048d8:	b570      	push	{r4, r5, r6, lr}
 80048da:	0005      	movs	r5, r0
 80048dc:	1e0c      	subs	r4, r1, #0
 80048de:	d010      	beq.n	8004902 <_free_r+0x2a>
 80048e0:	3c04      	subs	r4, #4
 80048e2:	6823      	ldr	r3, [r4, #0]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	da00      	bge.n	80048ea <_free_r+0x12>
 80048e8:	18e4      	adds	r4, r4, r3
 80048ea:	0028      	movs	r0, r5
 80048ec:	f000 f8e0 	bl	8004ab0 <__malloc_lock>
 80048f0:	4a1d      	ldr	r2, [pc, #116]	@ (8004968 <_free_r+0x90>)
 80048f2:	6813      	ldr	r3, [r2, #0]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d105      	bne.n	8004904 <_free_r+0x2c>
 80048f8:	6063      	str	r3, [r4, #4]
 80048fa:	6014      	str	r4, [r2, #0]
 80048fc:	0028      	movs	r0, r5
 80048fe:	f000 f8df 	bl	8004ac0 <__malloc_unlock>
 8004902:	bd70      	pop	{r4, r5, r6, pc}
 8004904:	42a3      	cmp	r3, r4
 8004906:	d908      	bls.n	800491a <_free_r+0x42>
 8004908:	6820      	ldr	r0, [r4, #0]
 800490a:	1821      	adds	r1, r4, r0
 800490c:	428b      	cmp	r3, r1
 800490e:	d1f3      	bne.n	80048f8 <_free_r+0x20>
 8004910:	6819      	ldr	r1, [r3, #0]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	1809      	adds	r1, r1, r0
 8004916:	6021      	str	r1, [r4, #0]
 8004918:	e7ee      	b.n	80048f8 <_free_r+0x20>
 800491a:	001a      	movs	r2, r3
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d001      	beq.n	8004926 <_free_r+0x4e>
 8004922:	42a3      	cmp	r3, r4
 8004924:	d9f9      	bls.n	800491a <_free_r+0x42>
 8004926:	6811      	ldr	r1, [r2, #0]
 8004928:	1850      	adds	r0, r2, r1
 800492a:	42a0      	cmp	r0, r4
 800492c:	d10b      	bne.n	8004946 <_free_r+0x6e>
 800492e:	6820      	ldr	r0, [r4, #0]
 8004930:	1809      	adds	r1, r1, r0
 8004932:	1850      	adds	r0, r2, r1
 8004934:	6011      	str	r1, [r2, #0]
 8004936:	4283      	cmp	r3, r0
 8004938:	d1e0      	bne.n	80048fc <_free_r+0x24>
 800493a:	6818      	ldr	r0, [r3, #0]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	1841      	adds	r1, r0, r1
 8004940:	6011      	str	r1, [r2, #0]
 8004942:	6053      	str	r3, [r2, #4]
 8004944:	e7da      	b.n	80048fc <_free_r+0x24>
 8004946:	42a0      	cmp	r0, r4
 8004948:	d902      	bls.n	8004950 <_free_r+0x78>
 800494a:	230c      	movs	r3, #12
 800494c:	602b      	str	r3, [r5, #0]
 800494e:	e7d5      	b.n	80048fc <_free_r+0x24>
 8004950:	6820      	ldr	r0, [r4, #0]
 8004952:	1821      	adds	r1, r4, r0
 8004954:	428b      	cmp	r3, r1
 8004956:	d103      	bne.n	8004960 <_free_r+0x88>
 8004958:	6819      	ldr	r1, [r3, #0]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	1809      	adds	r1, r1, r0
 800495e:	6021      	str	r1, [r4, #0]
 8004960:	6063      	str	r3, [r4, #4]
 8004962:	6054      	str	r4, [r2, #4]
 8004964:	e7ca      	b.n	80048fc <_free_r+0x24>
 8004966:	46c0      	nop			@ (mov r8, r8)
 8004968:	20000b9c 	.word	0x20000b9c

0800496c <sbrk_aligned>:
 800496c:	b570      	push	{r4, r5, r6, lr}
 800496e:	4e0f      	ldr	r6, [pc, #60]	@ (80049ac <sbrk_aligned+0x40>)
 8004970:	000d      	movs	r5, r1
 8004972:	6831      	ldr	r1, [r6, #0]
 8004974:	0004      	movs	r4, r0
 8004976:	2900      	cmp	r1, #0
 8004978:	d102      	bne.n	8004980 <sbrk_aligned+0x14>
 800497a:	f000 fcbd 	bl	80052f8 <_sbrk_r>
 800497e:	6030      	str	r0, [r6, #0]
 8004980:	0029      	movs	r1, r5
 8004982:	0020      	movs	r0, r4
 8004984:	f000 fcb8 	bl	80052f8 <_sbrk_r>
 8004988:	1c43      	adds	r3, r0, #1
 800498a:	d103      	bne.n	8004994 <sbrk_aligned+0x28>
 800498c:	2501      	movs	r5, #1
 800498e:	426d      	negs	r5, r5
 8004990:	0028      	movs	r0, r5
 8004992:	bd70      	pop	{r4, r5, r6, pc}
 8004994:	2303      	movs	r3, #3
 8004996:	1cc5      	adds	r5, r0, #3
 8004998:	439d      	bics	r5, r3
 800499a:	42a8      	cmp	r0, r5
 800499c:	d0f8      	beq.n	8004990 <sbrk_aligned+0x24>
 800499e:	1a29      	subs	r1, r5, r0
 80049a0:	0020      	movs	r0, r4
 80049a2:	f000 fca9 	bl	80052f8 <_sbrk_r>
 80049a6:	3001      	adds	r0, #1
 80049a8:	d1f2      	bne.n	8004990 <sbrk_aligned+0x24>
 80049aa:	e7ef      	b.n	800498c <sbrk_aligned+0x20>
 80049ac:	20000b98 	.word	0x20000b98

080049b0 <_malloc_r>:
 80049b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80049b2:	2203      	movs	r2, #3
 80049b4:	1ccb      	adds	r3, r1, #3
 80049b6:	4393      	bics	r3, r2
 80049b8:	3308      	adds	r3, #8
 80049ba:	0005      	movs	r5, r0
 80049bc:	001f      	movs	r7, r3
 80049be:	2b0c      	cmp	r3, #12
 80049c0:	d234      	bcs.n	8004a2c <_malloc_r+0x7c>
 80049c2:	270c      	movs	r7, #12
 80049c4:	42b9      	cmp	r1, r7
 80049c6:	d833      	bhi.n	8004a30 <_malloc_r+0x80>
 80049c8:	0028      	movs	r0, r5
 80049ca:	f000 f871 	bl	8004ab0 <__malloc_lock>
 80049ce:	4e37      	ldr	r6, [pc, #220]	@ (8004aac <_malloc_r+0xfc>)
 80049d0:	6833      	ldr	r3, [r6, #0]
 80049d2:	001c      	movs	r4, r3
 80049d4:	2c00      	cmp	r4, #0
 80049d6:	d12f      	bne.n	8004a38 <_malloc_r+0x88>
 80049d8:	0039      	movs	r1, r7
 80049da:	0028      	movs	r0, r5
 80049dc:	f7ff ffc6 	bl	800496c <sbrk_aligned>
 80049e0:	0004      	movs	r4, r0
 80049e2:	1c43      	adds	r3, r0, #1
 80049e4:	d15f      	bne.n	8004aa6 <_malloc_r+0xf6>
 80049e6:	6834      	ldr	r4, [r6, #0]
 80049e8:	9400      	str	r4, [sp, #0]
 80049ea:	9b00      	ldr	r3, [sp, #0]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d14a      	bne.n	8004a86 <_malloc_r+0xd6>
 80049f0:	2c00      	cmp	r4, #0
 80049f2:	d052      	beq.n	8004a9a <_malloc_r+0xea>
 80049f4:	6823      	ldr	r3, [r4, #0]
 80049f6:	0028      	movs	r0, r5
 80049f8:	18e3      	adds	r3, r4, r3
 80049fa:	9900      	ldr	r1, [sp, #0]
 80049fc:	9301      	str	r3, [sp, #4]
 80049fe:	f000 fc7b 	bl	80052f8 <_sbrk_r>
 8004a02:	9b01      	ldr	r3, [sp, #4]
 8004a04:	4283      	cmp	r3, r0
 8004a06:	d148      	bne.n	8004a9a <_malloc_r+0xea>
 8004a08:	6823      	ldr	r3, [r4, #0]
 8004a0a:	0028      	movs	r0, r5
 8004a0c:	1aff      	subs	r7, r7, r3
 8004a0e:	0039      	movs	r1, r7
 8004a10:	f7ff ffac 	bl	800496c <sbrk_aligned>
 8004a14:	3001      	adds	r0, #1
 8004a16:	d040      	beq.n	8004a9a <_malloc_r+0xea>
 8004a18:	6823      	ldr	r3, [r4, #0]
 8004a1a:	19db      	adds	r3, r3, r7
 8004a1c:	6023      	str	r3, [r4, #0]
 8004a1e:	6833      	ldr	r3, [r6, #0]
 8004a20:	685a      	ldr	r2, [r3, #4]
 8004a22:	2a00      	cmp	r2, #0
 8004a24:	d133      	bne.n	8004a8e <_malloc_r+0xde>
 8004a26:	9b00      	ldr	r3, [sp, #0]
 8004a28:	6033      	str	r3, [r6, #0]
 8004a2a:	e019      	b.n	8004a60 <_malloc_r+0xb0>
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	dac9      	bge.n	80049c4 <_malloc_r+0x14>
 8004a30:	230c      	movs	r3, #12
 8004a32:	602b      	str	r3, [r5, #0]
 8004a34:	2000      	movs	r0, #0
 8004a36:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004a38:	6821      	ldr	r1, [r4, #0]
 8004a3a:	1bc9      	subs	r1, r1, r7
 8004a3c:	d420      	bmi.n	8004a80 <_malloc_r+0xd0>
 8004a3e:	290b      	cmp	r1, #11
 8004a40:	d90a      	bls.n	8004a58 <_malloc_r+0xa8>
 8004a42:	19e2      	adds	r2, r4, r7
 8004a44:	6027      	str	r7, [r4, #0]
 8004a46:	42a3      	cmp	r3, r4
 8004a48:	d104      	bne.n	8004a54 <_malloc_r+0xa4>
 8004a4a:	6032      	str	r2, [r6, #0]
 8004a4c:	6863      	ldr	r3, [r4, #4]
 8004a4e:	6011      	str	r1, [r2, #0]
 8004a50:	6053      	str	r3, [r2, #4]
 8004a52:	e005      	b.n	8004a60 <_malloc_r+0xb0>
 8004a54:	605a      	str	r2, [r3, #4]
 8004a56:	e7f9      	b.n	8004a4c <_malloc_r+0x9c>
 8004a58:	6862      	ldr	r2, [r4, #4]
 8004a5a:	42a3      	cmp	r3, r4
 8004a5c:	d10e      	bne.n	8004a7c <_malloc_r+0xcc>
 8004a5e:	6032      	str	r2, [r6, #0]
 8004a60:	0028      	movs	r0, r5
 8004a62:	f000 f82d 	bl	8004ac0 <__malloc_unlock>
 8004a66:	0020      	movs	r0, r4
 8004a68:	2207      	movs	r2, #7
 8004a6a:	300b      	adds	r0, #11
 8004a6c:	1d23      	adds	r3, r4, #4
 8004a6e:	4390      	bics	r0, r2
 8004a70:	1ac2      	subs	r2, r0, r3
 8004a72:	4298      	cmp	r0, r3
 8004a74:	d0df      	beq.n	8004a36 <_malloc_r+0x86>
 8004a76:	1a1b      	subs	r3, r3, r0
 8004a78:	50a3      	str	r3, [r4, r2]
 8004a7a:	e7dc      	b.n	8004a36 <_malloc_r+0x86>
 8004a7c:	605a      	str	r2, [r3, #4]
 8004a7e:	e7ef      	b.n	8004a60 <_malloc_r+0xb0>
 8004a80:	0023      	movs	r3, r4
 8004a82:	6864      	ldr	r4, [r4, #4]
 8004a84:	e7a6      	b.n	80049d4 <_malloc_r+0x24>
 8004a86:	9c00      	ldr	r4, [sp, #0]
 8004a88:	6863      	ldr	r3, [r4, #4]
 8004a8a:	9300      	str	r3, [sp, #0]
 8004a8c:	e7ad      	b.n	80049ea <_malloc_r+0x3a>
 8004a8e:	001a      	movs	r2, r3
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	42a3      	cmp	r3, r4
 8004a94:	d1fb      	bne.n	8004a8e <_malloc_r+0xde>
 8004a96:	2300      	movs	r3, #0
 8004a98:	e7da      	b.n	8004a50 <_malloc_r+0xa0>
 8004a9a:	230c      	movs	r3, #12
 8004a9c:	0028      	movs	r0, r5
 8004a9e:	602b      	str	r3, [r5, #0]
 8004aa0:	f000 f80e 	bl	8004ac0 <__malloc_unlock>
 8004aa4:	e7c6      	b.n	8004a34 <_malloc_r+0x84>
 8004aa6:	6007      	str	r7, [r0, #0]
 8004aa8:	e7da      	b.n	8004a60 <_malloc_r+0xb0>
 8004aaa:	46c0      	nop			@ (mov r8, r8)
 8004aac:	20000b9c 	.word	0x20000b9c

08004ab0 <__malloc_lock>:
 8004ab0:	b510      	push	{r4, lr}
 8004ab2:	4802      	ldr	r0, [pc, #8]	@ (8004abc <__malloc_lock+0xc>)
 8004ab4:	f7ff ff0d 	bl	80048d2 <__retarget_lock_acquire_recursive>
 8004ab8:	bd10      	pop	{r4, pc}
 8004aba:	46c0      	nop			@ (mov r8, r8)
 8004abc:	20000b94 	.word	0x20000b94

08004ac0 <__malloc_unlock>:
 8004ac0:	b510      	push	{r4, lr}
 8004ac2:	4802      	ldr	r0, [pc, #8]	@ (8004acc <__malloc_unlock+0xc>)
 8004ac4:	f7ff ff06 	bl	80048d4 <__retarget_lock_release_recursive>
 8004ac8:	bd10      	pop	{r4, pc}
 8004aca:	46c0      	nop			@ (mov r8, r8)
 8004acc:	20000b94 	.word	0x20000b94

08004ad0 <__sfputc_r>:
 8004ad0:	6893      	ldr	r3, [r2, #8]
 8004ad2:	b510      	push	{r4, lr}
 8004ad4:	3b01      	subs	r3, #1
 8004ad6:	6093      	str	r3, [r2, #8]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	da04      	bge.n	8004ae6 <__sfputc_r+0x16>
 8004adc:	6994      	ldr	r4, [r2, #24]
 8004ade:	42a3      	cmp	r3, r4
 8004ae0:	db07      	blt.n	8004af2 <__sfputc_r+0x22>
 8004ae2:	290a      	cmp	r1, #10
 8004ae4:	d005      	beq.n	8004af2 <__sfputc_r+0x22>
 8004ae6:	6813      	ldr	r3, [r2, #0]
 8004ae8:	1c58      	adds	r0, r3, #1
 8004aea:	6010      	str	r0, [r2, #0]
 8004aec:	7019      	strb	r1, [r3, #0]
 8004aee:	0008      	movs	r0, r1
 8004af0:	bd10      	pop	{r4, pc}
 8004af2:	f000 fb60 	bl	80051b6 <__swbuf_r>
 8004af6:	0001      	movs	r1, r0
 8004af8:	e7f9      	b.n	8004aee <__sfputc_r+0x1e>

08004afa <__sfputs_r>:
 8004afa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004afc:	0006      	movs	r6, r0
 8004afe:	000f      	movs	r7, r1
 8004b00:	0014      	movs	r4, r2
 8004b02:	18d5      	adds	r5, r2, r3
 8004b04:	42ac      	cmp	r4, r5
 8004b06:	d101      	bne.n	8004b0c <__sfputs_r+0x12>
 8004b08:	2000      	movs	r0, #0
 8004b0a:	e007      	b.n	8004b1c <__sfputs_r+0x22>
 8004b0c:	7821      	ldrb	r1, [r4, #0]
 8004b0e:	003a      	movs	r2, r7
 8004b10:	0030      	movs	r0, r6
 8004b12:	f7ff ffdd 	bl	8004ad0 <__sfputc_r>
 8004b16:	3401      	adds	r4, #1
 8004b18:	1c43      	adds	r3, r0, #1
 8004b1a:	d1f3      	bne.n	8004b04 <__sfputs_r+0xa>
 8004b1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004b20 <_vfiprintf_r>:
 8004b20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b22:	b0a1      	sub	sp, #132	@ 0x84
 8004b24:	000f      	movs	r7, r1
 8004b26:	0015      	movs	r5, r2
 8004b28:	001e      	movs	r6, r3
 8004b2a:	9003      	str	r0, [sp, #12]
 8004b2c:	2800      	cmp	r0, #0
 8004b2e:	d004      	beq.n	8004b3a <_vfiprintf_r+0x1a>
 8004b30:	6a03      	ldr	r3, [r0, #32]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d101      	bne.n	8004b3a <_vfiprintf_r+0x1a>
 8004b36:	f7ff fdbb 	bl	80046b0 <__sinit>
 8004b3a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004b3c:	07db      	lsls	r3, r3, #31
 8004b3e:	d405      	bmi.n	8004b4c <_vfiprintf_r+0x2c>
 8004b40:	89bb      	ldrh	r3, [r7, #12]
 8004b42:	059b      	lsls	r3, r3, #22
 8004b44:	d402      	bmi.n	8004b4c <_vfiprintf_r+0x2c>
 8004b46:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8004b48:	f7ff fec3 	bl	80048d2 <__retarget_lock_acquire_recursive>
 8004b4c:	89bb      	ldrh	r3, [r7, #12]
 8004b4e:	071b      	lsls	r3, r3, #28
 8004b50:	d502      	bpl.n	8004b58 <_vfiprintf_r+0x38>
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d113      	bne.n	8004b80 <_vfiprintf_r+0x60>
 8004b58:	0039      	movs	r1, r7
 8004b5a:	9803      	ldr	r0, [sp, #12]
 8004b5c:	f000 fb6e 	bl	800523c <__swsetup_r>
 8004b60:	2800      	cmp	r0, #0
 8004b62:	d00d      	beq.n	8004b80 <_vfiprintf_r+0x60>
 8004b64:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004b66:	07db      	lsls	r3, r3, #31
 8004b68:	d503      	bpl.n	8004b72 <_vfiprintf_r+0x52>
 8004b6a:	2001      	movs	r0, #1
 8004b6c:	4240      	negs	r0, r0
 8004b6e:	b021      	add	sp, #132	@ 0x84
 8004b70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b72:	89bb      	ldrh	r3, [r7, #12]
 8004b74:	059b      	lsls	r3, r3, #22
 8004b76:	d4f8      	bmi.n	8004b6a <_vfiprintf_r+0x4a>
 8004b78:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8004b7a:	f7ff feab 	bl	80048d4 <__retarget_lock_release_recursive>
 8004b7e:	e7f4      	b.n	8004b6a <_vfiprintf_r+0x4a>
 8004b80:	2300      	movs	r3, #0
 8004b82:	ac08      	add	r4, sp, #32
 8004b84:	6163      	str	r3, [r4, #20]
 8004b86:	3320      	adds	r3, #32
 8004b88:	7663      	strb	r3, [r4, #25]
 8004b8a:	3310      	adds	r3, #16
 8004b8c:	76a3      	strb	r3, [r4, #26]
 8004b8e:	9607      	str	r6, [sp, #28]
 8004b90:	002e      	movs	r6, r5
 8004b92:	7833      	ldrb	r3, [r6, #0]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d001      	beq.n	8004b9c <_vfiprintf_r+0x7c>
 8004b98:	2b25      	cmp	r3, #37	@ 0x25
 8004b9a:	d148      	bne.n	8004c2e <_vfiprintf_r+0x10e>
 8004b9c:	1b73      	subs	r3, r6, r5
 8004b9e:	9305      	str	r3, [sp, #20]
 8004ba0:	42ae      	cmp	r6, r5
 8004ba2:	d00b      	beq.n	8004bbc <_vfiprintf_r+0x9c>
 8004ba4:	002a      	movs	r2, r5
 8004ba6:	0039      	movs	r1, r7
 8004ba8:	9803      	ldr	r0, [sp, #12]
 8004baa:	f7ff ffa6 	bl	8004afa <__sfputs_r>
 8004bae:	3001      	adds	r0, #1
 8004bb0:	d100      	bne.n	8004bb4 <_vfiprintf_r+0x94>
 8004bb2:	e0ae      	b.n	8004d12 <_vfiprintf_r+0x1f2>
 8004bb4:	6963      	ldr	r3, [r4, #20]
 8004bb6:	9a05      	ldr	r2, [sp, #20]
 8004bb8:	189b      	adds	r3, r3, r2
 8004bba:	6163      	str	r3, [r4, #20]
 8004bbc:	7833      	ldrb	r3, [r6, #0]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d100      	bne.n	8004bc4 <_vfiprintf_r+0xa4>
 8004bc2:	e0a6      	b.n	8004d12 <_vfiprintf_r+0x1f2>
 8004bc4:	2201      	movs	r2, #1
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	4252      	negs	r2, r2
 8004bca:	6062      	str	r2, [r4, #4]
 8004bcc:	a904      	add	r1, sp, #16
 8004bce:	3254      	adds	r2, #84	@ 0x54
 8004bd0:	1852      	adds	r2, r2, r1
 8004bd2:	1c75      	adds	r5, r6, #1
 8004bd4:	6023      	str	r3, [r4, #0]
 8004bd6:	60e3      	str	r3, [r4, #12]
 8004bd8:	60a3      	str	r3, [r4, #8]
 8004bda:	7013      	strb	r3, [r2, #0]
 8004bdc:	65a3      	str	r3, [r4, #88]	@ 0x58
 8004bde:	4b59      	ldr	r3, [pc, #356]	@ (8004d44 <_vfiprintf_r+0x224>)
 8004be0:	2205      	movs	r2, #5
 8004be2:	0018      	movs	r0, r3
 8004be4:	7829      	ldrb	r1, [r5, #0]
 8004be6:	9305      	str	r3, [sp, #20]
 8004be8:	f000 fb98 	bl	800531c <memchr>
 8004bec:	1c6e      	adds	r6, r5, #1
 8004bee:	2800      	cmp	r0, #0
 8004bf0:	d11f      	bne.n	8004c32 <_vfiprintf_r+0x112>
 8004bf2:	6822      	ldr	r2, [r4, #0]
 8004bf4:	06d3      	lsls	r3, r2, #27
 8004bf6:	d504      	bpl.n	8004c02 <_vfiprintf_r+0xe2>
 8004bf8:	2353      	movs	r3, #83	@ 0x53
 8004bfa:	a904      	add	r1, sp, #16
 8004bfc:	185b      	adds	r3, r3, r1
 8004bfe:	2120      	movs	r1, #32
 8004c00:	7019      	strb	r1, [r3, #0]
 8004c02:	0713      	lsls	r3, r2, #28
 8004c04:	d504      	bpl.n	8004c10 <_vfiprintf_r+0xf0>
 8004c06:	2353      	movs	r3, #83	@ 0x53
 8004c08:	a904      	add	r1, sp, #16
 8004c0a:	185b      	adds	r3, r3, r1
 8004c0c:	212b      	movs	r1, #43	@ 0x2b
 8004c0e:	7019      	strb	r1, [r3, #0]
 8004c10:	782b      	ldrb	r3, [r5, #0]
 8004c12:	2b2a      	cmp	r3, #42	@ 0x2a
 8004c14:	d016      	beq.n	8004c44 <_vfiprintf_r+0x124>
 8004c16:	002e      	movs	r6, r5
 8004c18:	2100      	movs	r1, #0
 8004c1a:	200a      	movs	r0, #10
 8004c1c:	68e3      	ldr	r3, [r4, #12]
 8004c1e:	7832      	ldrb	r2, [r6, #0]
 8004c20:	1c75      	adds	r5, r6, #1
 8004c22:	3a30      	subs	r2, #48	@ 0x30
 8004c24:	2a09      	cmp	r2, #9
 8004c26:	d950      	bls.n	8004cca <_vfiprintf_r+0x1aa>
 8004c28:	2900      	cmp	r1, #0
 8004c2a:	d111      	bne.n	8004c50 <_vfiprintf_r+0x130>
 8004c2c:	e017      	b.n	8004c5e <_vfiprintf_r+0x13e>
 8004c2e:	3601      	adds	r6, #1
 8004c30:	e7af      	b.n	8004b92 <_vfiprintf_r+0x72>
 8004c32:	9b05      	ldr	r3, [sp, #20]
 8004c34:	6822      	ldr	r2, [r4, #0]
 8004c36:	1ac0      	subs	r0, r0, r3
 8004c38:	2301      	movs	r3, #1
 8004c3a:	4083      	lsls	r3, r0
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	0035      	movs	r5, r6
 8004c40:	6023      	str	r3, [r4, #0]
 8004c42:	e7cc      	b.n	8004bde <_vfiprintf_r+0xbe>
 8004c44:	9b07      	ldr	r3, [sp, #28]
 8004c46:	1d19      	adds	r1, r3, #4
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	9107      	str	r1, [sp, #28]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	db01      	blt.n	8004c54 <_vfiprintf_r+0x134>
 8004c50:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004c52:	e004      	b.n	8004c5e <_vfiprintf_r+0x13e>
 8004c54:	425b      	negs	r3, r3
 8004c56:	60e3      	str	r3, [r4, #12]
 8004c58:	2302      	movs	r3, #2
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	6023      	str	r3, [r4, #0]
 8004c5e:	7833      	ldrb	r3, [r6, #0]
 8004c60:	2b2e      	cmp	r3, #46	@ 0x2e
 8004c62:	d10c      	bne.n	8004c7e <_vfiprintf_r+0x15e>
 8004c64:	7873      	ldrb	r3, [r6, #1]
 8004c66:	2b2a      	cmp	r3, #42	@ 0x2a
 8004c68:	d134      	bne.n	8004cd4 <_vfiprintf_r+0x1b4>
 8004c6a:	9b07      	ldr	r3, [sp, #28]
 8004c6c:	3602      	adds	r6, #2
 8004c6e:	1d1a      	adds	r2, r3, #4
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	9207      	str	r2, [sp, #28]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	da01      	bge.n	8004c7c <_vfiprintf_r+0x15c>
 8004c78:	2301      	movs	r3, #1
 8004c7a:	425b      	negs	r3, r3
 8004c7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8004c7e:	4d32      	ldr	r5, [pc, #200]	@ (8004d48 <_vfiprintf_r+0x228>)
 8004c80:	2203      	movs	r2, #3
 8004c82:	0028      	movs	r0, r5
 8004c84:	7831      	ldrb	r1, [r6, #0]
 8004c86:	f000 fb49 	bl	800531c <memchr>
 8004c8a:	2800      	cmp	r0, #0
 8004c8c:	d006      	beq.n	8004c9c <_vfiprintf_r+0x17c>
 8004c8e:	2340      	movs	r3, #64	@ 0x40
 8004c90:	1b40      	subs	r0, r0, r5
 8004c92:	4083      	lsls	r3, r0
 8004c94:	6822      	ldr	r2, [r4, #0]
 8004c96:	3601      	adds	r6, #1
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	6023      	str	r3, [r4, #0]
 8004c9c:	7831      	ldrb	r1, [r6, #0]
 8004c9e:	2206      	movs	r2, #6
 8004ca0:	482a      	ldr	r0, [pc, #168]	@ (8004d4c <_vfiprintf_r+0x22c>)
 8004ca2:	1c75      	adds	r5, r6, #1
 8004ca4:	7621      	strb	r1, [r4, #24]
 8004ca6:	f000 fb39 	bl	800531c <memchr>
 8004caa:	2800      	cmp	r0, #0
 8004cac:	d040      	beq.n	8004d30 <_vfiprintf_r+0x210>
 8004cae:	4b28      	ldr	r3, [pc, #160]	@ (8004d50 <_vfiprintf_r+0x230>)
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d122      	bne.n	8004cfa <_vfiprintf_r+0x1da>
 8004cb4:	2207      	movs	r2, #7
 8004cb6:	9b07      	ldr	r3, [sp, #28]
 8004cb8:	3307      	adds	r3, #7
 8004cba:	4393      	bics	r3, r2
 8004cbc:	3308      	adds	r3, #8
 8004cbe:	9307      	str	r3, [sp, #28]
 8004cc0:	6963      	ldr	r3, [r4, #20]
 8004cc2:	9a04      	ldr	r2, [sp, #16]
 8004cc4:	189b      	adds	r3, r3, r2
 8004cc6:	6163      	str	r3, [r4, #20]
 8004cc8:	e762      	b.n	8004b90 <_vfiprintf_r+0x70>
 8004cca:	4343      	muls	r3, r0
 8004ccc:	002e      	movs	r6, r5
 8004cce:	2101      	movs	r1, #1
 8004cd0:	189b      	adds	r3, r3, r2
 8004cd2:	e7a4      	b.n	8004c1e <_vfiprintf_r+0xfe>
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	200a      	movs	r0, #10
 8004cd8:	0019      	movs	r1, r3
 8004cda:	3601      	adds	r6, #1
 8004cdc:	6063      	str	r3, [r4, #4]
 8004cde:	7832      	ldrb	r2, [r6, #0]
 8004ce0:	1c75      	adds	r5, r6, #1
 8004ce2:	3a30      	subs	r2, #48	@ 0x30
 8004ce4:	2a09      	cmp	r2, #9
 8004ce6:	d903      	bls.n	8004cf0 <_vfiprintf_r+0x1d0>
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d0c8      	beq.n	8004c7e <_vfiprintf_r+0x15e>
 8004cec:	9109      	str	r1, [sp, #36]	@ 0x24
 8004cee:	e7c6      	b.n	8004c7e <_vfiprintf_r+0x15e>
 8004cf0:	4341      	muls	r1, r0
 8004cf2:	002e      	movs	r6, r5
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	1889      	adds	r1, r1, r2
 8004cf8:	e7f1      	b.n	8004cde <_vfiprintf_r+0x1be>
 8004cfa:	aa07      	add	r2, sp, #28
 8004cfc:	9200      	str	r2, [sp, #0]
 8004cfe:	0021      	movs	r1, r4
 8004d00:	003a      	movs	r2, r7
 8004d02:	4b14      	ldr	r3, [pc, #80]	@ (8004d54 <_vfiprintf_r+0x234>)
 8004d04:	9803      	ldr	r0, [sp, #12]
 8004d06:	e000      	b.n	8004d0a <_vfiprintf_r+0x1ea>
 8004d08:	bf00      	nop
 8004d0a:	9004      	str	r0, [sp, #16]
 8004d0c:	9b04      	ldr	r3, [sp, #16]
 8004d0e:	3301      	adds	r3, #1
 8004d10:	d1d6      	bne.n	8004cc0 <_vfiprintf_r+0x1a0>
 8004d12:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004d14:	07db      	lsls	r3, r3, #31
 8004d16:	d405      	bmi.n	8004d24 <_vfiprintf_r+0x204>
 8004d18:	89bb      	ldrh	r3, [r7, #12]
 8004d1a:	059b      	lsls	r3, r3, #22
 8004d1c:	d402      	bmi.n	8004d24 <_vfiprintf_r+0x204>
 8004d1e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8004d20:	f7ff fdd8 	bl	80048d4 <__retarget_lock_release_recursive>
 8004d24:	89bb      	ldrh	r3, [r7, #12]
 8004d26:	065b      	lsls	r3, r3, #25
 8004d28:	d500      	bpl.n	8004d2c <_vfiprintf_r+0x20c>
 8004d2a:	e71e      	b.n	8004b6a <_vfiprintf_r+0x4a>
 8004d2c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8004d2e:	e71e      	b.n	8004b6e <_vfiprintf_r+0x4e>
 8004d30:	aa07      	add	r2, sp, #28
 8004d32:	9200      	str	r2, [sp, #0]
 8004d34:	0021      	movs	r1, r4
 8004d36:	003a      	movs	r2, r7
 8004d38:	4b06      	ldr	r3, [pc, #24]	@ (8004d54 <_vfiprintf_r+0x234>)
 8004d3a:	9803      	ldr	r0, [sp, #12]
 8004d3c:	f000 f87c 	bl	8004e38 <_printf_i>
 8004d40:	e7e3      	b.n	8004d0a <_vfiprintf_r+0x1ea>
 8004d42:	46c0      	nop			@ (mov r8, r8)
 8004d44:	08005629 	.word	0x08005629
 8004d48:	0800562f 	.word	0x0800562f
 8004d4c:	08005633 	.word	0x08005633
 8004d50:	00000000 	.word	0x00000000
 8004d54:	08004afb 	.word	0x08004afb

08004d58 <_printf_common>:
 8004d58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004d5a:	0016      	movs	r6, r2
 8004d5c:	9301      	str	r3, [sp, #4]
 8004d5e:	688a      	ldr	r2, [r1, #8]
 8004d60:	690b      	ldr	r3, [r1, #16]
 8004d62:	000c      	movs	r4, r1
 8004d64:	9000      	str	r0, [sp, #0]
 8004d66:	4293      	cmp	r3, r2
 8004d68:	da00      	bge.n	8004d6c <_printf_common+0x14>
 8004d6a:	0013      	movs	r3, r2
 8004d6c:	0022      	movs	r2, r4
 8004d6e:	6033      	str	r3, [r6, #0]
 8004d70:	3243      	adds	r2, #67	@ 0x43
 8004d72:	7812      	ldrb	r2, [r2, #0]
 8004d74:	2a00      	cmp	r2, #0
 8004d76:	d001      	beq.n	8004d7c <_printf_common+0x24>
 8004d78:	3301      	adds	r3, #1
 8004d7a:	6033      	str	r3, [r6, #0]
 8004d7c:	6823      	ldr	r3, [r4, #0]
 8004d7e:	069b      	lsls	r3, r3, #26
 8004d80:	d502      	bpl.n	8004d88 <_printf_common+0x30>
 8004d82:	6833      	ldr	r3, [r6, #0]
 8004d84:	3302      	adds	r3, #2
 8004d86:	6033      	str	r3, [r6, #0]
 8004d88:	6822      	ldr	r2, [r4, #0]
 8004d8a:	2306      	movs	r3, #6
 8004d8c:	0015      	movs	r5, r2
 8004d8e:	401d      	ands	r5, r3
 8004d90:	421a      	tst	r2, r3
 8004d92:	d027      	beq.n	8004de4 <_printf_common+0x8c>
 8004d94:	0023      	movs	r3, r4
 8004d96:	3343      	adds	r3, #67	@ 0x43
 8004d98:	781b      	ldrb	r3, [r3, #0]
 8004d9a:	1e5a      	subs	r2, r3, #1
 8004d9c:	4193      	sbcs	r3, r2
 8004d9e:	6822      	ldr	r2, [r4, #0]
 8004da0:	0692      	lsls	r2, r2, #26
 8004da2:	d430      	bmi.n	8004e06 <_printf_common+0xae>
 8004da4:	0022      	movs	r2, r4
 8004da6:	9901      	ldr	r1, [sp, #4]
 8004da8:	9800      	ldr	r0, [sp, #0]
 8004daa:	9d08      	ldr	r5, [sp, #32]
 8004dac:	3243      	adds	r2, #67	@ 0x43
 8004dae:	47a8      	blx	r5
 8004db0:	3001      	adds	r0, #1
 8004db2:	d025      	beq.n	8004e00 <_printf_common+0xa8>
 8004db4:	2206      	movs	r2, #6
 8004db6:	6823      	ldr	r3, [r4, #0]
 8004db8:	2500      	movs	r5, #0
 8004dba:	4013      	ands	r3, r2
 8004dbc:	2b04      	cmp	r3, #4
 8004dbe:	d105      	bne.n	8004dcc <_printf_common+0x74>
 8004dc0:	6833      	ldr	r3, [r6, #0]
 8004dc2:	68e5      	ldr	r5, [r4, #12]
 8004dc4:	1aed      	subs	r5, r5, r3
 8004dc6:	43eb      	mvns	r3, r5
 8004dc8:	17db      	asrs	r3, r3, #31
 8004dca:	401d      	ands	r5, r3
 8004dcc:	68a3      	ldr	r3, [r4, #8]
 8004dce:	6922      	ldr	r2, [r4, #16]
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	dd01      	ble.n	8004dd8 <_printf_common+0x80>
 8004dd4:	1a9b      	subs	r3, r3, r2
 8004dd6:	18ed      	adds	r5, r5, r3
 8004dd8:	2600      	movs	r6, #0
 8004dda:	42b5      	cmp	r5, r6
 8004ddc:	d120      	bne.n	8004e20 <_printf_common+0xc8>
 8004dde:	2000      	movs	r0, #0
 8004de0:	e010      	b.n	8004e04 <_printf_common+0xac>
 8004de2:	3501      	adds	r5, #1
 8004de4:	68e3      	ldr	r3, [r4, #12]
 8004de6:	6832      	ldr	r2, [r6, #0]
 8004de8:	1a9b      	subs	r3, r3, r2
 8004dea:	42ab      	cmp	r3, r5
 8004dec:	ddd2      	ble.n	8004d94 <_printf_common+0x3c>
 8004dee:	0022      	movs	r2, r4
 8004df0:	2301      	movs	r3, #1
 8004df2:	9901      	ldr	r1, [sp, #4]
 8004df4:	9800      	ldr	r0, [sp, #0]
 8004df6:	9f08      	ldr	r7, [sp, #32]
 8004df8:	3219      	adds	r2, #25
 8004dfa:	47b8      	blx	r7
 8004dfc:	3001      	adds	r0, #1
 8004dfe:	d1f0      	bne.n	8004de2 <_printf_common+0x8a>
 8004e00:	2001      	movs	r0, #1
 8004e02:	4240      	negs	r0, r0
 8004e04:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004e06:	2030      	movs	r0, #48	@ 0x30
 8004e08:	18e1      	adds	r1, r4, r3
 8004e0a:	3143      	adds	r1, #67	@ 0x43
 8004e0c:	7008      	strb	r0, [r1, #0]
 8004e0e:	0021      	movs	r1, r4
 8004e10:	1c5a      	adds	r2, r3, #1
 8004e12:	3145      	adds	r1, #69	@ 0x45
 8004e14:	7809      	ldrb	r1, [r1, #0]
 8004e16:	18a2      	adds	r2, r4, r2
 8004e18:	3243      	adds	r2, #67	@ 0x43
 8004e1a:	3302      	adds	r3, #2
 8004e1c:	7011      	strb	r1, [r2, #0]
 8004e1e:	e7c1      	b.n	8004da4 <_printf_common+0x4c>
 8004e20:	0022      	movs	r2, r4
 8004e22:	2301      	movs	r3, #1
 8004e24:	9901      	ldr	r1, [sp, #4]
 8004e26:	9800      	ldr	r0, [sp, #0]
 8004e28:	9f08      	ldr	r7, [sp, #32]
 8004e2a:	321a      	adds	r2, #26
 8004e2c:	47b8      	blx	r7
 8004e2e:	3001      	adds	r0, #1
 8004e30:	d0e6      	beq.n	8004e00 <_printf_common+0xa8>
 8004e32:	3601      	adds	r6, #1
 8004e34:	e7d1      	b.n	8004dda <_printf_common+0x82>
	...

08004e38 <_printf_i>:
 8004e38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e3a:	b08b      	sub	sp, #44	@ 0x2c
 8004e3c:	9206      	str	r2, [sp, #24]
 8004e3e:	000a      	movs	r2, r1
 8004e40:	3243      	adds	r2, #67	@ 0x43
 8004e42:	9307      	str	r3, [sp, #28]
 8004e44:	9005      	str	r0, [sp, #20]
 8004e46:	9203      	str	r2, [sp, #12]
 8004e48:	7e0a      	ldrb	r2, [r1, #24]
 8004e4a:	000c      	movs	r4, r1
 8004e4c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8004e4e:	2a78      	cmp	r2, #120	@ 0x78
 8004e50:	d809      	bhi.n	8004e66 <_printf_i+0x2e>
 8004e52:	2a62      	cmp	r2, #98	@ 0x62
 8004e54:	d80b      	bhi.n	8004e6e <_printf_i+0x36>
 8004e56:	2a00      	cmp	r2, #0
 8004e58:	d100      	bne.n	8004e5c <_printf_i+0x24>
 8004e5a:	e0bc      	b.n	8004fd6 <_printf_i+0x19e>
 8004e5c:	497b      	ldr	r1, [pc, #492]	@ (800504c <_printf_i+0x214>)
 8004e5e:	9104      	str	r1, [sp, #16]
 8004e60:	2a58      	cmp	r2, #88	@ 0x58
 8004e62:	d100      	bne.n	8004e66 <_printf_i+0x2e>
 8004e64:	e090      	b.n	8004f88 <_printf_i+0x150>
 8004e66:	0025      	movs	r5, r4
 8004e68:	3542      	adds	r5, #66	@ 0x42
 8004e6a:	702a      	strb	r2, [r5, #0]
 8004e6c:	e022      	b.n	8004eb4 <_printf_i+0x7c>
 8004e6e:	0010      	movs	r0, r2
 8004e70:	3863      	subs	r0, #99	@ 0x63
 8004e72:	2815      	cmp	r0, #21
 8004e74:	d8f7      	bhi.n	8004e66 <_printf_i+0x2e>
 8004e76:	f7fb f94d 	bl	8000114 <__gnu_thumb1_case_shi>
 8004e7a:	0016      	.short	0x0016
 8004e7c:	fff6001f 	.word	0xfff6001f
 8004e80:	fff6fff6 	.word	0xfff6fff6
 8004e84:	001ffff6 	.word	0x001ffff6
 8004e88:	fff6fff6 	.word	0xfff6fff6
 8004e8c:	fff6fff6 	.word	0xfff6fff6
 8004e90:	003600a1 	.word	0x003600a1
 8004e94:	fff60080 	.word	0xfff60080
 8004e98:	00b2fff6 	.word	0x00b2fff6
 8004e9c:	0036fff6 	.word	0x0036fff6
 8004ea0:	fff6fff6 	.word	0xfff6fff6
 8004ea4:	0084      	.short	0x0084
 8004ea6:	0025      	movs	r5, r4
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	3542      	adds	r5, #66	@ 0x42
 8004eac:	1d11      	adds	r1, r2, #4
 8004eae:	6019      	str	r1, [r3, #0]
 8004eb0:	6813      	ldr	r3, [r2, #0]
 8004eb2:	702b      	strb	r3, [r5, #0]
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	e0a0      	b.n	8004ffa <_printf_i+0x1c2>
 8004eb8:	6818      	ldr	r0, [r3, #0]
 8004eba:	6809      	ldr	r1, [r1, #0]
 8004ebc:	1d02      	adds	r2, r0, #4
 8004ebe:	060d      	lsls	r5, r1, #24
 8004ec0:	d50b      	bpl.n	8004eda <_printf_i+0xa2>
 8004ec2:	6806      	ldr	r6, [r0, #0]
 8004ec4:	601a      	str	r2, [r3, #0]
 8004ec6:	2e00      	cmp	r6, #0
 8004ec8:	da03      	bge.n	8004ed2 <_printf_i+0x9a>
 8004eca:	232d      	movs	r3, #45	@ 0x2d
 8004ecc:	9a03      	ldr	r2, [sp, #12]
 8004ece:	4276      	negs	r6, r6
 8004ed0:	7013      	strb	r3, [r2, #0]
 8004ed2:	4b5e      	ldr	r3, [pc, #376]	@ (800504c <_printf_i+0x214>)
 8004ed4:	270a      	movs	r7, #10
 8004ed6:	9304      	str	r3, [sp, #16]
 8004ed8:	e018      	b.n	8004f0c <_printf_i+0xd4>
 8004eda:	6806      	ldr	r6, [r0, #0]
 8004edc:	601a      	str	r2, [r3, #0]
 8004ede:	0649      	lsls	r1, r1, #25
 8004ee0:	d5f1      	bpl.n	8004ec6 <_printf_i+0x8e>
 8004ee2:	b236      	sxth	r6, r6
 8004ee4:	e7ef      	b.n	8004ec6 <_printf_i+0x8e>
 8004ee6:	6808      	ldr	r0, [r1, #0]
 8004ee8:	6819      	ldr	r1, [r3, #0]
 8004eea:	c940      	ldmia	r1!, {r6}
 8004eec:	0605      	lsls	r5, r0, #24
 8004eee:	d402      	bmi.n	8004ef6 <_printf_i+0xbe>
 8004ef0:	0640      	lsls	r0, r0, #25
 8004ef2:	d500      	bpl.n	8004ef6 <_printf_i+0xbe>
 8004ef4:	b2b6      	uxth	r6, r6
 8004ef6:	6019      	str	r1, [r3, #0]
 8004ef8:	4b54      	ldr	r3, [pc, #336]	@ (800504c <_printf_i+0x214>)
 8004efa:	270a      	movs	r7, #10
 8004efc:	9304      	str	r3, [sp, #16]
 8004efe:	2a6f      	cmp	r2, #111	@ 0x6f
 8004f00:	d100      	bne.n	8004f04 <_printf_i+0xcc>
 8004f02:	3f02      	subs	r7, #2
 8004f04:	0023      	movs	r3, r4
 8004f06:	2200      	movs	r2, #0
 8004f08:	3343      	adds	r3, #67	@ 0x43
 8004f0a:	701a      	strb	r2, [r3, #0]
 8004f0c:	6863      	ldr	r3, [r4, #4]
 8004f0e:	60a3      	str	r3, [r4, #8]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	db03      	blt.n	8004f1c <_printf_i+0xe4>
 8004f14:	2104      	movs	r1, #4
 8004f16:	6822      	ldr	r2, [r4, #0]
 8004f18:	438a      	bics	r2, r1
 8004f1a:	6022      	str	r2, [r4, #0]
 8004f1c:	2e00      	cmp	r6, #0
 8004f1e:	d102      	bne.n	8004f26 <_printf_i+0xee>
 8004f20:	9d03      	ldr	r5, [sp, #12]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d00c      	beq.n	8004f40 <_printf_i+0x108>
 8004f26:	9d03      	ldr	r5, [sp, #12]
 8004f28:	0030      	movs	r0, r6
 8004f2a:	0039      	movs	r1, r7
 8004f2c:	f7fb f982 	bl	8000234 <__aeabi_uidivmod>
 8004f30:	9b04      	ldr	r3, [sp, #16]
 8004f32:	3d01      	subs	r5, #1
 8004f34:	5c5b      	ldrb	r3, [r3, r1]
 8004f36:	702b      	strb	r3, [r5, #0]
 8004f38:	0033      	movs	r3, r6
 8004f3a:	0006      	movs	r6, r0
 8004f3c:	429f      	cmp	r7, r3
 8004f3e:	d9f3      	bls.n	8004f28 <_printf_i+0xf0>
 8004f40:	2f08      	cmp	r7, #8
 8004f42:	d109      	bne.n	8004f58 <_printf_i+0x120>
 8004f44:	6823      	ldr	r3, [r4, #0]
 8004f46:	07db      	lsls	r3, r3, #31
 8004f48:	d506      	bpl.n	8004f58 <_printf_i+0x120>
 8004f4a:	6862      	ldr	r2, [r4, #4]
 8004f4c:	6923      	ldr	r3, [r4, #16]
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	dc02      	bgt.n	8004f58 <_printf_i+0x120>
 8004f52:	2330      	movs	r3, #48	@ 0x30
 8004f54:	3d01      	subs	r5, #1
 8004f56:	702b      	strb	r3, [r5, #0]
 8004f58:	9b03      	ldr	r3, [sp, #12]
 8004f5a:	1b5b      	subs	r3, r3, r5
 8004f5c:	6123      	str	r3, [r4, #16]
 8004f5e:	9b07      	ldr	r3, [sp, #28]
 8004f60:	0021      	movs	r1, r4
 8004f62:	9300      	str	r3, [sp, #0]
 8004f64:	9805      	ldr	r0, [sp, #20]
 8004f66:	9b06      	ldr	r3, [sp, #24]
 8004f68:	aa09      	add	r2, sp, #36	@ 0x24
 8004f6a:	f7ff fef5 	bl	8004d58 <_printf_common>
 8004f6e:	3001      	adds	r0, #1
 8004f70:	d148      	bne.n	8005004 <_printf_i+0x1cc>
 8004f72:	2001      	movs	r0, #1
 8004f74:	4240      	negs	r0, r0
 8004f76:	b00b      	add	sp, #44	@ 0x2c
 8004f78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f7a:	2220      	movs	r2, #32
 8004f7c:	6809      	ldr	r1, [r1, #0]
 8004f7e:	430a      	orrs	r2, r1
 8004f80:	6022      	str	r2, [r4, #0]
 8004f82:	2278      	movs	r2, #120	@ 0x78
 8004f84:	4932      	ldr	r1, [pc, #200]	@ (8005050 <_printf_i+0x218>)
 8004f86:	9104      	str	r1, [sp, #16]
 8004f88:	0021      	movs	r1, r4
 8004f8a:	3145      	adds	r1, #69	@ 0x45
 8004f8c:	700a      	strb	r2, [r1, #0]
 8004f8e:	6819      	ldr	r1, [r3, #0]
 8004f90:	6822      	ldr	r2, [r4, #0]
 8004f92:	c940      	ldmia	r1!, {r6}
 8004f94:	0610      	lsls	r0, r2, #24
 8004f96:	d402      	bmi.n	8004f9e <_printf_i+0x166>
 8004f98:	0650      	lsls	r0, r2, #25
 8004f9a:	d500      	bpl.n	8004f9e <_printf_i+0x166>
 8004f9c:	b2b6      	uxth	r6, r6
 8004f9e:	6019      	str	r1, [r3, #0]
 8004fa0:	07d3      	lsls	r3, r2, #31
 8004fa2:	d502      	bpl.n	8004faa <_printf_i+0x172>
 8004fa4:	2320      	movs	r3, #32
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	6023      	str	r3, [r4, #0]
 8004faa:	2e00      	cmp	r6, #0
 8004fac:	d001      	beq.n	8004fb2 <_printf_i+0x17a>
 8004fae:	2710      	movs	r7, #16
 8004fb0:	e7a8      	b.n	8004f04 <_printf_i+0xcc>
 8004fb2:	2220      	movs	r2, #32
 8004fb4:	6823      	ldr	r3, [r4, #0]
 8004fb6:	4393      	bics	r3, r2
 8004fb8:	6023      	str	r3, [r4, #0]
 8004fba:	e7f8      	b.n	8004fae <_printf_i+0x176>
 8004fbc:	681a      	ldr	r2, [r3, #0]
 8004fbe:	680d      	ldr	r5, [r1, #0]
 8004fc0:	1d10      	adds	r0, r2, #4
 8004fc2:	6949      	ldr	r1, [r1, #20]
 8004fc4:	6018      	str	r0, [r3, #0]
 8004fc6:	6813      	ldr	r3, [r2, #0]
 8004fc8:	062e      	lsls	r6, r5, #24
 8004fca:	d501      	bpl.n	8004fd0 <_printf_i+0x198>
 8004fcc:	6019      	str	r1, [r3, #0]
 8004fce:	e002      	b.n	8004fd6 <_printf_i+0x19e>
 8004fd0:	066d      	lsls	r5, r5, #25
 8004fd2:	d5fb      	bpl.n	8004fcc <_printf_i+0x194>
 8004fd4:	8019      	strh	r1, [r3, #0]
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	9d03      	ldr	r5, [sp, #12]
 8004fda:	6123      	str	r3, [r4, #16]
 8004fdc:	e7bf      	b.n	8004f5e <_printf_i+0x126>
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	1d11      	adds	r1, r2, #4
 8004fe2:	6019      	str	r1, [r3, #0]
 8004fe4:	6815      	ldr	r5, [r2, #0]
 8004fe6:	2100      	movs	r1, #0
 8004fe8:	0028      	movs	r0, r5
 8004fea:	6862      	ldr	r2, [r4, #4]
 8004fec:	f000 f996 	bl	800531c <memchr>
 8004ff0:	2800      	cmp	r0, #0
 8004ff2:	d001      	beq.n	8004ff8 <_printf_i+0x1c0>
 8004ff4:	1b40      	subs	r0, r0, r5
 8004ff6:	6060      	str	r0, [r4, #4]
 8004ff8:	6863      	ldr	r3, [r4, #4]
 8004ffa:	6123      	str	r3, [r4, #16]
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	9a03      	ldr	r2, [sp, #12]
 8005000:	7013      	strb	r3, [r2, #0]
 8005002:	e7ac      	b.n	8004f5e <_printf_i+0x126>
 8005004:	002a      	movs	r2, r5
 8005006:	6923      	ldr	r3, [r4, #16]
 8005008:	9906      	ldr	r1, [sp, #24]
 800500a:	9805      	ldr	r0, [sp, #20]
 800500c:	9d07      	ldr	r5, [sp, #28]
 800500e:	47a8      	blx	r5
 8005010:	3001      	adds	r0, #1
 8005012:	d0ae      	beq.n	8004f72 <_printf_i+0x13a>
 8005014:	6823      	ldr	r3, [r4, #0]
 8005016:	079b      	lsls	r3, r3, #30
 8005018:	d415      	bmi.n	8005046 <_printf_i+0x20e>
 800501a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800501c:	68e0      	ldr	r0, [r4, #12]
 800501e:	4298      	cmp	r0, r3
 8005020:	daa9      	bge.n	8004f76 <_printf_i+0x13e>
 8005022:	0018      	movs	r0, r3
 8005024:	e7a7      	b.n	8004f76 <_printf_i+0x13e>
 8005026:	0022      	movs	r2, r4
 8005028:	2301      	movs	r3, #1
 800502a:	9906      	ldr	r1, [sp, #24]
 800502c:	9805      	ldr	r0, [sp, #20]
 800502e:	9e07      	ldr	r6, [sp, #28]
 8005030:	3219      	adds	r2, #25
 8005032:	47b0      	blx	r6
 8005034:	3001      	adds	r0, #1
 8005036:	d09c      	beq.n	8004f72 <_printf_i+0x13a>
 8005038:	3501      	adds	r5, #1
 800503a:	68e3      	ldr	r3, [r4, #12]
 800503c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800503e:	1a9b      	subs	r3, r3, r2
 8005040:	42ab      	cmp	r3, r5
 8005042:	dcf0      	bgt.n	8005026 <_printf_i+0x1ee>
 8005044:	e7e9      	b.n	800501a <_printf_i+0x1e2>
 8005046:	2500      	movs	r5, #0
 8005048:	e7f7      	b.n	800503a <_printf_i+0x202>
 800504a:	46c0      	nop			@ (mov r8, r8)
 800504c:	0800563a 	.word	0x0800563a
 8005050:	0800564b 	.word	0x0800564b

08005054 <__sflush_r>:
 8005054:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005056:	220c      	movs	r2, #12
 8005058:	5e8b      	ldrsh	r3, [r1, r2]
 800505a:	0005      	movs	r5, r0
 800505c:	000c      	movs	r4, r1
 800505e:	071a      	lsls	r2, r3, #28
 8005060:	d456      	bmi.n	8005110 <__sflush_r+0xbc>
 8005062:	684a      	ldr	r2, [r1, #4]
 8005064:	2a00      	cmp	r2, #0
 8005066:	dc02      	bgt.n	800506e <__sflush_r+0x1a>
 8005068:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 800506a:	2a00      	cmp	r2, #0
 800506c:	dd4e      	ble.n	800510c <__sflush_r+0xb8>
 800506e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8005070:	2f00      	cmp	r7, #0
 8005072:	d04b      	beq.n	800510c <__sflush_r+0xb8>
 8005074:	2200      	movs	r2, #0
 8005076:	2080      	movs	r0, #128	@ 0x80
 8005078:	682e      	ldr	r6, [r5, #0]
 800507a:	602a      	str	r2, [r5, #0]
 800507c:	001a      	movs	r2, r3
 800507e:	0140      	lsls	r0, r0, #5
 8005080:	6a21      	ldr	r1, [r4, #32]
 8005082:	4002      	ands	r2, r0
 8005084:	4203      	tst	r3, r0
 8005086:	d033      	beq.n	80050f0 <__sflush_r+0x9c>
 8005088:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800508a:	89a3      	ldrh	r3, [r4, #12]
 800508c:	075b      	lsls	r3, r3, #29
 800508e:	d506      	bpl.n	800509e <__sflush_r+0x4a>
 8005090:	6863      	ldr	r3, [r4, #4]
 8005092:	1ad2      	subs	r2, r2, r3
 8005094:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005096:	2b00      	cmp	r3, #0
 8005098:	d001      	beq.n	800509e <__sflush_r+0x4a>
 800509a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800509c:	1ad2      	subs	r2, r2, r3
 800509e:	2300      	movs	r3, #0
 80050a0:	0028      	movs	r0, r5
 80050a2:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80050a4:	6a21      	ldr	r1, [r4, #32]
 80050a6:	47b8      	blx	r7
 80050a8:	89a2      	ldrh	r2, [r4, #12]
 80050aa:	1c43      	adds	r3, r0, #1
 80050ac:	d106      	bne.n	80050bc <__sflush_r+0x68>
 80050ae:	6829      	ldr	r1, [r5, #0]
 80050b0:	291d      	cmp	r1, #29
 80050b2:	d846      	bhi.n	8005142 <__sflush_r+0xee>
 80050b4:	4b29      	ldr	r3, [pc, #164]	@ (800515c <__sflush_r+0x108>)
 80050b6:	410b      	asrs	r3, r1
 80050b8:	07db      	lsls	r3, r3, #31
 80050ba:	d442      	bmi.n	8005142 <__sflush_r+0xee>
 80050bc:	2300      	movs	r3, #0
 80050be:	6063      	str	r3, [r4, #4]
 80050c0:	6923      	ldr	r3, [r4, #16]
 80050c2:	6023      	str	r3, [r4, #0]
 80050c4:	04d2      	lsls	r2, r2, #19
 80050c6:	d505      	bpl.n	80050d4 <__sflush_r+0x80>
 80050c8:	1c43      	adds	r3, r0, #1
 80050ca:	d102      	bne.n	80050d2 <__sflush_r+0x7e>
 80050cc:	682b      	ldr	r3, [r5, #0]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d100      	bne.n	80050d4 <__sflush_r+0x80>
 80050d2:	6560      	str	r0, [r4, #84]	@ 0x54
 80050d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80050d6:	602e      	str	r6, [r5, #0]
 80050d8:	2900      	cmp	r1, #0
 80050da:	d017      	beq.n	800510c <__sflush_r+0xb8>
 80050dc:	0023      	movs	r3, r4
 80050de:	3344      	adds	r3, #68	@ 0x44
 80050e0:	4299      	cmp	r1, r3
 80050e2:	d002      	beq.n	80050ea <__sflush_r+0x96>
 80050e4:	0028      	movs	r0, r5
 80050e6:	f7ff fbf7 	bl	80048d8 <_free_r>
 80050ea:	2300      	movs	r3, #0
 80050ec:	6363      	str	r3, [r4, #52]	@ 0x34
 80050ee:	e00d      	b.n	800510c <__sflush_r+0xb8>
 80050f0:	2301      	movs	r3, #1
 80050f2:	0028      	movs	r0, r5
 80050f4:	47b8      	blx	r7
 80050f6:	0002      	movs	r2, r0
 80050f8:	1c43      	adds	r3, r0, #1
 80050fa:	d1c6      	bne.n	800508a <__sflush_r+0x36>
 80050fc:	682b      	ldr	r3, [r5, #0]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d0c3      	beq.n	800508a <__sflush_r+0x36>
 8005102:	2b1d      	cmp	r3, #29
 8005104:	d001      	beq.n	800510a <__sflush_r+0xb6>
 8005106:	2b16      	cmp	r3, #22
 8005108:	d11a      	bne.n	8005140 <__sflush_r+0xec>
 800510a:	602e      	str	r6, [r5, #0]
 800510c:	2000      	movs	r0, #0
 800510e:	e01e      	b.n	800514e <__sflush_r+0xfa>
 8005110:	690e      	ldr	r6, [r1, #16]
 8005112:	2e00      	cmp	r6, #0
 8005114:	d0fa      	beq.n	800510c <__sflush_r+0xb8>
 8005116:	680f      	ldr	r7, [r1, #0]
 8005118:	600e      	str	r6, [r1, #0]
 800511a:	1bba      	subs	r2, r7, r6
 800511c:	9201      	str	r2, [sp, #4]
 800511e:	2200      	movs	r2, #0
 8005120:	079b      	lsls	r3, r3, #30
 8005122:	d100      	bne.n	8005126 <__sflush_r+0xd2>
 8005124:	694a      	ldr	r2, [r1, #20]
 8005126:	60a2      	str	r2, [r4, #8]
 8005128:	9b01      	ldr	r3, [sp, #4]
 800512a:	2b00      	cmp	r3, #0
 800512c:	ddee      	ble.n	800510c <__sflush_r+0xb8>
 800512e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8005130:	0032      	movs	r2, r6
 8005132:	001f      	movs	r7, r3
 8005134:	0028      	movs	r0, r5
 8005136:	9b01      	ldr	r3, [sp, #4]
 8005138:	6a21      	ldr	r1, [r4, #32]
 800513a:	47b8      	blx	r7
 800513c:	2800      	cmp	r0, #0
 800513e:	dc07      	bgt.n	8005150 <__sflush_r+0xfc>
 8005140:	89a2      	ldrh	r2, [r4, #12]
 8005142:	2340      	movs	r3, #64	@ 0x40
 8005144:	2001      	movs	r0, #1
 8005146:	4313      	orrs	r3, r2
 8005148:	b21b      	sxth	r3, r3
 800514a:	81a3      	strh	r3, [r4, #12]
 800514c:	4240      	negs	r0, r0
 800514e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005150:	9b01      	ldr	r3, [sp, #4]
 8005152:	1836      	adds	r6, r6, r0
 8005154:	1a1b      	subs	r3, r3, r0
 8005156:	9301      	str	r3, [sp, #4]
 8005158:	e7e6      	b.n	8005128 <__sflush_r+0xd4>
 800515a:	46c0      	nop			@ (mov r8, r8)
 800515c:	dfbffffe 	.word	0xdfbffffe

08005160 <_fflush_r>:
 8005160:	690b      	ldr	r3, [r1, #16]
 8005162:	b570      	push	{r4, r5, r6, lr}
 8005164:	0005      	movs	r5, r0
 8005166:	000c      	movs	r4, r1
 8005168:	2b00      	cmp	r3, #0
 800516a:	d102      	bne.n	8005172 <_fflush_r+0x12>
 800516c:	2500      	movs	r5, #0
 800516e:	0028      	movs	r0, r5
 8005170:	bd70      	pop	{r4, r5, r6, pc}
 8005172:	2800      	cmp	r0, #0
 8005174:	d004      	beq.n	8005180 <_fflush_r+0x20>
 8005176:	6a03      	ldr	r3, [r0, #32]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d101      	bne.n	8005180 <_fflush_r+0x20>
 800517c:	f7ff fa98 	bl	80046b0 <__sinit>
 8005180:	220c      	movs	r2, #12
 8005182:	5ea3      	ldrsh	r3, [r4, r2]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d0f1      	beq.n	800516c <_fflush_r+0xc>
 8005188:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800518a:	07d2      	lsls	r2, r2, #31
 800518c:	d404      	bmi.n	8005198 <_fflush_r+0x38>
 800518e:	059b      	lsls	r3, r3, #22
 8005190:	d402      	bmi.n	8005198 <_fflush_r+0x38>
 8005192:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005194:	f7ff fb9d 	bl	80048d2 <__retarget_lock_acquire_recursive>
 8005198:	0028      	movs	r0, r5
 800519a:	0021      	movs	r1, r4
 800519c:	f7ff ff5a 	bl	8005054 <__sflush_r>
 80051a0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80051a2:	0005      	movs	r5, r0
 80051a4:	07db      	lsls	r3, r3, #31
 80051a6:	d4e2      	bmi.n	800516e <_fflush_r+0xe>
 80051a8:	89a3      	ldrh	r3, [r4, #12]
 80051aa:	059b      	lsls	r3, r3, #22
 80051ac:	d4df      	bmi.n	800516e <_fflush_r+0xe>
 80051ae:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80051b0:	f7ff fb90 	bl	80048d4 <__retarget_lock_release_recursive>
 80051b4:	e7db      	b.n	800516e <_fflush_r+0xe>

080051b6 <__swbuf_r>:
 80051b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051b8:	0006      	movs	r6, r0
 80051ba:	000d      	movs	r5, r1
 80051bc:	0014      	movs	r4, r2
 80051be:	2800      	cmp	r0, #0
 80051c0:	d004      	beq.n	80051cc <__swbuf_r+0x16>
 80051c2:	6a03      	ldr	r3, [r0, #32]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d101      	bne.n	80051cc <__swbuf_r+0x16>
 80051c8:	f7ff fa72 	bl	80046b0 <__sinit>
 80051cc:	69a3      	ldr	r3, [r4, #24]
 80051ce:	60a3      	str	r3, [r4, #8]
 80051d0:	89a3      	ldrh	r3, [r4, #12]
 80051d2:	071b      	lsls	r3, r3, #28
 80051d4:	d502      	bpl.n	80051dc <__swbuf_r+0x26>
 80051d6:	6923      	ldr	r3, [r4, #16]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d109      	bne.n	80051f0 <__swbuf_r+0x3a>
 80051dc:	0021      	movs	r1, r4
 80051de:	0030      	movs	r0, r6
 80051e0:	f000 f82c 	bl	800523c <__swsetup_r>
 80051e4:	2800      	cmp	r0, #0
 80051e6:	d003      	beq.n	80051f0 <__swbuf_r+0x3a>
 80051e8:	2501      	movs	r5, #1
 80051ea:	426d      	negs	r5, r5
 80051ec:	0028      	movs	r0, r5
 80051ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80051f0:	6923      	ldr	r3, [r4, #16]
 80051f2:	6820      	ldr	r0, [r4, #0]
 80051f4:	b2ef      	uxtb	r7, r5
 80051f6:	1ac0      	subs	r0, r0, r3
 80051f8:	6963      	ldr	r3, [r4, #20]
 80051fa:	b2ed      	uxtb	r5, r5
 80051fc:	4283      	cmp	r3, r0
 80051fe:	dc05      	bgt.n	800520c <__swbuf_r+0x56>
 8005200:	0021      	movs	r1, r4
 8005202:	0030      	movs	r0, r6
 8005204:	f7ff ffac 	bl	8005160 <_fflush_r>
 8005208:	2800      	cmp	r0, #0
 800520a:	d1ed      	bne.n	80051e8 <__swbuf_r+0x32>
 800520c:	68a3      	ldr	r3, [r4, #8]
 800520e:	3001      	adds	r0, #1
 8005210:	3b01      	subs	r3, #1
 8005212:	60a3      	str	r3, [r4, #8]
 8005214:	6823      	ldr	r3, [r4, #0]
 8005216:	1c5a      	adds	r2, r3, #1
 8005218:	6022      	str	r2, [r4, #0]
 800521a:	701f      	strb	r7, [r3, #0]
 800521c:	6963      	ldr	r3, [r4, #20]
 800521e:	4283      	cmp	r3, r0
 8005220:	d004      	beq.n	800522c <__swbuf_r+0x76>
 8005222:	89a3      	ldrh	r3, [r4, #12]
 8005224:	07db      	lsls	r3, r3, #31
 8005226:	d5e1      	bpl.n	80051ec <__swbuf_r+0x36>
 8005228:	2d0a      	cmp	r5, #10
 800522a:	d1df      	bne.n	80051ec <__swbuf_r+0x36>
 800522c:	0021      	movs	r1, r4
 800522e:	0030      	movs	r0, r6
 8005230:	f7ff ff96 	bl	8005160 <_fflush_r>
 8005234:	2800      	cmp	r0, #0
 8005236:	d0d9      	beq.n	80051ec <__swbuf_r+0x36>
 8005238:	e7d6      	b.n	80051e8 <__swbuf_r+0x32>
	...

0800523c <__swsetup_r>:
 800523c:	4b2d      	ldr	r3, [pc, #180]	@ (80052f4 <__swsetup_r+0xb8>)
 800523e:	b570      	push	{r4, r5, r6, lr}
 8005240:	0005      	movs	r5, r0
 8005242:	6818      	ldr	r0, [r3, #0]
 8005244:	000c      	movs	r4, r1
 8005246:	2800      	cmp	r0, #0
 8005248:	d004      	beq.n	8005254 <__swsetup_r+0x18>
 800524a:	6a03      	ldr	r3, [r0, #32]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d101      	bne.n	8005254 <__swsetup_r+0x18>
 8005250:	f7ff fa2e 	bl	80046b0 <__sinit>
 8005254:	230c      	movs	r3, #12
 8005256:	5ee2      	ldrsh	r2, [r4, r3]
 8005258:	0713      	lsls	r3, r2, #28
 800525a:	d423      	bmi.n	80052a4 <__swsetup_r+0x68>
 800525c:	06d3      	lsls	r3, r2, #27
 800525e:	d407      	bmi.n	8005270 <__swsetup_r+0x34>
 8005260:	2309      	movs	r3, #9
 8005262:	602b      	str	r3, [r5, #0]
 8005264:	2340      	movs	r3, #64	@ 0x40
 8005266:	2001      	movs	r0, #1
 8005268:	4313      	orrs	r3, r2
 800526a:	81a3      	strh	r3, [r4, #12]
 800526c:	4240      	negs	r0, r0
 800526e:	e03a      	b.n	80052e6 <__swsetup_r+0xaa>
 8005270:	0752      	lsls	r2, r2, #29
 8005272:	d513      	bpl.n	800529c <__swsetup_r+0x60>
 8005274:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005276:	2900      	cmp	r1, #0
 8005278:	d008      	beq.n	800528c <__swsetup_r+0x50>
 800527a:	0023      	movs	r3, r4
 800527c:	3344      	adds	r3, #68	@ 0x44
 800527e:	4299      	cmp	r1, r3
 8005280:	d002      	beq.n	8005288 <__swsetup_r+0x4c>
 8005282:	0028      	movs	r0, r5
 8005284:	f7ff fb28 	bl	80048d8 <_free_r>
 8005288:	2300      	movs	r3, #0
 800528a:	6363      	str	r3, [r4, #52]	@ 0x34
 800528c:	2224      	movs	r2, #36	@ 0x24
 800528e:	89a3      	ldrh	r3, [r4, #12]
 8005290:	4393      	bics	r3, r2
 8005292:	81a3      	strh	r3, [r4, #12]
 8005294:	2300      	movs	r3, #0
 8005296:	6063      	str	r3, [r4, #4]
 8005298:	6923      	ldr	r3, [r4, #16]
 800529a:	6023      	str	r3, [r4, #0]
 800529c:	2308      	movs	r3, #8
 800529e:	89a2      	ldrh	r2, [r4, #12]
 80052a0:	4313      	orrs	r3, r2
 80052a2:	81a3      	strh	r3, [r4, #12]
 80052a4:	6923      	ldr	r3, [r4, #16]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d10b      	bne.n	80052c2 <__swsetup_r+0x86>
 80052aa:	21a0      	movs	r1, #160	@ 0xa0
 80052ac:	2280      	movs	r2, #128	@ 0x80
 80052ae:	89a3      	ldrh	r3, [r4, #12]
 80052b0:	0089      	lsls	r1, r1, #2
 80052b2:	0092      	lsls	r2, r2, #2
 80052b4:	400b      	ands	r3, r1
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d003      	beq.n	80052c2 <__swsetup_r+0x86>
 80052ba:	0021      	movs	r1, r4
 80052bc:	0028      	movs	r0, r5
 80052be:	f000 f863 	bl	8005388 <__smakebuf_r>
 80052c2:	230c      	movs	r3, #12
 80052c4:	5ee2      	ldrsh	r2, [r4, r3]
 80052c6:	2101      	movs	r1, #1
 80052c8:	0013      	movs	r3, r2
 80052ca:	400b      	ands	r3, r1
 80052cc:	420a      	tst	r2, r1
 80052ce:	d00b      	beq.n	80052e8 <__swsetup_r+0xac>
 80052d0:	2300      	movs	r3, #0
 80052d2:	60a3      	str	r3, [r4, #8]
 80052d4:	6963      	ldr	r3, [r4, #20]
 80052d6:	425b      	negs	r3, r3
 80052d8:	61a3      	str	r3, [r4, #24]
 80052da:	2000      	movs	r0, #0
 80052dc:	6923      	ldr	r3, [r4, #16]
 80052de:	4283      	cmp	r3, r0
 80052e0:	d101      	bne.n	80052e6 <__swsetup_r+0xaa>
 80052e2:	0613      	lsls	r3, r2, #24
 80052e4:	d4be      	bmi.n	8005264 <__swsetup_r+0x28>
 80052e6:	bd70      	pop	{r4, r5, r6, pc}
 80052e8:	0791      	lsls	r1, r2, #30
 80052ea:	d400      	bmi.n	80052ee <__swsetup_r+0xb2>
 80052ec:	6963      	ldr	r3, [r4, #20]
 80052ee:	60a3      	str	r3, [r4, #8]
 80052f0:	e7f3      	b.n	80052da <__swsetup_r+0x9e>
 80052f2:	46c0      	nop			@ (mov r8, r8)
 80052f4:	20000318 	.word	0x20000318

080052f8 <_sbrk_r>:
 80052f8:	2300      	movs	r3, #0
 80052fa:	b570      	push	{r4, r5, r6, lr}
 80052fc:	4d06      	ldr	r5, [pc, #24]	@ (8005318 <_sbrk_r+0x20>)
 80052fe:	0004      	movs	r4, r0
 8005300:	0008      	movs	r0, r1
 8005302:	602b      	str	r3, [r5, #0]
 8005304:	f7fb ff12 	bl	800112c <_sbrk>
 8005308:	1c43      	adds	r3, r0, #1
 800530a:	d103      	bne.n	8005314 <_sbrk_r+0x1c>
 800530c:	682b      	ldr	r3, [r5, #0]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d000      	beq.n	8005314 <_sbrk_r+0x1c>
 8005312:	6023      	str	r3, [r4, #0]
 8005314:	bd70      	pop	{r4, r5, r6, pc}
 8005316:	46c0      	nop			@ (mov r8, r8)
 8005318:	20000b90 	.word	0x20000b90

0800531c <memchr>:
 800531c:	b2c9      	uxtb	r1, r1
 800531e:	1882      	adds	r2, r0, r2
 8005320:	4290      	cmp	r0, r2
 8005322:	d101      	bne.n	8005328 <memchr+0xc>
 8005324:	2000      	movs	r0, #0
 8005326:	4770      	bx	lr
 8005328:	7803      	ldrb	r3, [r0, #0]
 800532a:	428b      	cmp	r3, r1
 800532c:	d0fb      	beq.n	8005326 <memchr+0xa>
 800532e:	3001      	adds	r0, #1
 8005330:	e7f6      	b.n	8005320 <memchr+0x4>
	...

08005334 <__swhatbuf_r>:
 8005334:	b570      	push	{r4, r5, r6, lr}
 8005336:	000e      	movs	r6, r1
 8005338:	001d      	movs	r5, r3
 800533a:	230e      	movs	r3, #14
 800533c:	5ec9      	ldrsh	r1, [r1, r3]
 800533e:	0014      	movs	r4, r2
 8005340:	b096      	sub	sp, #88	@ 0x58
 8005342:	2900      	cmp	r1, #0
 8005344:	da0c      	bge.n	8005360 <__swhatbuf_r+0x2c>
 8005346:	89b2      	ldrh	r2, [r6, #12]
 8005348:	2380      	movs	r3, #128	@ 0x80
 800534a:	0011      	movs	r1, r2
 800534c:	4019      	ands	r1, r3
 800534e:	421a      	tst	r2, r3
 8005350:	d114      	bne.n	800537c <__swhatbuf_r+0x48>
 8005352:	2380      	movs	r3, #128	@ 0x80
 8005354:	00db      	lsls	r3, r3, #3
 8005356:	2000      	movs	r0, #0
 8005358:	6029      	str	r1, [r5, #0]
 800535a:	6023      	str	r3, [r4, #0]
 800535c:	b016      	add	sp, #88	@ 0x58
 800535e:	bd70      	pop	{r4, r5, r6, pc}
 8005360:	466a      	mov	r2, sp
 8005362:	f000 f853 	bl	800540c <_fstat_r>
 8005366:	2800      	cmp	r0, #0
 8005368:	dbed      	blt.n	8005346 <__swhatbuf_r+0x12>
 800536a:	23f0      	movs	r3, #240	@ 0xf0
 800536c:	9901      	ldr	r1, [sp, #4]
 800536e:	021b      	lsls	r3, r3, #8
 8005370:	4019      	ands	r1, r3
 8005372:	4b04      	ldr	r3, [pc, #16]	@ (8005384 <__swhatbuf_r+0x50>)
 8005374:	18c9      	adds	r1, r1, r3
 8005376:	424b      	negs	r3, r1
 8005378:	4159      	adcs	r1, r3
 800537a:	e7ea      	b.n	8005352 <__swhatbuf_r+0x1e>
 800537c:	2100      	movs	r1, #0
 800537e:	2340      	movs	r3, #64	@ 0x40
 8005380:	e7e9      	b.n	8005356 <__swhatbuf_r+0x22>
 8005382:	46c0      	nop			@ (mov r8, r8)
 8005384:	ffffe000 	.word	0xffffe000

08005388 <__smakebuf_r>:
 8005388:	b5f0      	push	{r4, r5, r6, r7, lr}
 800538a:	2602      	movs	r6, #2
 800538c:	898b      	ldrh	r3, [r1, #12]
 800538e:	0005      	movs	r5, r0
 8005390:	000c      	movs	r4, r1
 8005392:	b085      	sub	sp, #20
 8005394:	4233      	tst	r3, r6
 8005396:	d007      	beq.n	80053a8 <__smakebuf_r+0x20>
 8005398:	0023      	movs	r3, r4
 800539a:	3347      	adds	r3, #71	@ 0x47
 800539c:	6023      	str	r3, [r4, #0]
 800539e:	6123      	str	r3, [r4, #16]
 80053a0:	2301      	movs	r3, #1
 80053a2:	6163      	str	r3, [r4, #20]
 80053a4:	b005      	add	sp, #20
 80053a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053a8:	ab03      	add	r3, sp, #12
 80053aa:	aa02      	add	r2, sp, #8
 80053ac:	f7ff ffc2 	bl	8005334 <__swhatbuf_r>
 80053b0:	9f02      	ldr	r7, [sp, #8]
 80053b2:	9001      	str	r0, [sp, #4]
 80053b4:	0039      	movs	r1, r7
 80053b6:	0028      	movs	r0, r5
 80053b8:	f7ff fafa 	bl	80049b0 <_malloc_r>
 80053bc:	2800      	cmp	r0, #0
 80053be:	d108      	bne.n	80053d2 <__smakebuf_r+0x4a>
 80053c0:	220c      	movs	r2, #12
 80053c2:	5ea3      	ldrsh	r3, [r4, r2]
 80053c4:	059a      	lsls	r2, r3, #22
 80053c6:	d4ed      	bmi.n	80053a4 <__smakebuf_r+0x1c>
 80053c8:	2203      	movs	r2, #3
 80053ca:	4393      	bics	r3, r2
 80053cc:	431e      	orrs	r6, r3
 80053ce:	81a6      	strh	r6, [r4, #12]
 80053d0:	e7e2      	b.n	8005398 <__smakebuf_r+0x10>
 80053d2:	2380      	movs	r3, #128	@ 0x80
 80053d4:	89a2      	ldrh	r2, [r4, #12]
 80053d6:	6020      	str	r0, [r4, #0]
 80053d8:	4313      	orrs	r3, r2
 80053da:	81a3      	strh	r3, [r4, #12]
 80053dc:	9b03      	ldr	r3, [sp, #12]
 80053de:	6120      	str	r0, [r4, #16]
 80053e0:	6167      	str	r7, [r4, #20]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d00c      	beq.n	8005400 <__smakebuf_r+0x78>
 80053e6:	0028      	movs	r0, r5
 80053e8:	230e      	movs	r3, #14
 80053ea:	5ee1      	ldrsh	r1, [r4, r3]
 80053ec:	f000 f820 	bl	8005430 <_isatty_r>
 80053f0:	2800      	cmp	r0, #0
 80053f2:	d005      	beq.n	8005400 <__smakebuf_r+0x78>
 80053f4:	2303      	movs	r3, #3
 80053f6:	89a2      	ldrh	r2, [r4, #12]
 80053f8:	439a      	bics	r2, r3
 80053fa:	3b02      	subs	r3, #2
 80053fc:	4313      	orrs	r3, r2
 80053fe:	81a3      	strh	r3, [r4, #12]
 8005400:	89a3      	ldrh	r3, [r4, #12]
 8005402:	9a01      	ldr	r2, [sp, #4]
 8005404:	4313      	orrs	r3, r2
 8005406:	81a3      	strh	r3, [r4, #12]
 8005408:	e7cc      	b.n	80053a4 <__smakebuf_r+0x1c>
	...

0800540c <_fstat_r>:
 800540c:	2300      	movs	r3, #0
 800540e:	b570      	push	{r4, r5, r6, lr}
 8005410:	4d06      	ldr	r5, [pc, #24]	@ (800542c <_fstat_r+0x20>)
 8005412:	0004      	movs	r4, r0
 8005414:	0008      	movs	r0, r1
 8005416:	0011      	movs	r1, r2
 8005418:	602b      	str	r3, [r5, #0]
 800541a:	f7fb fe64 	bl	80010e6 <_fstat>
 800541e:	1c43      	adds	r3, r0, #1
 8005420:	d103      	bne.n	800542a <_fstat_r+0x1e>
 8005422:	682b      	ldr	r3, [r5, #0]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d000      	beq.n	800542a <_fstat_r+0x1e>
 8005428:	6023      	str	r3, [r4, #0]
 800542a:	bd70      	pop	{r4, r5, r6, pc}
 800542c:	20000b90 	.word	0x20000b90

08005430 <_isatty_r>:
 8005430:	2300      	movs	r3, #0
 8005432:	b570      	push	{r4, r5, r6, lr}
 8005434:	4d06      	ldr	r5, [pc, #24]	@ (8005450 <_isatty_r+0x20>)
 8005436:	0004      	movs	r4, r0
 8005438:	0008      	movs	r0, r1
 800543a:	602b      	str	r3, [r5, #0]
 800543c:	f7fb fe61 	bl	8001102 <_isatty>
 8005440:	1c43      	adds	r3, r0, #1
 8005442:	d103      	bne.n	800544c <_isatty_r+0x1c>
 8005444:	682b      	ldr	r3, [r5, #0]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d000      	beq.n	800544c <_isatty_r+0x1c>
 800544a:	6023      	str	r3, [r4, #0]
 800544c:	bd70      	pop	{r4, r5, r6, pc}
 800544e:	46c0      	nop			@ (mov r8, r8)
 8005450:	20000b90 	.word	0x20000b90

08005454 <_init>:
 8005454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005456:	46c0      	nop			@ (mov r8, r8)
 8005458:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800545a:	bc08      	pop	{r3}
 800545c:	469e      	mov	lr, r3
 800545e:	4770      	bx	lr

08005460 <_fini>:
 8005460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005462:	46c0      	nop			@ (mov r8, r8)
 8005464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005466:	bc08      	pop	{r3}
 8005468:	469e      	mov	lr, r3
 800546a:	4770      	bx	lr
